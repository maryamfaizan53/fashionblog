"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/polished";
exports.ids = ["vendor-chunks/polished"];
exports.modules = {

/***/ "(ssr)/./node_modules/polished/dist/polished.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/polished/dist/polished.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adjustHue: () => (/* binding */ curriedAdjustHue$1),\n/* harmony export */   animation: () => (/* binding */ animation),\n/* harmony export */   backgroundImages: () => (/* binding */ backgroundImages),\n/* harmony export */   backgrounds: () => (/* binding */ backgrounds),\n/* harmony export */   between: () => (/* binding */ between),\n/* harmony export */   border: () => (/* binding */ border),\n/* harmony export */   borderColor: () => (/* binding */ borderColor),\n/* harmony export */   borderRadius: () => (/* binding */ borderRadius),\n/* harmony export */   borderStyle: () => (/* binding */ borderStyle),\n/* harmony export */   borderWidth: () => (/* binding */ borderWidth),\n/* harmony export */   buttons: () => (/* binding */ buttons),\n/* harmony export */   clearFix: () => (/* binding */ clearFix),\n/* harmony export */   complement: () => (/* binding */ complement),\n/* harmony export */   cover: () => (/* binding */ cover),\n/* harmony export */   cssVar: () => (/* binding */ cssVar),\n/* harmony export */   darken: () => (/* binding */ curriedDarken$1),\n/* harmony export */   desaturate: () => (/* binding */ curriedDesaturate$1),\n/* harmony export */   directionalProperty: () => (/* binding */ directionalProperty),\n/* harmony export */   easeIn: () => (/* binding */ easeIn),\n/* harmony export */   easeInOut: () => (/* binding */ easeInOut),\n/* harmony export */   easeOut: () => (/* binding */ easeOut),\n/* harmony export */   ellipsis: () => (/* binding */ ellipsis),\n/* harmony export */   em: () => (/* binding */ em$1),\n/* harmony export */   fluidRange: () => (/* binding */ fluidRange),\n/* harmony export */   fontFace: () => (/* binding */ fontFace),\n/* harmony export */   getContrast: () => (/* binding */ getContrast),\n/* harmony export */   getLuminance: () => (/* binding */ getLuminance),\n/* harmony export */   getValueAndUnit: () => (/* binding */ getValueAndUnit),\n/* harmony export */   grayscale: () => (/* binding */ grayscale),\n/* harmony export */   hiDPI: () => (/* binding */ hiDPI),\n/* harmony export */   hideText: () => (/* binding */ hideText),\n/* harmony export */   hideVisually: () => (/* binding */ hideVisually),\n/* harmony export */   hsl: () => (/* binding */ hsl),\n/* harmony export */   hslToColorString: () => (/* binding */ hslToColorString),\n/* harmony export */   hsla: () => (/* binding */ hsla),\n/* harmony export */   important: () => (/* binding */ important),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   lighten: () => (/* binding */ curriedLighten$1),\n/* harmony export */   linearGradient: () => (/* binding */ linearGradient),\n/* harmony export */   margin: () => (/* binding */ margin),\n/* harmony export */   math: () => (/* binding */ math),\n/* harmony export */   meetsContrastGuidelines: () => (/* binding */ meetsContrastGuidelines),\n/* harmony export */   mix: () => (/* binding */ mix$1),\n/* harmony export */   modularScale: () => (/* binding */ modularScale),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   opacify: () => (/* binding */ curriedOpacify$1),\n/* harmony export */   padding: () => (/* binding */ padding),\n/* harmony export */   parseToHsl: () => (/* binding */ parseToHsl),\n/* harmony export */   parseToRgb: () => (/* binding */ parseToRgb),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   radialGradient: () => (/* binding */ radialGradient),\n/* harmony export */   readableColor: () => (/* binding */ readableColor),\n/* harmony export */   rem: () => (/* binding */ rem$1),\n/* harmony export */   remToPx: () => (/* binding */ remToPx),\n/* harmony export */   retinaImage: () => (/* binding */ retinaImage),\n/* harmony export */   rgb: () => (/* binding */ rgb),\n/* harmony export */   rgbToColorString: () => (/* binding */ rgbToColorString),\n/* harmony export */   rgba: () => (/* binding */ rgba),\n/* harmony export */   saturate: () => (/* binding */ curriedSaturate$1),\n/* harmony export */   setHue: () => (/* binding */ curriedSetHue$1),\n/* harmony export */   setLightness: () => (/* binding */ curriedSetLightness$1),\n/* harmony export */   setSaturation: () => (/* binding */ curriedSetSaturation$1),\n/* harmony export */   shade: () => (/* binding */ curriedShade$1),\n/* harmony export */   size: () => (/* binding */ size),\n/* harmony export */   stripUnit: () => (/* binding */ stripUnit),\n/* harmony export */   textInputs: () => (/* binding */ textInputs),\n/* harmony export */   timingFunctions: () => (/* binding */ timingFunctions),\n/* harmony export */   tint: () => (/* binding */ curriedTint$1),\n/* harmony export */   toColorString: () => (/* binding */ toColorString),\n/* harmony export */   transitions: () => (/* binding */ transitions),\n/* harmony export */   transparentize: () => (/* binding */ curriedTransparentize$1),\n/* harmony export */   triangle: () => (/* binding */ triangle),\n/* harmony export */   wordWrap: () => (/* binding */ wordWrap)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/wrapNativeSuper */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_taggedTemplateLiteralLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/taggedTemplateLiteralLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js\");\n\n\n\n\n\nfunction last() {\n    var _ref;\n    return _ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref];\n}\nfunction negation(a) {\n    return -a;\n}\nfunction addition(a, b) {\n    return a + b;\n}\nfunction subtraction(a, b) {\n    return a - b;\n}\nfunction multiplication(a, b) {\n    return a * b;\n}\nfunction division(a, b) {\n    return a / b;\n}\nfunction max() {\n    return Math.max.apply(Math, arguments);\n}\nfunction min() {\n    return Math.min.apply(Math, arguments);\n}\nfunction comma() {\n    return Array.of.apply(Array, arguments);\n}\nvar defaultSymbols = {\n    symbols: {\n        \"*\": {\n            infix: {\n                symbol: \"*\",\n                f: multiplication,\n                notation: \"infix\",\n                precedence: 4,\n                rightToLeft: 0,\n                argCount: 2\n            },\n            symbol: \"*\",\n            regSymbol: \"\\\\*\"\n        },\n        \"/\": {\n            infix: {\n                symbol: \"/\",\n                f: division,\n                notation: \"infix\",\n                precedence: 4,\n                rightToLeft: 0,\n                argCount: 2\n            },\n            symbol: \"/\",\n            regSymbol: \"/\"\n        },\n        \"+\": {\n            infix: {\n                symbol: \"+\",\n                f: addition,\n                notation: \"infix\",\n                precedence: 2,\n                rightToLeft: 0,\n                argCount: 2\n            },\n            prefix: {\n                symbol: \"+\",\n                f: last,\n                notation: \"prefix\",\n                precedence: 3,\n                rightToLeft: 0,\n                argCount: 1\n            },\n            symbol: \"+\",\n            regSymbol: \"\\\\+\"\n        },\n        \"-\": {\n            infix: {\n                symbol: \"-\",\n                f: subtraction,\n                notation: \"infix\",\n                precedence: 2,\n                rightToLeft: 0,\n                argCount: 2\n            },\n            prefix: {\n                symbol: \"-\",\n                f: negation,\n                notation: \"prefix\",\n                precedence: 3,\n                rightToLeft: 0,\n                argCount: 1\n            },\n            symbol: \"-\",\n            regSymbol: \"-\"\n        },\n        \",\": {\n            infix: {\n                symbol: \",\",\n                f: comma,\n                notation: \"infix\",\n                precedence: 1,\n                rightToLeft: 0,\n                argCount: 2\n            },\n            symbol: \",\",\n            regSymbol: \",\"\n        },\n        \"(\": {\n            prefix: {\n                symbol: \"(\",\n                f: last,\n                notation: \"prefix\",\n                precedence: 0,\n                rightToLeft: 0,\n                argCount: 1\n            },\n            symbol: \"(\",\n            regSymbol: \"\\\\(\"\n        },\n        \")\": {\n            postfix: {\n                symbol: \")\",\n                f: undefined,\n                notation: \"postfix\",\n                precedence: 0,\n                rightToLeft: 0,\n                argCount: 1\n            },\n            symbol: \")\",\n            regSymbol: \"\\\\)\"\n        },\n        min: {\n            func: {\n                symbol: \"min\",\n                f: min,\n                notation: \"func\",\n                precedence: 0,\n                rightToLeft: 0,\n                argCount: 1\n            },\n            symbol: \"min\",\n            regSymbol: \"min\\\\b\"\n        },\n        max: {\n            func: {\n                symbol: \"max\",\n                f: max,\n                notation: \"func\",\n                precedence: 0,\n                rightToLeft: 0,\n                argCount: 1\n            },\n            symbol: \"max\",\n            regSymbol: \"max\\\\b\"\n        }\n    }\n};\nvar defaultSymbolMap = defaultSymbols;\n// based on https://github.com/styled-components/styled-components/blob/fcf6f3804c57a14dd7984dfab7bc06ee2edca044/src/utils/error.js\n/**\n * Parse errors.md and turn it into a simple hash of code: message\n * @private\n */ var ERRORS = {\n    \"1\": \"Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\\n\\n\",\n    \"2\": \"Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\\n\\n\",\n    \"3\": \"Passed an incorrect argument to a color function, please pass a string representation of a color.\\n\\n\",\n    \"4\": \"Couldn't generate valid rgb string from %s, it returned %s.\\n\\n\",\n    \"5\": \"Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\\n\\n\",\n    \"6\": \"Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\\n\\n\",\n    \"7\": \"Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\\n\\n\",\n    \"8\": \"Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\\n\\n\",\n    \"9\": \"Please provide a number of steps to the modularScale helper.\\n\\n\",\n    \"10\": \"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\\n\\n\",\n    \"11\": 'Invalid value passed as base to modularScale, expected number or em string but got \"%s\"\\n\\n',\n    \"12\": 'Expected a string ending in \"px\" or a number passed as the first argument to %s(), got \"%s\" instead.\\n\\n',\n    \"13\": 'Expected a string ending in \"px\" or a number passed as the second argument to %s(), got \"%s\" instead.\\n\\n',\n    \"14\": 'Passed invalid pixel value (\"%s\") to %s(), please pass a value like \"12px\" or 12.\\n\\n',\n    \"15\": 'Passed invalid base value (\"%s\") to %s(), please pass a value like \"12px\" or 12.\\n\\n',\n    \"16\": \"You must provide a template to this method.\\n\\n\",\n    \"17\": \"You passed an unsupported selector state to this method.\\n\\n\",\n    \"18\": \"minScreen and maxScreen must be provided as stringified numbers with the same units.\\n\\n\",\n    \"19\": \"fromSize and toSize must be provided as stringified numbers with the same units.\\n\\n\",\n    \"20\": \"expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\\n\\n\",\n    \"21\": \"expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\\n\\n\",\n    \"22\": \"expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\\n\\n\",\n    \"23\": \"fontFace expects a name of a font-family.\\n\\n\",\n    \"24\": \"fontFace expects either the path to the font file(s) or a name of a local copy.\\n\\n\",\n    \"25\": \"fontFace expects localFonts to be an array.\\n\\n\",\n    \"26\": \"fontFace expects fileFormats to be an array.\\n\\n\",\n    \"27\": \"radialGradient requries at least 2 color-stops to properly render.\\n\\n\",\n    \"28\": \"Please supply a filename to retinaImage() as the first argument.\\n\\n\",\n    \"29\": \"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\\n\\n\",\n    \"30\": \"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\\n\\n\",\n    \"31\": \"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\\n\\n\",\n    \"32\": \"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\\n\\n\",\n    \"33\": \"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\\n\\n\",\n    \"34\": \"borderRadius expects a radius value as a string or number as the second argument.\\n\\n\",\n    \"35\": 'borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument.\\n\\n',\n    \"36\": \"Property must be a string value.\\n\\n\",\n    \"37\": \"Syntax Error at %s.\\n\\n\",\n    \"38\": \"Formula contains a function that needs parentheses at %s.\\n\\n\",\n    \"39\": \"Formula is missing closing parenthesis at %s.\\n\\n\",\n    \"40\": \"Formula has too many closing parentheses at %s.\\n\\n\",\n    \"41\": \"All values in a formula must have the same unit or be unitless.\\n\\n\",\n    \"42\": \"Please provide a number of steps to the modularScale helper.\\n\\n\",\n    \"43\": \"Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\\n\\n\",\n    \"44\": \"Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\\n\\n\",\n    \"45\": \"Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\\n\\n\",\n    \"46\": \"Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\\n\\n\",\n    \"47\": \"minScreen and maxScreen must be provided as stringified numbers with the same units.\\n\\n\",\n    \"48\": \"fromSize and toSize must be provided as stringified numbers with the same units.\\n\\n\",\n    \"49\": \"Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\\n\\n\",\n    \"50\": \"Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\\n\\n\",\n    \"51\": \"Expects the first argument object to have the properties prop, fromSize, and toSize.\\n\\n\",\n    \"52\": \"fontFace expects either the path to the font file(s) or a name of a local copy.\\n\\n\",\n    \"53\": \"fontFace expects localFonts to be an array.\\n\\n\",\n    \"54\": \"fontFace expects fileFormats to be an array.\\n\\n\",\n    \"55\": \"fontFace expects a name of a font-family.\\n\\n\",\n    \"56\": \"linearGradient requries at least 2 color-stops to properly render.\\n\\n\",\n    \"57\": \"radialGradient requries at least 2 color-stops to properly render.\\n\\n\",\n    \"58\": \"Please supply a filename to retinaImage() as the first argument.\\n\\n\",\n    \"59\": \"Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\\n\\n\",\n    \"60\": \"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\\n\\n\",\n    \"61\": \"Property must be a string value.\\n\\n\",\n    \"62\": \"borderRadius expects a radius value as a string or number as the second argument.\\n\\n\",\n    \"63\": 'borderRadius expects one of \"top\", \"bottom\", \"left\" or \"right\" as the first argument.\\n\\n',\n    \"64\": \"The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\\n\\n\",\n    \"65\": \"To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\\n\\n\",\n    \"66\": \"The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\\n\\n\",\n    \"67\": \"You must provide a template to this method.\\n\\n\",\n    \"68\": \"You passed an unsupported selector state to this method.\\n\\n\",\n    \"69\": 'Expected a string ending in \"px\" or a number passed as the first argument to %s(), got %s instead.\\n\\n',\n    \"70\": 'Expected a string ending in \"px\" or a number passed as the second argument to %s(), got %s instead.\\n\\n',\n    \"71\": 'Passed invalid pixel value %s to %s(), please pass a value like \"12px\" or 12.\\n\\n',\n    \"72\": 'Passed invalid base value %s to %s(), please pass a value like \"12px\" or 12.\\n\\n',\n    \"73\": \"Please provide a valid CSS variable.\\n\\n\",\n    \"74\": \"CSS variable not found and no default was provided.\\n\\n\",\n    \"75\": \"important requires a valid style object, got a %s instead.\\n\\n\",\n    \"76\": \"fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\\n\\n\",\n    \"77\": 'remToPx expects a value in \"rem\" but you provided it in \"%s\".\\n\\n',\n    \"78\": 'base must be set in \"px\" or \"%\" but you set it in \"%s\".\\n'\n};\n/**\n * super basic version of sprintf\n * @private\n */ function format() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    var a = args[0];\n    var b = [];\n    var c;\n    for(c = 1; c < args.length; c += 1){\n        b.push(args[c]);\n    }\n    b.forEach(function(d) {\n        a = a.replace(/%[a-z]/, d);\n    });\n    return a;\n}\n/**\n * Create an error file out of errors.md for development and a simple web link to the full errors\n * in production mode.\n * @private\n */ var PolishedError = /*#__PURE__*/ function(_Error) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(PolishedError, _Error);\n    function PolishedError(code) {\n        var _this;\n        if (false) {} else {\n            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                args[_key2 - 1] = arguments[_key2];\n            }\n            _this = _Error.call(this, format.apply(void 0, [\n                ERRORS[code]\n            ].concat(args))) || this;\n        }\n        return (0,_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this);\n    }\n    return PolishedError;\n}(/*#__PURE__*/ (0,_babel_runtime_helpers_esm_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(Error));\nvar unitRegExp = /((?!\\w)a|na|hc|mc|dg|me[r]?|xe|ni(?![a-zA-Z])|mm|cp|tp|xp|q(?!s)|hv|xamv|nimv|wv|sm|s(?!\\D|$)|ged|darg?|nrut)/g;\n// Merges additional math functionality into the defaults.\nfunction mergeSymbolMaps(additionalSymbols) {\n    var symbolMap = {};\n    symbolMap.symbols = additionalSymbols ? (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, defaultSymbolMap.symbols, additionalSymbols.symbols) : (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, defaultSymbolMap.symbols);\n    return symbolMap;\n}\nfunction exec(operators, values) {\n    var _ref;\n    var op = operators.pop();\n    values.push(op.f.apply(op, (_ref = []).concat.apply(_ref, values.splice(-op.argCount))));\n    return op.precedence;\n}\nfunction calculate(expression, additionalSymbols) {\n    var symbolMap = mergeSymbolMaps(additionalSymbols);\n    var match;\n    var operators = [\n        symbolMap.symbols[\"(\"].prefix\n    ];\n    var values = [];\n    var pattern = new RegExp(\"\\\\d+(?:\\\\.\\\\d+)?|\" + // ...and patterns for individual operators/function names\n    Object.keys(symbolMap.symbols).map(function(key) {\n        return symbolMap.symbols[key];\n    })// longer symbols should be listed first\n    // $FlowFixMe\n    .sort(function(a, b) {\n        return b.symbol.length - a.symbol.length;\n    })// $FlowFixMe\n    .map(function(val) {\n        return val.regSymbol;\n    }).join(\"|\") + \"|(\\\\S)\", \"g\");\n    pattern.lastIndex = 0; // Reset regular expression object\n    var afterValue = false;\n    do {\n        match = pattern.exec(expression);\n        var _ref2 = match || [\n            \")\",\n            undefined\n        ], token = _ref2[0], bad = _ref2[1];\n        var notNumber = symbolMap.symbols[token];\n        var notNewValue = notNumber && !notNumber.prefix && !notNumber.func;\n        var notAfterValue = !notNumber || !notNumber.postfix && !notNumber.infix;\n        // Check for syntax errors:\n        if (bad || (afterValue ? notAfterValue : notNewValue)) {\n            throw new PolishedError(37, match ? match.index : expression.length, expression);\n        }\n        if (afterValue) {\n            // We either have an infix or postfix operator (they should be mutually exclusive)\n            var curr = notNumber.postfix || notNumber.infix;\n            do {\n                var prev = operators[operators.length - 1];\n                if ((curr.precedence - prev.precedence || prev.rightToLeft) > 0) break;\n            // Apply previous operator, since it has precedence over current one\n            }while (exec(operators, values)); // Exit loop after executing an opening parenthesis or function\n            afterValue = curr.notation === \"postfix\";\n            if (curr.symbol !== \")\") {\n                operators.push(curr);\n                // Postfix always has precedence over any operator that follows after it\n                if (afterValue) exec(operators, values);\n            }\n        } else if (notNumber) {\n            // prefix operator or function\n            operators.push(notNumber.prefix || notNumber.func);\n            if (notNumber.func) {\n                // Require an opening parenthesis\n                match = pattern.exec(expression);\n                if (!match || match[0] !== \"(\") {\n                    throw new PolishedError(38, match ? match.index : expression.length, expression);\n                }\n            }\n        } else {\n            // number\n            values.push(+token);\n            afterValue = true;\n        }\n    }while (match && operators.length);\n    if (operators.length) {\n        throw new PolishedError(39, match ? match.index : expression.length, expression);\n    } else if (match) {\n        throw new PolishedError(40, match ? match.index : expression.length, expression);\n    } else {\n        return values.pop();\n    }\n}\nfunction reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n}\n/**\n * Helper for doing math with CSS Units. Accepts a formula as a string. All values in the formula must have the same unit (or be unitless). Supports complex formulas utliziing addition, subtraction, multiplication, division, square root, powers, factorial, min, max, as well as parentheses for order of operation.\n *\n *In cases where you need to do calculations with mixed units where one unit is a [relative length unit](https://developer.mozilla.org/en-US/docs/Web/CSS/length#Relative_length_units), you will want to use [CSS Calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc).\n *\n * *warning* While we've done everything possible to ensure math safely evalutes formulas expressed as strings, you should always use extreme caution when passing `math` user provided values.\n * @example\n * // Styles as object usage\n * const styles = {\n *   fontSize: math('12rem + 8rem'),\n *   fontSize: math('(12px + 2px) * 3'),\n *   fontSize: math('3px^2 + sqrt(4)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   fontSize: ${math('12rem + 8rem')};\n *   fontSize: ${math('(12px + 2px) * 3')};\n *   fontSize: ${math('3px^2 + sqrt(4)')};\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   fontSize: '20rem',\n *   fontSize: '42px',\n *   fontSize: '11px',\n * }\n */ function math(formula, additionalSymbols) {\n    var reversedFormula = reverseString(formula);\n    var formulaMatch = reversedFormula.match(unitRegExp);\n    // Check that all units are the same\n    if (formulaMatch && !formulaMatch.every(function(unit) {\n        return unit === formulaMatch[0];\n    })) {\n        throw new PolishedError(41);\n    }\n    var cleanFormula = reverseString(reversedFormula.replace(unitRegExp, \"\"));\n    return \"\" + calculate(cleanFormula, additionalSymbols) + (formulaMatch ? reverseString(formulaMatch[0]) : \"\");\n}\nvar cssVariableRegex = /--[\\S]*/g;\n/**\n * Fetches the value of a passed CSS Variable in the :root scope, or otherwise returns a defaultValue if provided.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'background': cssVar('--background-color'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${cssVar('--background-color')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'background': 'red'\n * }\n */ function cssVar(cssVariable, defaultValue) {\n    if (!cssVariable || !cssVariable.match(cssVariableRegex)) {\n        throw new PolishedError(73);\n    }\n    var variableValue;\n    /* eslint-disable */ /* istanbul ignore next */ if (typeof document !== \"undefined\" && document.documentElement !== null) {\n        variableValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariable);\n    }\n    /* eslint-enable */ if (variableValue) {\n        return variableValue.trim();\n    } else if (defaultValue) {\n        return defaultValue;\n    }\n    throw new PolishedError(74);\n}\n// @private\nfunction capitalizeString(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nvar positionMap$1 = [\n    \"Top\",\n    \"Right\",\n    \"Bottom\",\n    \"Left\"\n];\nfunction generateProperty(property, position) {\n    if (!property) return position.toLowerCase();\n    var splitProperty = property.split(\"-\");\n    if (splitProperty.length > 1) {\n        splitProperty.splice(1, 0, position);\n        return splitProperty.reduce(function(acc, val) {\n            return \"\" + acc + capitalizeString(val);\n        });\n    }\n    var joinedProperty = property.replace(/([a-z])([A-Z])/g, \"$1\" + position + \"$2\");\n    return property === joinedProperty ? \"\" + property + position : joinedProperty;\n}\nfunction generateStyles(property, valuesWithDefaults) {\n    var styles = {};\n    for(var i = 0; i < valuesWithDefaults.length; i += 1){\n        if (valuesWithDefaults[i] || valuesWithDefaults[i] === 0) {\n            styles[generateProperty(property, positionMap$1[i])] = valuesWithDefaults[i];\n        }\n    }\n    return styles;\n}\n/**\n * Enables shorthand for direction-based properties. It accepts a property (hyphenated or camelCased) and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can also optionally pass a null argument for a directional value to ignore it.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...directionalProperty('padding', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${directionalProperty('padding', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */ function directionalProperty(property) {\n    for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        values[_key - 1] = arguments[_key];\n    }\n    //  prettier-ignore\n    var firstValue = values[0], _values$ = values[1], secondValue = _values$ === void 0 ? firstValue : _values$, _values$2 = values[2], thirdValue = _values$2 === void 0 ? firstValue : _values$2, _values$3 = values[3], fourthValue = _values$3 === void 0 ? secondValue : _values$3;\n    var valuesWithDefaults = [\n        firstValue,\n        secondValue,\n        thirdValue,\n        fourthValue\n    ];\n    return generateStyles(property, valuesWithDefaults);\n}\n/**\n * Check if a string ends with something\n * @private\n */ function endsWith(string, suffix) {\n    return string.substr(-suffix.length) === suffix;\n}\nvar cssRegex$1 = /^([+-]?(?:\\d+|\\d*\\.\\d+))([a-z]*|%)$/;\n/**\n * Returns a given CSS value minus its unit of measure.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': stripUnit('100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${stripUnit('100px')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100\n * }\n */ function stripUnit(value) {\n    if (typeof value !== \"string\") return value;\n    var matchedValue = value.match(cssRegex$1);\n    return matchedValue ? parseFloat(value) : value;\n}\n/**\n * Factory function that creates pixel-to-x converters\n * @private\n */ var pxtoFactory = function pxtoFactory(to) {\n    return function(pxval, base) {\n        if (base === void 0) {\n            base = \"16px\";\n        }\n        var newPxval = pxval;\n        var newBase = base;\n        if (typeof pxval === \"string\") {\n            if (!endsWith(pxval, \"px\")) {\n                throw new PolishedError(69, to, pxval);\n            }\n            newPxval = stripUnit(pxval);\n        }\n        if (typeof base === \"string\") {\n            if (!endsWith(base, \"px\")) {\n                throw new PolishedError(70, to, base);\n            }\n            newBase = stripUnit(base);\n        }\n        if (typeof newPxval === \"string\") {\n            throw new PolishedError(71, pxval, to);\n        }\n        if (typeof newBase === \"string\") {\n            throw new PolishedError(72, base, to);\n        }\n        return \"\" + newPxval / newBase + to;\n    };\n};\nvar pixelsto = pxtoFactory;\n/**\n * Convert pixel value to ems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': em('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${em('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1em'\n * }\n */ var em = pixelsto(\"em\");\nvar em$1 = em;\nvar cssRegex = /^([+-]?(?:\\d+|\\d*\\.\\d+))([a-z]*|%)$/;\n/**\n * Returns a given CSS value and its unit as elements of an array.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   '--dimension': getValueAndUnit('100px')[0],\n *   '--unit': getValueAndUnit('100px')[1],\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   --dimension: ${getValueAndUnit('100px')[0]};\n *   --unit: ${getValueAndUnit('100px')[1]};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   '--dimension': 100,\n *   '--unit': 'px',\n * }\n */ function getValueAndUnit(value) {\n    if (typeof value !== \"string\") return [\n        value,\n        \"\"\n    ];\n    var matchedValue = value.match(cssRegex);\n    if (matchedValue) return [\n        parseFloat(value),\n        matchedValue[2]\n    ];\n    return [\n        value,\n        undefined\n    ];\n}\n/**\n * Helper for targeting rules in a style block generated by polished modules that need !important-level specificity. Can optionally specify a rule (or rules) to target specific rules.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...important(cover())\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${important(cover())}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'position': 'absolute !important',\n *   'top': '0 !important',\n *   'right: '0 !important',\n *   'bottom': '0 !important',\n *   'left: '0 !important'\n * }\n */ function important(styleBlock, rules) {\n    if (typeof styleBlock !== \"object\" || styleBlock === null) {\n        throw new PolishedError(75, typeof styleBlock);\n    }\n    var newStyleBlock = {};\n    Object.keys(styleBlock).forEach(function(key) {\n        if (typeof styleBlock[key] === \"object\" && styleBlock[key] !== null) {\n            newStyleBlock[key] = important(styleBlock[key], rules);\n        } else if (!rules || rules && (rules === key || rules.indexOf(key) >= 0)) {\n            newStyleBlock[key] = styleBlock[key] + \" !important\";\n        } else {\n            newStyleBlock[key] = styleBlock[key];\n        }\n    });\n    return newStyleBlock;\n}\nvar ratioNames = {\n    minorSecond: 1.067,\n    majorSecond: 1.125,\n    minorThird: 1.2,\n    majorThird: 1.25,\n    perfectFourth: 1.333,\n    augFourth: 1.414,\n    perfectFifth: 1.5,\n    minorSixth: 1.6,\n    goldenSection: 1.618,\n    majorSixth: 1.667,\n    minorSeventh: 1.778,\n    majorSeventh: 1.875,\n    octave: 2,\n    majorTenth: 2.5,\n    majorEleventh: 2.667,\n    majorTwelfth: 3,\n    doubleOctave: 4\n};\nfunction getRatio(ratioName) {\n    return ratioNames[ratioName];\n}\n/**\n * Establish consistent measurements and spacial relationships throughout your projects by incrementing an em or rem value up or down a defined scale. We provide a list of commonly used scales as pre-defined variables.\n * @example\n * // Styles as object usage\n * const styles = {\n *    // Increment two steps up the default scale\n *   'fontSize': modularScale(2)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *    // Increment two steps up the default scale\n *   fontSize: ${modularScale(2)}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'fontSize': '1.77689em'\n * }\n */ function modularScale(steps, base, ratio) {\n    if (base === void 0) {\n        base = \"1em\";\n    }\n    if (ratio === void 0) {\n        ratio = 1.333;\n    }\n    if (typeof steps !== \"number\") {\n        throw new PolishedError(42);\n    }\n    if (typeof ratio === \"string\" && !ratioNames[ratio]) {\n        throw new PolishedError(43);\n    }\n    var _ref = typeof base === \"string\" ? getValueAndUnit(base) : [\n        base,\n        \"\"\n    ], realBase = _ref[0], unit = _ref[1];\n    var realRatio = typeof ratio === \"string\" ? getRatio(ratio) : ratio;\n    if (typeof realBase === \"string\") {\n        throw new PolishedError(44, base);\n    }\n    return \"\" + realBase * Math.pow(realRatio, steps) + (unit || \"\");\n}\n/**\n * Convert pixel value to rems. The default base value is 16px, but can be changed by passing a\n * second argument to the function.\n * @function\n * @param {string|number} pxval\n * @param {string|number} [base='16px']\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': rem('16px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${rem('16px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '1rem'\n * }\n */ var rem = pixelsto(\"rem\");\nvar rem$1 = rem;\nvar defaultFontSize = 16;\nfunction convertBase(base) {\n    var deconstructedValue = getValueAndUnit(base);\n    if (deconstructedValue[1] === \"px\") {\n        return parseFloat(base);\n    }\n    if (deconstructedValue[1] === \"%\") {\n        return parseFloat(base) / 100 * defaultFontSize;\n    }\n    throw new PolishedError(78, deconstructedValue[1]);\n}\nfunction getBaseFromDoc() {\n    /* eslint-disable */ /* istanbul ignore next */ if (typeof document !== \"undefined\" && document.documentElement !== null) {\n        var rootFontSize = getComputedStyle(document.documentElement).fontSize;\n        return rootFontSize ? convertBase(rootFontSize) : defaultFontSize;\n    }\n    /* eslint-enable */ /* istanbul ignore next */ return defaultFontSize;\n}\n/**\n * Convert rem values to px. By default, the base value is pulled from the font-size property on the root element (if it is set in % or px). It defaults to 16px if not found on the root. You can also override the base value by providing your own base in % or px.\n * @example\n * // Styles as object usage\n * const styles = {\n *   'height': remToPx('1.6rem')\n *   'height': remToPx('1.6rem', '10px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   height: ${remToPx('1.6rem')}\n *   height: ${remToPx('1.6rem', '10px')}\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   'height': '25.6px',\n *   'height': '16px',\n * }\n */ function remToPx(value, base) {\n    var deconstructedValue = getValueAndUnit(value);\n    if (deconstructedValue[1] !== \"rem\" && deconstructedValue[1] !== \"\") {\n        throw new PolishedError(77, deconstructedValue[1]);\n    }\n    var newBase = base ? convertBase(base) : getBaseFromDoc();\n    return deconstructedValue[0] * newBase + \"px\";\n}\nvar functionsMap$3 = {\n    back: \"cubic-bezier(0.600, -0.280, 0.735, 0.045)\",\n    circ: \"cubic-bezier(0.600,  0.040, 0.980, 0.335)\",\n    cubic: \"cubic-bezier(0.550,  0.055, 0.675, 0.190)\",\n    expo: \"cubic-bezier(0.950,  0.050, 0.795, 0.035)\",\n    quad: \"cubic-bezier(0.550,  0.085, 0.680, 0.530)\",\n    quart: \"cubic-bezier(0.895,  0.030, 0.685, 0.220)\",\n    quint: \"cubic-bezier(0.755,  0.050, 0.855, 0.060)\",\n    sine: \"cubic-bezier(0.470,  0.000, 0.745, 0.715)\"\n};\n/**\n * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transitionTimingFunction': easeIn('quad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transitionTimingFunction: ${easeIn('quad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n * }\n */ function easeIn(functionName) {\n    return functionsMap$3[functionName.toLowerCase().trim()];\n}\nvar functionsMap$2 = {\n    back: \"cubic-bezier(0.680, -0.550, 0.265, 1.550)\",\n    circ: \"cubic-bezier(0.785,  0.135, 0.150, 0.860)\",\n    cubic: \"cubic-bezier(0.645,  0.045, 0.355, 1.000)\",\n    expo: \"cubic-bezier(1.000,  0.000, 0.000, 1.000)\",\n    quad: \"cubic-bezier(0.455,  0.030, 0.515, 0.955)\",\n    quart: \"cubic-bezier(0.770,  0.000, 0.175, 1.000)\",\n    quint: \"cubic-bezier(0.860,  0.000, 0.070, 1.000)\",\n    sine: \"cubic-bezier(0.445,  0.050, 0.550, 0.950)\"\n};\n/**\n * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transitionTimingFunction': easeInOut('quad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transitionTimingFunction: ${easeInOut('quad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transitionTimingFunction': 'cubic-bezier(0.455,  0.030, 0.515, 0.955)',\n * }\n */ function easeInOut(functionName) {\n    return functionsMap$2[functionName.toLowerCase().trim()];\n}\nvar functionsMap$1 = {\n    back: \"cubic-bezier(0.175,  0.885, 0.320, 1.275)\",\n    cubic: \"cubic-bezier(0.215,  0.610, 0.355, 1.000)\",\n    circ: \"cubic-bezier(0.075,  0.820, 0.165, 1.000)\",\n    expo: \"cubic-bezier(0.190,  1.000, 0.220, 1.000)\",\n    quad: \"cubic-bezier(0.250,  0.460, 0.450, 0.940)\",\n    quart: \"cubic-bezier(0.165,  0.840, 0.440, 1.000)\",\n    quint: \"cubic-bezier(0.230,  1.000, 0.320, 1.000)\",\n    sine: \"cubic-bezier(0.390,  0.575, 0.565, 1.000)\"\n};\n/**\n * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transitionTimingFunction': easeOut('quad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transitionTimingFunction: ${easeOut('quad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transitionTimingFunction': 'cubic-bezier(0.250,  0.460, 0.450, 0.940)',\n * }\n */ function easeOut(functionName) {\n    return functionsMap$1[functionName.toLowerCase().trim()];\n}\n/**\n * Returns a CSS calc formula for linear interpolation of a property between two values. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px').\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   fontSize: between('20px', '100px', '400px', '1000px'),\n *   fontSize: between('20px', '100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   fontSize: ${between('20px', '100px', '400px', '1000px')};\n *   fontSize: ${between('20px', '100px')}\n * `\n *\n * // CSS as JS Output\n *\n * h1: {\n *   'fontSize': 'calc(-33.33333333333334px + 13.333333333333334vw)',\n *   'fontSize': 'calc(-9.090909090909093px + 9.090909090909092vw)'\n * }\n */ function between(fromSize, toSize, minScreen, maxScreen) {\n    if (minScreen === void 0) {\n        minScreen = \"320px\";\n    }\n    if (maxScreen === void 0) {\n        maxScreen = \"1200px\";\n    }\n    var _getValueAndUnit = getValueAndUnit(fromSize), unitlessFromSize = _getValueAndUnit[0], fromSizeUnit = _getValueAndUnit[1];\n    var _getValueAndUnit2 = getValueAndUnit(toSize), unitlessToSize = _getValueAndUnit2[0], toSizeUnit = _getValueAndUnit2[1];\n    var _getValueAndUnit3 = getValueAndUnit(minScreen), unitlessMinScreen = _getValueAndUnit3[0], minScreenUnit = _getValueAndUnit3[1];\n    var _getValueAndUnit4 = getValueAndUnit(maxScreen), unitlessMaxScreen = _getValueAndUnit4[0], maxScreenUnit = _getValueAndUnit4[1];\n    if (typeof unitlessMinScreen !== \"number\" || typeof unitlessMaxScreen !== \"number\" || !minScreenUnit || !maxScreenUnit || minScreenUnit !== maxScreenUnit) {\n        throw new PolishedError(47);\n    }\n    if (typeof unitlessFromSize !== \"number\" || typeof unitlessToSize !== \"number\" || fromSizeUnit !== toSizeUnit) {\n        throw new PolishedError(48);\n    }\n    if (fromSizeUnit !== minScreenUnit || toSizeUnit !== maxScreenUnit) {\n        throw new PolishedError(76);\n    }\n    var slope = (unitlessFromSize - unitlessToSize) / (unitlessMinScreen - unitlessMaxScreen);\n    var base = unitlessToSize - slope * unitlessMaxScreen;\n    return \"calc(\" + base.toFixed(2) + (fromSizeUnit || \"\") + \" + \" + (100 * slope).toFixed(2) + \"vw)\";\n}\n/**\n * CSS to contain a float (credit to CSSMojo).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...clearFix(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${clearFix()}\n * `\n *\n * // CSS as JS Output\n *\n * '&::after': {\n *   'clear': 'both',\n *   'content': '\"\"',\n *   'display': 'table'\n * }\n */ function clearFix(parent) {\n    var _ref;\n    if (parent === void 0) {\n        parent = \"&\";\n    }\n    var pseudoSelector = parent + \"::after\";\n    return _ref = {}, _ref[pseudoSelector] = {\n        clear: \"both\",\n        content: '\"\"',\n        display: \"table\"\n    }, _ref;\n}\n/**\n * CSS to fully cover an area. Can optionally be passed an offset to act as a \"padding\".\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...cover()\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${cover()}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'position': 'absolute',\n *   'top': '0',\n *   'right: '0',\n *   'bottom': '0',\n *   'left: '0'\n * }\n */ function cover(offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    return {\n        position: \"absolute\",\n        top: offset,\n        right: offset,\n        bottom: offset,\n        left: offset\n    };\n}\n/**\n * CSS to represent truncated text with an ellipsis. You can optionally pass a max-width and number of lines before truncating.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...ellipsis('250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${ellipsis('250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'display': 'inline-block',\n *   'maxWidth': '250px',\n *   'overflow': 'hidden',\n *   'textOverflow': 'ellipsis',\n *   'whiteSpace': 'nowrap',\n *   'wordWrap': 'normal'\n * }\n */ function ellipsis(width, lines) {\n    if (lines === void 0) {\n        lines = 1;\n    }\n    var styles = {\n        display: \"inline-block\",\n        maxWidth: width || \"100%\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        whiteSpace: \"nowrap\",\n        wordWrap: \"normal\"\n    };\n    return lines > 1 ? (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, styles, {\n        WebkitBoxOrient: \"vertical\",\n        WebkitLineClamp: lines,\n        display: \"-webkit-box\",\n        whiteSpace: \"normal\"\n    }) : styles;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (it) return (it = it.call(o)).next.bind(it);\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        return function() {\n            if (i >= o.length) return {\n                done: true\n            };\n            return {\n                done: false,\n                value: o[i++]\n            };\n        };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n/**\n * Returns a set of media queries that resizes a property (or set of properties) between a provided fromSize and toSize. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px') to constrain the interpolation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...fluidRange(\n *    {\n *        prop: 'padding',\n *        fromSize: '20px',\n *        toSize: '100px',\n *      },\n *      '400px',\n *      '1000px',\n *    )\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${fluidRange(\n *      {\n *        prop: 'padding',\n *        fromSize: '20px',\n *        toSize: '100px',\n *      },\n *      '400px',\n *      '1000px',\n *    )}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   \"@media (min-width: 1000px)\": Object {\n *     \"padding\": \"100px\",\n *   },\n *   \"@media (min-width: 400px)\": Object {\n *     \"padding\": \"calc(-33.33333333333334px + 13.333333333333334vw)\",\n *   },\n *   \"padding\": \"20px\",\n * }\n */ function fluidRange(cssProp, minScreen, maxScreen) {\n    if (minScreen === void 0) {\n        minScreen = \"320px\";\n    }\n    if (maxScreen === void 0) {\n        maxScreen = \"1200px\";\n    }\n    if (!Array.isArray(cssProp) && typeof cssProp !== \"object\" || cssProp === null) {\n        throw new PolishedError(49);\n    }\n    if (Array.isArray(cssProp)) {\n        var mediaQueries = {};\n        var fallbacks = {};\n        for(var _iterator = _createForOfIteratorHelperLoose(cssProp), _step; !(_step = _iterator()).done;){\n            var _extends2, _extends3;\n            var obj = _step.value;\n            if (!obj.prop || !obj.fromSize || !obj.toSize) {\n                throw new PolishedError(50);\n            }\n            fallbacks[obj.prop] = obj.fromSize;\n            mediaQueries[\"@media (min-width: \" + minScreen + \")\"] = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, mediaQueries[\"@media (min-width: \" + minScreen + \")\"], (_extends2 = {}, _extends2[obj.prop] = between(obj.fromSize, obj.toSize, minScreen, maxScreen), _extends2));\n            mediaQueries[\"@media (min-width: \" + maxScreen + \")\"] = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, mediaQueries[\"@media (min-width: \" + maxScreen + \")\"], (_extends3 = {}, _extends3[obj.prop] = obj.toSize, _extends3));\n        }\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, fallbacks, mediaQueries);\n    } else {\n        var _ref, _ref2, _ref3;\n        if (!cssProp.prop || !cssProp.fromSize || !cssProp.toSize) {\n            throw new PolishedError(51);\n        }\n        return _ref3 = {}, _ref3[cssProp.prop] = cssProp.fromSize, _ref3[\"@media (min-width: \" + minScreen + \")\"] = (_ref = {}, _ref[cssProp.prop] = between(cssProp.fromSize, cssProp.toSize, minScreen, maxScreen), _ref), _ref3[\"@media (min-width: \" + maxScreen + \")\"] = (_ref2 = {}, _ref2[cssProp.prop] = cssProp.toSize, _ref2), _ref3;\n    }\n}\nvar dataURIRegex = /^\\s*data:([a-z]+\\/[a-z-]+(;[a-z-]+=[a-z-]+)?)?(;charset=[a-z0-9-]+)?(;base64)?,[a-z0-9!$&',()*+,;=\\-._~:@/?%\\s]*\\s*$/i;\nvar formatHintMap = {\n    woff: \"woff\",\n    woff2: \"woff2\",\n    ttf: \"truetype\",\n    otf: \"opentype\",\n    eot: \"embedded-opentype\",\n    svg: \"svg\",\n    svgz: \"svg\"\n};\nfunction generateFormatHint(format, formatHint) {\n    if (!formatHint) return \"\";\n    return ' format(\"' + formatHintMap[format] + '\")';\n}\nfunction isDataURI(fontFilePath) {\n    return !!fontFilePath.replace(/\\s+/g, \" \").match(dataURIRegex);\n}\nfunction generateFileReferences(fontFilePath, fileFormats, formatHint) {\n    if (isDataURI(fontFilePath)) {\n        return 'url(\"' + fontFilePath + '\")' + generateFormatHint(fileFormats[0], formatHint);\n    }\n    var fileFontReferences = fileFormats.map(function(format) {\n        return 'url(\"' + fontFilePath + \".\" + format + '\")' + generateFormatHint(format, formatHint);\n    });\n    return fileFontReferences.join(\", \");\n}\nfunction generateLocalReferences(localFonts) {\n    var localFontReferences = localFonts.map(function(font) {\n        return 'local(\"' + font + '\")';\n    });\n    return localFontReferences.join(\", \");\n}\nfunction generateSources(fontFilePath, localFonts, fileFormats, formatHint) {\n    var fontReferences = [];\n    if (localFonts) fontReferences.push(generateLocalReferences(localFonts));\n    if (fontFilePath) {\n        fontReferences.push(generateFileReferences(fontFilePath, fileFormats, formatHint));\n    }\n    return fontReferences.join(\", \");\n}\n/**\n * CSS for a @font-face declaration. Defaults to check for local copies of the font on the user's machine. You can disable this by passing `null` to localFonts.\n *\n * @example\n * // Styles as object basic usage\n * const styles = {\n *    ...fontFace({\n *      'fontFamily': 'Sans-Pro',\n *      'fontFilePath': 'path/to/file'\n *    })\n * }\n *\n * // styled-components basic usage\n * const GlobalStyle = createGlobalStyle`${\n *   fontFace({\n *     'fontFamily': 'Sans-Pro',\n *     'fontFilePath': 'path/to/file'\n *   }\n * )}`\n *\n * // CSS as JS Output\n *\n * '@font-face': {\n *   'fontFamily': 'Sans-Pro',\n *   'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n * }\n */ function fontFace(_ref) {\n    var fontFamily = _ref.fontFamily, fontFilePath = _ref.fontFilePath, fontStretch = _ref.fontStretch, fontStyle = _ref.fontStyle, fontVariant = _ref.fontVariant, fontWeight = _ref.fontWeight, _ref$fileFormats = _ref.fileFormats, fileFormats = _ref$fileFormats === void 0 ? [\n        \"eot\",\n        \"woff2\",\n        \"woff\",\n        \"ttf\",\n        \"svg\"\n    ] : _ref$fileFormats, _ref$formatHint = _ref.formatHint, formatHint = _ref$formatHint === void 0 ? false : _ref$formatHint, _ref$localFonts = _ref.localFonts, localFonts = _ref$localFonts === void 0 ? [\n        fontFamily\n    ] : _ref$localFonts, unicodeRange = _ref.unicodeRange, fontDisplay = _ref.fontDisplay, fontVariationSettings = _ref.fontVariationSettings, fontFeatureSettings = _ref.fontFeatureSettings;\n    // Error Handling\n    if (!fontFamily) throw new PolishedError(55);\n    if (!fontFilePath && !localFonts) {\n        throw new PolishedError(52);\n    }\n    if (localFonts && !Array.isArray(localFonts)) {\n        throw new PolishedError(53);\n    }\n    if (!Array.isArray(fileFormats)) {\n        throw new PolishedError(54);\n    }\n    var fontFaceDeclaration = {\n        \"@font-face\": {\n            fontFamily: fontFamily,\n            src: generateSources(fontFilePath, localFonts, fileFormats, formatHint),\n            unicodeRange: unicodeRange,\n            fontStretch: fontStretch,\n            fontStyle: fontStyle,\n            fontVariant: fontVariant,\n            fontWeight: fontWeight,\n            fontDisplay: fontDisplay,\n            fontVariationSettings: fontVariationSettings,\n            fontFeatureSettings: fontFeatureSettings\n        }\n    };\n    // Removes undefined fields for cleaner css object.\n    return JSON.parse(JSON.stringify(fontFaceDeclaration));\n}\n/**\n * CSS to hide text to show a background image in a SEO-friendly way.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'backgroundImage': 'url(logo.png)',\n *   ...hideText(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   backgroundImage: url(logo.png);\n *   ${hideText()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'backgroundImage': 'url(logo.png)',\n *   'textIndent': '101%',\n *   'overflow': 'hidden',\n *   'whiteSpace': 'nowrap',\n * }\n */ function hideText() {\n    return {\n        textIndent: \"101%\",\n        overflow: \"hidden\",\n        whiteSpace: \"nowrap\"\n    };\n}\n/**\n * CSS to hide content visually but remain accessible to screen readers.\n * from [HTML5 Boilerplate](https://github.com/h5bp/html5-boilerplate/blob/9a176f57af1cfe8ec70300da4621fb9b07e5fa31/src/css/main.css#L121)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...hideVisually(),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hideVisually()};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'border': '0',\n *   'clip': 'rect(0 0 0 0)',\n *   'height': '1px',\n *   'margin': '-1px',\n *   'overflow': 'hidden',\n *   'padding': '0',\n *   'position': 'absolute',\n *   'whiteSpace': 'nowrap',\n *   'width': '1px',\n * }\n */ function hideVisually() {\n    return {\n        border: \"0\",\n        clip: \"rect(0 0 0 0)\",\n        height: \"1px\",\n        margin: \"-1px\",\n        overflow: \"hidden\",\n        padding: \"0\",\n        position: \"absolute\",\n        whiteSpace: \"nowrap\",\n        width: \"1px\"\n    };\n}\n/**\n * Generates a media query to target HiDPI devices.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  [hiDPI(1.5)]: {\n *    width: 200px;\n *  }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${hiDPI(1.5)} {\n *     width: 200px;\n *   }\n * `\n *\n * // CSS as JS Output\n *\n * '@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n *  only screen and (min--moz-device-pixel-ratio: 1.5),\n *  only screen and (-o-min-device-pixel-ratio: 1.5/1),\n *  only screen and (min-resolution: 144dpi),\n *  only screen and (min-resolution: 1.5dppx)': {\n *   'width': '200px',\n * }\n */ function hiDPI(ratio) {\n    if (ratio === void 0) {\n        ratio = 1.3;\n    }\n    return \"\\n    @media only screen and (-webkit-min-device-pixel-ratio: \" + ratio + \"),\\n    only screen and (min--moz-device-pixel-ratio: \" + ratio + \"),\\n    only screen and (-o-min-device-pixel-ratio: \" + ratio + \"/1),\\n    only screen and (min-resolution: \" + Math.round(ratio * 96) + \"dpi),\\n    only screen and (min-resolution: \" + ratio + \"dppx)\\n  \";\n}\nfunction constructGradientValue(literals) {\n    var template = \"\";\n    for(var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        substitutions[_key - 1] = arguments[_key];\n    }\n    for(var i = 0; i < literals.length; i += 1){\n        template += literals[i];\n        if (i === substitutions.length - 1 && substitutions[i]) {\n            var definedValues = substitutions.filter(function(substitute) {\n                return !!substitute;\n            });\n            // Adds leading coma if properties preceed color-stops\n            if (definedValues.length > 1) {\n                template = template.slice(0, -1);\n                template += \", \" + substitutions[i];\n            // No trailing space if color-stops is the only param provided\n            } else if (definedValues.length === 1) {\n                template += \"\" + substitutions[i];\n            }\n        } else if (substitutions[i]) {\n            template += substitutions[i] + \" \";\n        }\n    }\n    return template.trim();\n}\nvar _templateObject$1;\n/**\n * CSS for declaring a linear gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...linearGradient({\n        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n        toDirection: 'to top right',\n        fallback: '#FFF',\n      })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${linearGradient({\n        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n        toDirection: 'to top right',\n        fallback: '#FFF',\n      })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'backgroundColor': '#FFF',\n *   'backgroundImage': 'linear-gradient(to top right, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */ function linearGradient(_ref) {\n    var colorStops = _ref.colorStops, fallback = _ref.fallback, _ref$toDirection = _ref.toDirection, toDirection = _ref$toDirection === void 0 ? \"\" : _ref$toDirection;\n    if (!colorStops || colorStops.length < 2) {\n        throw new PolishedError(56);\n    }\n    return {\n        backgroundColor: fallback || colorStops[0].replace(/,\\s+/g, \",\").split(\" \")[0].replace(/,(?=\\S)/g, \", \"),\n        backgroundImage: constructGradientValue(_templateObject$1 || (_templateObject$1 = (0,_babel_runtime_helpers_esm_taggedTemplateLiteralLoose__WEBPACK_IMPORTED_MODULE_4__[\"default\"])([\n            \"linear-gradient(\",\n            \"\",\n            \")\"\n        ])), toDirection, colorStops.join(\", \").replace(/,(?=\\S)/g, \", \"))\n    };\n}\n/**\n * CSS to normalize abnormalities across browsers (normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css)\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *    ...normalize(),\n * }\n *\n * // styled-components usage\n * const GlobalStyle = createGlobalStyle`${normalize()}`\n *\n * // CSS as JS Output\n *\n * html {\n *   lineHeight: 1.15,\n *   textSizeAdjust: 100%,\n * } ...\n */ function normalize() {\n    var _ref;\n    return [\n        (_ref = {\n            html: {\n                lineHeight: \"1.15\",\n                textSizeAdjust: \"100%\"\n            },\n            body: {\n                margin: \"0\"\n            },\n            main: {\n                display: \"block\"\n            },\n            h1: {\n                fontSize: \"2em\",\n                margin: \"0.67em 0\"\n            },\n            hr: {\n                boxSizing: \"content-box\",\n                height: \"0\",\n                overflow: \"visible\"\n            },\n            pre: {\n                fontFamily: \"monospace, monospace\",\n                fontSize: \"1em\"\n            },\n            a: {\n                backgroundColor: \"transparent\"\n            },\n            \"abbr[title]\": {\n                borderBottom: \"none\",\n                textDecoration: \"underline\"\n            }\n        }, _ref[\"b,\\n    strong\"] = {\n            fontWeight: \"bolder\"\n        }, _ref[\"code,\\n    kbd,\\n    samp\"] = {\n            fontFamily: \"monospace, monospace\",\n            fontSize: \"1em\"\n        }, _ref.small = {\n            fontSize: \"80%\"\n        }, _ref[\"sub,\\n    sup\"] = {\n            fontSize: \"75%\",\n            lineHeight: \"0\",\n            position: \"relative\",\n            verticalAlign: \"baseline\"\n        }, _ref.sub = {\n            bottom: \"-0.25em\"\n        }, _ref.sup = {\n            top: \"-0.5em\"\n        }, _ref.img = {\n            borderStyle: \"none\"\n        }, _ref[\"button,\\n    input,\\n    optgroup,\\n    select,\\n    textarea\"] = {\n            fontFamily: \"inherit\",\n            fontSize: \"100%\",\n            lineHeight: \"1.15\",\n            margin: \"0\"\n        }, _ref[\"button,\\n    input\"] = {\n            overflow: \"visible\"\n        }, _ref[\"button,\\n    select\"] = {\n            textTransform: \"none\"\n        }, _ref['button,\\n    html [type=\"button\"],\\n    [type=\"reset\"],\\n    [type=\"submit\"]'] = {\n            WebkitAppearance: \"button\"\n        }, _ref['button::-moz-focus-inner,\\n    [type=\"button\"]::-moz-focus-inner,\\n    [type=\"reset\"]::-moz-focus-inner,\\n    [type=\"submit\"]::-moz-focus-inner'] = {\n            borderStyle: \"none\",\n            padding: \"0\"\n        }, _ref['button:-moz-focusring,\\n    [type=\"button\"]:-moz-focusring,\\n    [type=\"reset\"]:-moz-focusring,\\n    [type=\"submit\"]:-moz-focusring'] = {\n            outline: \"1px dotted ButtonText\"\n        }, _ref.fieldset = {\n            padding: \"0.35em 0.625em 0.75em\"\n        }, _ref.legend = {\n            boxSizing: \"border-box\",\n            color: \"inherit\",\n            display: \"table\",\n            maxWidth: \"100%\",\n            padding: \"0\",\n            whiteSpace: \"normal\"\n        }, _ref.progress = {\n            verticalAlign: \"baseline\"\n        }, _ref.textarea = {\n            overflow: \"auto\"\n        }, _ref['[type=\"checkbox\"],\\n    [type=\"radio\"]'] = {\n            boxSizing: \"border-box\",\n            padding: \"0\"\n        }, _ref['[type=\"number\"]::-webkit-inner-spin-button,\\n    [type=\"number\"]::-webkit-outer-spin-button'] = {\n            height: \"auto\"\n        }, _ref['[type=\"search\"]'] = {\n            WebkitAppearance: \"textfield\",\n            outlineOffset: \"-2px\"\n        }, _ref['[type=\"search\"]::-webkit-search-decoration'] = {\n            WebkitAppearance: \"none\"\n        }, _ref[\"::-webkit-file-upload-button\"] = {\n            WebkitAppearance: \"button\",\n            font: \"inherit\"\n        }, _ref.details = {\n            display: \"block\"\n        }, _ref.summary = {\n            display: \"list-item\"\n        }, _ref.template = {\n            display: \"none\"\n        }, _ref[\"[hidden]\"] = {\n            display: \"none\"\n        }, _ref),\n        {\n            \"abbr[title]\": {\n                textDecoration: \"underline dotted\"\n            }\n        }\n    ];\n}\nvar _templateObject;\n/**\n * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${radialGradient({\n *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],\n *     extent: 'farthest-corner at 45px 45px',\n *     position: 'center',\n *     shape: 'ellipse',\n *   })}\n *`\n *\n * // CSS as JS Output\n *\n * div: {\n *   'backgroundColor': '#00FFFF',\n *   'backgroundImage': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',\n * }\n */ function radialGradient(_ref) {\n    var colorStops = _ref.colorStops, _ref$extent = _ref.extent, extent = _ref$extent === void 0 ? \"\" : _ref$extent, fallback = _ref.fallback, _ref$position = _ref.position, position = _ref$position === void 0 ? \"\" : _ref$position, _ref$shape = _ref.shape, shape = _ref$shape === void 0 ? \"\" : _ref$shape;\n    if (!colorStops || colorStops.length < 2) {\n        throw new PolishedError(57);\n    }\n    return {\n        backgroundColor: fallback || colorStops[0].split(\" \")[0],\n        backgroundImage: constructGradientValue(_templateObject || (_templateObject = (0,_babel_runtime_helpers_esm_taggedTemplateLiteralLoose__WEBPACK_IMPORTED_MODULE_4__[\"default\"])([\n            \"radial-gradient(\",\n            \"\",\n            \"\",\n            \"\",\n            \")\"\n        ])), position, shape, extent, colorStops.join(\", \"))\n    };\n}\n/**\n * A helper to generate a retina background image and non-retina\n * background image. The retina background image will output to a HiDPI media query. The mixin uses\n * a _2x.png filename suffix by default.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *  ...retinaImage('my-img')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${retinaImage('my-img')}\n * `\n *\n * // CSS as JS Output\n * div {\n *   backgroundImage: 'url(my-img.png)',\n *   '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),\n *    only screen and (min--moz-device-pixel-ratio: 1.3),\n *    only screen and (-o-min-device-pixel-ratio: 1.3/1),\n *    only screen and (min-resolution: 144dpi),\n *    only screen and (min-resolution: 1.5dppx)': {\n *     backgroundImage: 'url(my-img_2x.png)',\n *   }\n * }\n */ function retinaImage(filename, backgroundSize, extension, retinaFilename, retinaSuffix) {\n    var _ref;\n    if (extension === void 0) {\n        extension = \"png\";\n    }\n    if (retinaSuffix === void 0) {\n        retinaSuffix = \"_2x\";\n    }\n    if (!filename) {\n        throw new PolishedError(58);\n    }\n    // Replace the dot at the beginning of the passed extension if one exists\n    var ext = extension.replace(/^\\./, \"\");\n    var rFilename = retinaFilename ? retinaFilename + \".\" + ext : \"\" + filename + retinaSuffix + \".\" + ext;\n    return _ref = {\n        backgroundImage: \"url(\" + filename + \".\" + ext + \")\"\n    }, _ref[hiDPI()] = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        backgroundImage: \"url(\" + rFilename + \")\"\n    }, backgroundSize ? {\n        backgroundSize: backgroundSize\n    } : {}), _ref;\n}\n/* eslint-disable key-spacing */ var functionsMap = {\n    easeInBack: \"cubic-bezier(0.600, -0.280, 0.735, 0.045)\",\n    easeInCirc: \"cubic-bezier(0.600,  0.040, 0.980, 0.335)\",\n    easeInCubic: \"cubic-bezier(0.550,  0.055, 0.675, 0.190)\",\n    easeInExpo: \"cubic-bezier(0.950,  0.050, 0.795, 0.035)\",\n    easeInQuad: \"cubic-bezier(0.550,  0.085, 0.680, 0.530)\",\n    easeInQuart: \"cubic-bezier(0.895,  0.030, 0.685, 0.220)\",\n    easeInQuint: \"cubic-bezier(0.755,  0.050, 0.855, 0.060)\",\n    easeInSine: \"cubic-bezier(0.470,  0.000, 0.745, 0.715)\",\n    easeOutBack: \"cubic-bezier(0.175,  0.885, 0.320, 1.275)\",\n    easeOutCubic: \"cubic-bezier(0.215,  0.610, 0.355, 1.000)\",\n    easeOutCirc: \"cubic-bezier(0.075,  0.820, 0.165, 1.000)\",\n    easeOutExpo: \"cubic-bezier(0.190,  1.000, 0.220, 1.000)\",\n    easeOutQuad: \"cubic-bezier(0.250,  0.460, 0.450, 0.940)\",\n    easeOutQuart: \"cubic-bezier(0.165,  0.840, 0.440, 1.000)\",\n    easeOutQuint: \"cubic-bezier(0.230,  1.000, 0.320, 1.000)\",\n    easeOutSine: \"cubic-bezier(0.390,  0.575, 0.565, 1.000)\",\n    easeInOutBack: \"cubic-bezier(0.680, -0.550, 0.265, 1.550)\",\n    easeInOutCirc: \"cubic-bezier(0.785,  0.135, 0.150, 0.860)\",\n    easeInOutCubic: \"cubic-bezier(0.645,  0.045, 0.355, 1.000)\",\n    easeInOutExpo: \"cubic-bezier(1.000,  0.000, 0.000, 1.000)\",\n    easeInOutQuad: \"cubic-bezier(0.455,  0.030, 0.515, 0.955)\",\n    easeInOutQuart: \"cubic-bezier(0.770,  0.000, 0.175, 1.000)\",\n    easeInOutQuint: \"cubic-bezier(0.860,  0.000, 0.070, 1.000)\",\n    easeInOutSine: \"cubic-bezier(0.445,  0.050, 0.550, 0.950)\"\n};\n/* eslint-enable key-spacing */ function getTimingFunction(functionName) {\n    return functionsMap[functionName];\n}\n/**\n * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).\n *\n * @deprecated - This will be deprecated in v5 in favor of `easeIn`, `easeOut`, `easeInOut`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   'transitionTimingFunction': timingFunctions('easeInQuad')\n * }\n *\n * // styled-components usage\n *  const div = styled.div`\n *   transitionTimingFunction: ${timingFunctions('easeInQuad')};\n * `\n *\n * // CSS as JS Output\n *\n * 'div': {\n *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',\n * }\n */ function timingFunctions(timingFunction) {\n    return getTimingFunction(timingFunction);\n}\nvar getBorderWidth = function getBorderWidth(pointingDirection, height, width) {\n    var fullWidth = \"\" + width[0] + (width[1] || \"\");\n    var halfWidth = \"\" + width[0] / 2 + (width[1] || \"\");\n    var fullHeight = \"\" + height[0] + (height[1] || \"\");\n    var halfHeight = \"\" + height[0] / 2 + (height[1] || \"\");\n    switch(pointingDirection){\n        case \"top\":\n            return \"0 \" + halfWidth + \" \" + fullHeight + \" \" + halfWidth;\n        case \"topLeft\":\n            return fullWidth + \" \" + fullHeight + \" 0 0\";\n        case \"left\":\n            return halfHeight + \" \" + fullWidth + \" \" + halfHeight + \" 0\";\n        case \"bottomLeft\":\n            return fullWidth + \" 0 0 \" + fullHeight;\n        case \"bottom\":\n            return fullHeight + \" \" + halfWidth + \" 0 \" + halfWidth;\n        case \"bottomRight\":\n            return \"0 0 \" + fullWidth + \" \" + fullHeight;\n        case \"right\":\n            return halfHeight + \" 0 \" + halfHeight + \" \" + fullWidth;\n        case \"topRight\":\n        default:\n            return \"0 \" + fullWidth + \" \" + fullHeight + \" 0\";\n    }\n};\nvar getBorderColor = function getBorderColor(pointingDirection, foregroundColor) {\n    switch(pointingDirection){\n        case \"top\":\n        case \"bottomRight\":\n            return {\n                borderBottomColor: foregroundColor\n            };\n        case \"right\":\n        case \"bottomLeft\":\n            return {\n                borderLeftColor: foregroundColor\n            };\n        case \"bottom\":\n        case \"topLeft\":\n            return {\n                borderTopColor: foregroundColor\n            };\n        case \"left\":\n        case \"topRight\":\n            return {\n                borderRightColor: foregroundColor\n            };\n        default:\n            throw new PolishedError(59);\n    }\n};\n/**\n * CSS to represent triangle with any pointing direction with an optional background color.\n *\n * @example\n * // Styles as object usage\n *\n * const styles = {\n *   ...triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })\n * }\n *\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })}\n *\n *\n * // CSS as JS Output\n *\n * div: {\n *  'borderColor': 'transparent transparent transparent red',\n *  'borderStyle': 'solid',\n *  'borderWidth': '50px 0 50px 100px',\n *  'height': '0',\n *  'width': '0',\n * }\n */ function triangle(_ref) {\n    var pointingDirection = _ref.pointingDirection, height = _ref.height, width = _ref.width, foregroundColor = _ref.foregroundColor, _ref$backgroundColor = _ref.backgroundColor, backgroundColor = _ref$backgroundColor === void 0 ? \"transparent\" : _ref$backgroundColor;\n    var widthAndUnit = getValueAndUnit(width);\n    var heightAndUnit = getValueAndUnit(height);\n    if (isNaN(heightAndUnit[0]) || isNaN(widthAndUnit[0])) {\n        throw new PolishedError(60);\n    }\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        width: \"0\",\n        height: \"0\",\n        borderColor: backgroundColor\n    }, getBorderColor(pointingDirection, foregroundColor), {\n        borderStyle: \"solid\",\n        borderWidth: getBorderWidth(pointingDirection, heightAndUnit, widthAndUnit)\n    });\n}\n/**\n * Provides an easy way to change the `wordWrap` property.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...wordWrap('break-word')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${wordWrap('break-word')}\n * `\n *\n * // CSS as JS Output\n *\n * const styles = {\n *   overflowWrap: 'break-word',\n *   wordWrap: 'break-word',\n *   wordBreak: 'break-all',\n * }\n */ function wordWrap(wrap) {\n    if (wrap === void 0) {\n        wrap = \"break-word\";\n    }\n    var wordBreak = wrap === \"break-word\" ? \"break-all\" : wrap;\n    return {\n        overflowWrap: wrap,\n        wordWrap: wrap,\n        wordBreak: wordBreak\n    };\n}\nfunction colorToInt(color) {\n    return Math.round(color * 255);\n}\nfunction convertToInt(red, green, blue) {\n    return colorToInt(red) + \",\" + colorToInt(green) + \",\" + colorToInt(blue);\n}\nfunction hslToRgb(hue, saturation, lightness, convert) {\n    if (convert === void 0) {\n        convert = convertToInt;\n    }\n    if (saturation === 0) {\n        // achromatic\n        return convert(lightness, lightness, lightness);\n    }\n    // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n    var huePrime = (hue % 360 + 360) % 360 / 60;\n    var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;\n    var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n    var red = 0;\n    var green = 0;\n    var blue = 0;\n    if (huePrime >= 0 && huePrime < 1) {\n        red = chroma;\n        green = secondComponent;\n    } else if (huePrime >= 1 && huePrime < 2) {\n        red = secondComponent;\n        green = chroma;\n    } else if (huePrime >= 2 && huePrime < 3) {\n        green = chroma;\n        blue = secondComponent;\n    } else if (huePrime >= 3 && huePrime < 4) {\n        green = secondComponent;\n        blue = chroma;\n    } else if (huePrime >= 4 && huePrime < 5) {\n        red = secondComponent;\n        blue = chroma;\n    } else if (huePrime >= 5 && huePrime < 6) {\n        red = chroma;\n        blue = secondComponent;\n    }\n    var lightnessModification = lightness - chroma / 2;\n    var finalRed = red + lightnessModification;\n    var finalGreen = green + lightnessModification;\n    var finalBlue = blue + lightnessModification;\n    return convert(finalRed, finalGreen, finalBlue);\n}\nvar namedColorMap = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"00ffff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"0000ff\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"00ffff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"ff00ff\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"639\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n * @private\n */ function nameToHex(color) {\n    if (typeof color !== \"string\") return color;\n    var normalizedColorName = color.toLowerCase();\n    return namedColorMap[normalizedColorName] ? \"#\" + namedColorMap[normalizedColorName] : color;\n}\nvar hexRegex = /^#[a-fA-F0-9]{6}$/;\nvar hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;\nvar reducedHexRegex = /^#[a-fA-F0-9]{3}$/;\nvar reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;\nvar rgbRegex = /^rgb\\(\\s*(\\d{1,3})\\s*(?:,)?\\s*(\\d{1,3})\\s*(?:,)?\\s*(\\d{1,3})\\s*\\)$/i;\nvar rgbaRegex = /^rgb(?:a)?\\(\\s*(\\d{1,3})\\s*(?:,)?\\s*(\\d{1,3})\\s*(?:,)?\\s*(\\d{1,3})\\s*(?:,|\\/)\\s*([-+]?\\d*[.]?\\d+[%]?)\\s*\\)$/i;\nvar hslRegex = /^hsl\\(\\s*(\\d{0,3}[.]?[0-9]+(?:deg)?)\\s*(?:,)?\\s*(\\d{1,3}[.]?[0-9]?)%\\s*(?:,)?\\s*(\\d{1,3}[.]?[0-9]?)%\\s*\\)$/i;\nvar hslaRegex = /^hsl(?:a)?\\(\\s*(\\d{0,3}[.]?[0-9]+(?:deg)?)\\s*(?:,)?\\s*(\\d{1,3}[.]?[0-9]?)%\\s*(?:,)?\\s*(\\d{1,3}[.]?[0-9]?)%\\s*(?:,|\\/)\\s*([-+]?\\d*[.]?\\d+[%]?)\\s*\\)$/i;\n/**\n * Returns an RgbColor or RgbaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a RgbColor or RgbaColor object back to a string.\n *\n * @example\n * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1\n * const color1 = parseToRgb('rgb(255, 0, 0)');\n * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2\n * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');\n */ function parseToRgb(color) {\n    if (typeof color !== \"string\") {\n        throw new PolishedError(3);\n    }\n    var normalizedColor = nameToHex(color);\n    if (normalizedColor.match(hexRegex)) {\n        return {\n            red: parseInt(\"\" + normalizedColor[1] + normalizedColor[2], 16),\n            green: parseInt(\"\" + normalizedColor[3] + normalizedColor[4], 16),\n            blue: parseInt(\"\" + normalizedColor[5] + normalizedColor[6], 16)\n        };\n    }\n    if (normalizedColor.match(hexRgbaRegex)) {\n        var alpha = parseFloat((parseInt(\"\" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));\n        return {\n            red: parseInt(\"\" + normalizedColor[1] + normalizedColor[2], 16),\n            green: parseInt(\"\" + normalizedColor[3] + normalizedColor[4], 16),\n            blue: parseInt(\"\" + normalizedColor[5] + normalizedColor[6], 16),\n            alpha: alpha\n        };\n    }\n    if (normalizedColor.match(reducedHexRegex)) {\n        return {\n            red: parseInt(\"\" + normalizedColor[1] + normalizedColor[1], 16),\n            green: parseInt(\"\" + normalizedColor[2] + normalizedColor[2], 16),\n            blue: parseInt(\"\" + normalizedColor[3] + normalizedColor[3], 16)\n        };\n    }\n    if (normalizedColor.match(reducedRgbaHexRegex)) {\n        var _alpha = parseFloat((parseInt(\"\" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));\n        return {\n            red: parseInt(\"\" + normalizedColor[1] + normalizedColor[1], 16),\n            green: parseInt(\"\" + normalizedColor[2] + normalizedColor[2], 16),\n            blue: parseInt(\"\" + normalizedColor[3] + normalizedColor[3], 16),\n            alpha: _alpha\n        };\n    }\n    var rgbMatched = rgbRegex.exec(normalizedColor);\n    if (rgbMatched) {\n        return {\n            red: parseInt(\"\" + rgbMatched[1], 10),\n            green: parseInt(\"\" + rgbMatched[2], 10),\n            blue: parseInt(\"\" + rgbMatched[3], 10)\n        };\n    }\n    var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));\n    if (rgbaMatched) {\n        return {\n            red: parseInt(\"\" + rgbaMatched[1], 10),\n            green: parseInt(\"\" + rgbaMatched[2], 10),\n            blue: parseInt(\"\" + rgbaMatched[3], 10),\n            alpha: parseFloat(\"\" + rgbaMatched[4]) > 1 ? parseFloat(\"\" + rgbaMatched[4]) / 100 : parseFloat(\"\" + rgbaMatched[4])\n        };\n    }\n    var hslMatched = hslRegex.exec(normalizedColor);\n    if (hslMatched) {\n        var hue = parseInt(\"\" + hslMatched[1], 10);\n        var saturation = parseInt(\"\" + hslMatched[2], 10) / 100;\n        var lightness = parseInt(\"\" + hslMatched[3], 10) / 100;\n        var rgbColorString = \"rgb(\" + hslToRgb(hue, saturation, lightness) + \")\";\n        var hslRgbMatched = rgbRegex.exec(rgbColorString);\n        if (!hslRgbMatched) {\n            throw new PolishedError(4, normalizedColor, rgbColorString);\n        }\n        return {\n            red: parseInt(\"\" + hslRgbMatched[1], 10),\n            green: parseInt(\"\" + hslRgbMatched[2], 10),\n            blue: parseInt(\"\" + hslRgbMatched[3], 10)\n        };\n    }\n    var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));\n    if (hslaMatched) {\n        var _hue = parseInt(\"\" + hslaMatched[1], 10);\n        var _saturation = parseInt(\"\" + hslaMatched[2], 10) / 100;\n        var _lightness = parseInt(\"\" + hslaMatched[3], 10) / 100;\n        var _rgbColorString = \"rgb(\" + hslToRgb(_hue, _saturation, _lightness) + \")\";\n        var _hslRgbMatched = rgbRegex.exec(_rgbColorString);\n        if (!_hslRgbMatched) {\n            throw new PolishedError(4, normalizedColor, _rgbColorString);\n        }\n        return {\n            red: parseInt(\"\" + _hslRgbMatched[1], 10),\n            green: parseInt(\"\" + _hslRgbMatched[2], 10),\n            blue: parseInt(\"\" + _hslRgbMatched[3], 10),\n            alpha: parseFloat(\"\" + hslaMatched[4]) > 1 ? parseFloat(\"\" + hslaMatched[4]) / 100 : parseFloat(\"\" + hslaMatched[4])\n        };\n    }\n    throw new PolishedError(5);\n}\nfunction rgbToHsl(color) {\n    // make sure rgb are contained in a set of [0, 255]\n    var red = color.red / 255;\n    var green = color.green / 255;\n    var blue = color.blue / 255;\n    var max = Math.max(red, green, blue);\n    var min = Math.min(red, green, blue);\n    var lightness = (max + min) / 2;\n    if (max === min) {\n        // achromatic\n        if (color.alpha !== undefined) {\n            return {\n                hue: 0,\n                saturation: 0,\n                lightness: lightness,\n                alpha: color.alpha\n            };\n        } else {\n            return {\n                hue: 0,\n                saturation: 0,\n                lightness: lightness\n            };\n        }\n    }\n    var hue;\n    var delta = max - min;\n    var saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    switch(max){\n        case red:\n            hue = (green - blue) / delta + (green < blue ? 6 : 0);\n            break;\n        case green:\n            hue = (blue - red) / delta + 2;\n            break;\n        default:\n            // blue case\n            hue = (red - green) / delta + 4;\n            break;\n    }\n    hue *= 60;\n    if (color.alpha !== undefined) {\n        return {\n            hue: hue,\n            saturation: saturation,\n            lightness: lightness,\n            alpha: color.alpha\n        };\n    }\n    return {\n        hue: hue,\n        saturation: saturation,\n        lightness: lightness\n    };\n}\n/**\n * Returns an HslColor or HslaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a HslColor or HslaColor object back to a string.\n *\n * @example\n * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1\n * const color1 = parseToHsl('rgb(255, 0, 0)');\n * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2\n * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');\n */ function parseToHsl(color) {\n    // Note: At a later stage we can optimize this function as right now a hsl\n    // color would be parsed converted to rgb values and converted back to hsl.\n    return rgbToHsl(parseToRgb(color));\n}\n/**\n * Reduces hex values if possible e.g. #ff8866 to #f86\n * @private\n */ var reduceHexValue = function reduceHexValue(value) {\n    if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {\n        return \"#\" + value[1] + value[3] + value[5];\n    }\n    return value;\n};\nvar reduceHexValue$1 = reduceHexValue;\nfunction numberToHex(value) {\n    var hex = value.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n}\nfunction colorToHex(color) {\n    return numberToHex(Math.round(color * 255));\n}\nfunction convertToHex(red, green, blue) {\n    return reduceHexValue$1(\"#\" + colorToHex(red) + colorToHex(green) + colorToHex(blue));\n}\nfunction hslToHex(hue, saturation, lightness) {\n    return hslToRgb(hue, saturation, lightness, convertToHex);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsl(359, 0.75, 0.4),\n *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsl(359, 0.75, 0.4)};\n *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#b3191c\";\n *   background: \"#b3191c\";\n * }\n */ function hsl(value, saturation, lightness) {\n    if (typeof value === \"number\" && typeof saturation === \"number\" && typeof lightness === \"number\") {\n        return hslToHex(value, saturation, lightness);\n    } else if (typeof value === \"object\" && saturation === undefined && lightness === undefined) {\n        return hslToHex(value.hue, value.saturation, value.lightness);\n    }\n    throw new PolishedError(1);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hsla(359, 0.75, 0.4, 0.7),\n *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),\n *   background: hsla(359, 0.75, 0.4, 1),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hsla(359, 0.75, 0.4, 0.7)};\n *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};\n *   background: ${hsla(359, 0.75, 0.4, 1)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"rgba(179,25,28,0.7)\";\n *   background: \"#b3191c\";\n * }\n */ function hsla(value, saturation, lightness, alpha) {\n    if (typeof value === \"number\" && typeof saturation === \"number\" && typeof lightness === \"number\" && typeof alpha === \"number\") {\n        return alpha >= 1 ? hslToHex(value, saturation, lightness) : \"rgba(\" + hslToRgb(value, saturation, lightness) + \",\" + alpha + \")\";\n    } else if (typeof value === \"object\" && saturation === undefined && lightness === undefined && alpha === undefined) {\n        return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : \"rgba(\" + hslToRgb(value.hue, value.saturation, value.lightness) + \",\" + value.alpha + \")\";\n    }\n    throw new PolishedError(2);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible hex notation.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgb(255, 205, 100),\n *   background: rgb({ red: 255, green: 205, blue: 100 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgb(255, 205, 100)};\n *   background: ${rgb({ red: 255, green: 205, blue: 100 })};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffcd64\";\n *   background: \"#ffcd64\";\n * }\n */ function rgb(value, green, blue) {\n    if (typeof value === \"number\" && typeof green === \"number\" && typeof blue === \"number\") {\n        return reduceHexValue$1(\"#\" + numberToHex(value) + numberToHex(green) + numberToHex(blue));\n    } else if (typeof value === \"object\" && green === undefined && blue === undefined) {\n        return reduceHexValue$1(\"#\" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));\n    }\n    throw new PolishedError(6);\n}\n/**\n * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.\n *\n * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgba(255, 205, 100, 0.7),\n *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),\n *   background: rgba(255, 205, 100, 1),\n *   background: rgba('#ffffff', 0.4),\n *   background: rgba('black', 0.7),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgba(255, 205, 100, 0.7)};\n *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};\n *   background: ${rgba(255, 205, 100, 1)};\n *   background: ${rgba('#ffffff', 0.4)};\n *   background: ${rgba('black', 0.7)};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"rgba(255,205,100,0.7)\";\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,255,255,0.4)\";\n *   background: \"rgba(0,0,0,0.7)\";\n * }\n */ function rgba(firstValue, secondValue, thirdValue, fourthValue) {\n    if (typeof firstValue === \"string\" && typeof secondValue === \"number\") {\n        var rgbValue = parseToRgb(firstValue);\n        return \"rgba(\" + rgbValue.red + \",\" + rgbValue.green + \",\" + rgbValue.blue + \",\" + secondValue + \")\";\n    } else if (typeof firstValue === \"number\" && typeof secondValue === \"number\" && typeof thirdValue === \"number\" && typeof fourthValue === \"number\") {\n        return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : \"rgba(\" + firstValue + \",\" + secondValue + \",\" + thirdValue + \",\" + fourthValue + \")\";\n    } else if (typeof firstValue === \"object\" && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {\n        return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : \"rgba(\" + firstValue.red + \",\" + firstValue.green + \",\" + firstValue.blue + \",\" + firstValue.alpha + \")\";\n    }\n    throw new PolishedError(7);\n}\nvar isRgb = function isRgb(color) {\n    return typeof color.red === \"number\" && typeof color.green === \"number\" && typeof color.blue === \"number\" && (typeof color.alpha !== \"number\" || typeof color.alpha === \"undefined\");\n};\nvar isRgba = function isRgba(color) {\n    return typeof color.red === \"number\" && typeof color.green === \"number\" && typeof color.blue === \"number\" && typeof color.alpha === \"number\";\n};\nvar isHsl = function isHsl(color) {\n    return typeof color.hue === \"number\" && typeof color.saturation === \"number\" && typeof color.lightness === \"number\" && (typeof color.alpha !== \"number\" || typeof color.alpha === \"undefined\");\n};\nvar isHsla = function isHsla(color) {\n    return typeof color.hue === \"number\" && typeof color.saturation === \"number\" && typeof color.lightness === \"number\" && typeof color.alpha === \"number\";\n};\n/**\n * Converts a RgbColor, RgbaColor, HslColor or HslaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `rgb`, `rgba`, `hsl` or `hsla`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: toColorString({ red: 255, green: 205, blue: 100 }),\n *   background: toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),\n *   background: toColorString({ hue: 240, saturation: 1, lightness: 0.5 }),\n *   background: toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${toColorString({ red: 255, green: 205, blue: 100 })};\n *   background: ${toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};\n *   background: ${toColorString({ hue: 240, saturation: 1, lightness: 0.5 })};\n *   background: ${toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,205,100,0.72)\";\n *   background: \"#00f\";\n *   background: \"rgba(179,25,25,0.72)\";\n * }\n */ function toColorString(color) {\n    if (typeof color !== \"object\") throw new PolishedError(8);\n    if (isRgba(color)) return rgba(color);\n    if (isRgb(color)) return rgb(color);\n    if (isHsla(color)) return hsla(color);\n    if (isHsl(color)) return hsl(color);\n    throw new PolishedError(8);\n}\n// Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js\n// eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line no-unused-vars\n// eslint-disable-next-line no-redeclare\nfunction curried(f, length, acc) {\n    return function fn() {\n        // eslint-disable-next-line prefer-rest-params\n        var combined = acc.concat(Array.prototype.slice.call(arguments));\n        return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);\n    };\n}\n// eslint-disable-next-line no-redeclare\nfunction curry(f) {\n    // eslint-disable-line no-redeclare\n    return curried(f, f.length, []);\n}\n/**\n * Changes the hue of the color. Hue is a number between 0 to 360. The first\n * argument for adjustHue is the amount of degrees the color is rotated around\n * the color wheel, always producing a positive hue value.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: adjustHue(180, '#448'),\n *   background: adjustHue('180', 'rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${adjustHue(180, '#448')};\n *   background: ${adjustHue('180', 'rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#888844\";\n *   background: \"rgba(136,136,68,0.7)\";\n * }\n */ function adjustHue(degree, color) {\n    if (color === \"transparent\") return color;\n    var hslColor = parseToHsl(color);\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, hslColor, {\n        hue: hslColor.hue + parseFloat(degree)\n    }));\n}\n// prettier-ignore\nvar curriedAdjustHue = curry /* ::<number | string, string, string> */ (adjustHue);\nvar curriedAdjustHue$1 = curriedAdjustHue;\n/**\n * Returns the complement of the provided color. This is identical to adjustHue(180, <color>).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: complement('#448'),\n *   background: complement('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${complement('#448')};\n *   background: ${complement('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#884\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */ function complement(color) {\n    if (color === \"transparent\") return color;\n    var hslColor = parseToHsl(color);\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, hslColor, {\n        hue: (hslColor.hue + 180) % 360\n    }));\n}\nfunction guard(lowerBoundary, upperBoundary, value) {\n    return Math.max(lowerBoundary, Math.min(upperBoundary, value));\n}\n/**\n * Returns a string value for the darkened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: darken(0.2, '#FFCD64'),\n *   background: darken('0.2', 'rgba(255,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${darken(0.2, '#FFCD64')};\n *   background: ${darken('0.2', 'rgba(255,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#ffbd31\";\n *   background: \"rgba(255,189,49,0.7)\";\n * }\n */ function darken(amount, color) {\n    if (color === \"transparent\") return color;\n    var hslColor = parseToHsl(color);\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, hslColor, {\n        lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))\n    }));\n}\n// prettier-ignore\nvar curriedDarken = curry /* ::<number | string, string, string> */ (darken);\nvar curriedDarken$1 = curriedDarken;\n/**\n * Decreases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the desaturate function is the amount by how much the color\n * intensity should be decreased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: desaturate(0.2, '#CCCD64'),\n *   background: desaturate('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${desaturate(0.2, '#CCCD64')};\n *   background: ${desaturate('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#b8b979\";\n *   background: \"rgba(184,185,121,0.7)\";\n * }\n */ function desaturate(amount, color) {\n    if (color === \"transparent\") return color;\n    var hslColor = parseToHsl(color);\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, hslColor, {\n        saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))\n    }));\n}\n// prettier-ignore\nvar curriedDesaturate = curry /* ::<number | string, string, string> */ (desaturate);\nvar curriedDesaturate$1 = curriedDesaturate;\n/**\n * Returns a number (float) representing the luminance of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff',\n *   background: getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)',\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff'};\n *   background: ${getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?\n *                             'rgba(58, 133, 255, 1)' :\n *                             'rgba(255, 57, 149, 1)'};\n *\n * // CSS in JS Output\n *\n * div {\n *   background: \"#CCCD64\";\n *   background: \"rgba(58, 133, 255, 1)\";\n * }\n */ function getLuminance(color) {\n    if (color === \"transparent\") return 0;\n    var rgbColor = parseToRgb(color);\n    var _Object$keys$map = Object.keys(rgbColor).map(function(key) {\n        var channel = rgbColor[key] / 255;\n        return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n    }), r = _Object$keys$map[0], g = _Object$keys$map[1], b = _Object$keys$map[2];\n    return parseFloat((0.2126 * r + 0.7152 * g + 0.0722 * b).toFixed(3));\n}\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n *\n * @example\n * const contrastRatio = getContrast('#444', '#fff');\n */ function getContrast(color1, color2) {\n    var luminance1 = getLuminance(color1);\n    var luminance2 = getLuminance(color2);\n    return parseFloat((luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05)).toFixed(2));\n}\n/**\n * Converts the color to a grayscale, by reducing its saturation to 0.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: grayscale('#CCCD64'),\n *   background: grayscale('rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${grayscale('#CCCD64')};\n *   background: ${grayscale('rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#999\";\n *   background: \"rgba(153,153,153,0.7)\";\n * }\n */ function grayscale(color) {\n    if (color === \"transparent\") return color;\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parseToHsl(color), {\n        saturation: 0\n    }));\n}\n/**\n * Converts a HslColor or HslaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `hsl` or `hsla`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 }),\n *   background: hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 })};\n *   background: ${hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#00f\";\n *   background: \"rgba(179,25,25,0.72)\";\n * }\n */ function hslToColorString(color) {\n    if (typeof color === \"object\" && typeof color.hue === \"number\" && typeof color.saturation === \"number\" && typeof color.lightness === \"number\") {\n        if (color.alpha && typeof color.alpha === \"number\") {\n            return hsla({\n                hue: color.hue,\n                saturation: color.saturation,\n                lightness: color.lightness,\n                alpha: color.alpha\n            });\n        }\n        return hsl({\n            hue: color.hue,\n            saturation: color.saturation,\n            lightness: color.lightness\n        });\n    }\n    throw new PolishedError(45);\n}\n/**\n * Inverts the red, green and blue values of a color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: invert('#CCCD64'),\n *   background: invert('rgba(101,100,205,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${invert('#CCCD64')};\n *   background: ${invert('rgba(101,100,205,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#33329b\";\n *   background: \"rgba(154,155,50,0.7)\";\n * }\n */ function invert(color) {\n    if (color === \"transparent\") return color;\n    // parse color string to rgb\n    var value = parseToRgb(color);\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, value, {\n        red: 255 - value.red,\n        green: 255 - value.green,\n        blue: 255 - value.blue\n    }));\n}\n/**\n * Returns a string value for the lightened color.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: lighten(0.2, '#CCCD64'),\n *   background: lighten('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${lighten(0.2, '#FFCD64')};\n *   background: ${lighten('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e5e6b1\";\n *   background: \"rgba(229,230,177,0.7)\";\n * }\n */ function lighten(amount, color) {\n    if (color === \"transparent\") return color;\n    var hslColor = parseToHsl(color);\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, hslColor, {\n        lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))\n    }));\n}\n// prettier-ignore\nvar curriedLighten = curry /* ::<number | string, string, string> */ (lighten);\nvar curriedLighten$1 = curriedLighten;\n/**\n * Determines which contrast guidelines have been met for two colors.\n * Based on the [contrast calculations recommended by W3](https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html).\n *\n * @example\n * const scores = meetsContrastGuidelines('#444', '#fff');\n */ function meetsContrastGuidelines(color1, color2) {\n    var contrastRatio = getContrast(color1, color2);\n    return {\n        AA: contrastRatio >= 4.5,\n        AALarge: contrastRatio >= 3,\n        AAA: contrastRatio >= 7,\n        AAALarge: contrastRatio >= 4.5\n    };\n}\n/**\n * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: mix(0.5, '#f00', '#00f')\n *   background: mix(0.25, '#f00', '#00f')\n *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${mix(0.5, '#f00', '#00f')};\n *   background: ${mix(0.25, '#f00', '#00f')};\n *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#7f007f\";\n *   background: \"#3f00bf\";\n *   background: \"rgba(63, 0, 191, 0.75)\";\n * }\n */ function mix(weight, color, otherColor) {\n    if (color === \"transparent\") return otherColor;\n    if (otherColor === \"transparent\") return color;\n    if (weight === 0) return otherColor;\n    var parsedColor1 = parseToRgb(color);\n    var color1 = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parsedColor1, {\n        alpha: typeof parsedColor1.alpha === \"number\" ? parsedColor1.alpha : 1\n    });\n    var parsedColor2 = parseToRgb(otherColor);\n    var color2 = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parsedColor2, {\n        alpha: typeof parsedColor2.alpha === \"number\" ? parsedColor2.alpha : 1\n    });\n    // The formula is copied from the original Sass implementation:\n    // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n    var alphaDelta = color1.alpha - color2.alpha;\n    var x = parseFloat(weight) * 2 - 1;\n    var y = x * alphaDelta === -1 ? x : x + alphaDelta;\n    var z = 1 + x * alphaDelta;\n    var weight1 = (y / z + 1) / 2.0;\n    var weight2 = 1 - weight1;\n    var mixedColor = {\n        red: Math.floor(color1.red * weight1 + color2.red * weight2),\n        green: Math.floor(color1.green * weight1 + color2.green * weight2),\n        blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),\n        alpha: color1.alpha * parseFloat(weight) + color2.alpha * (1 - parseFloat(weight))\n    };\n    return rgba(mixedColor);\n}\n// prettier-ignore\nvar curriedMix = curry /* ::<number | string, string, string, string> */ (mix);\nvar mix$1 = curriedMix;\n/**\n * Increases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: opacify(0.1, 'rgba(255, 255, 255, 0.9)');\n *   background: opacify(0.2, 'hsla(0, 0%, 100%, 0.5)'),\n *   background: opacify('0.5', 'rgba(255, 0, 0, 0.2)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${opacify(0.1, 'rgba(255, 255, 255, 0.9)')};\n *   background: ${opacify(0.2, 'hsla(0, 0%, 100%, 0.5)')},\n *   background: ${opacify('0.5', 'rgba(255, 0, 0, 0.2)')},\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#fff\";\n *   background: \"rgba(255,255,255,0.7)\";\n *   background: \"rgba(255,0,0,0.7)\";\n * }\n */ function opacify(amount, color) {\n    if (color === \"transparent\") return color;\n    var parsedColor = parseToRgb(color);\n    var alpha = typeof parsedColor.alpha === \"number\" ? parsedColor.alpha : 1;\n    var colorWithAlpha = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parsedColor, {\n        alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)\n    });\n    return rgba(colorWithAlpha);\n}\n// prettier-ignore\nvar curriedOpacify = curry /* ::<number | string, string, string> */ (opacify);\nvar curriedOpacify$1 = curriedOpacify;\nvar defaultReturnIfLightColor = \"#000\";\nvar defaultReturnIfDarkColor = \"#fff\";\n/**\n * Returns black or white (or optional passed colors) for best\n * contrast depending on the luminosity of the given color.\n * When passing custom return colors, strict mode ensures that the\n * return color always meets or exceeds WCAG level AA or greater. If this test\n * fails, the default return color (black or white) is returned in place of the\n * custom return color. You can optionally turn off strict mode.\n *\n * Follows [W3C specs for readability](https://www.w3.org/TR/WCAG20-TECHS/G18.html).\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   color: readableColor('#000'),\n *   color: readableColor('black', '#001', '#ff8'),\n *   color: readableColor('white', '#001', '#ff8'),\n *   color: readableColor('red', '#333', '#ddd', true)\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   color: ${readableColor('#000')};\n *   color: ${readableColor('black', '#001', '#ff8')};\n *   color: ${readableColor('white', '#001', '#ff8')};\n *   color: ${readableColor('red', '#333', '#ddd', true)};\n * `\n *\n * // CSS in JS Output\n * element {\n *   color: \"#fff\";\n *   color: \"#ff8\";\n *   color: \"#001\";\n *   color: \"#000\";\n * }\n */ function readableColor(color, returnIfLightColor, returnIfDarkColor, strict) {\n    if (returnIfLightColor === void 0) {\n        returnIfLightColor = defaultReturnIfLightColor;\n    }\n    if (returnIfDarkColor === void 0) {\n        returnIfDarkColor = defaultReturnIfDarkColor;\n    }\n    if (strict === void 0) {\n        strict = true;\n    }\n    var isColorLight = getLuminance(color) > 0.179;\n    var preferredReturnColor = isColorLight ? returnIfLightColor : returnIfDarkColor;\n    if (!strict || getContrast(color, preferredReturnColor) >= 4.5) {\n        return preferredReturnColor;\n    }\n    return isColorLight ? defaultReturnIfLightColor : defaultReturnIfDarkColor;\n}\n/**\n * Converts a RgbColor or RgbaColor object to a color string.\n * This util is useful in case you only know on runtime which color object is\n * used. Otherwise we recommend to rely on `rgb` or `rgba`.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: rgbToColorString({ red: 255, green: 205, blue: 100 }),\n *   background: rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100 })};\n *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#ffcd64\";\n *   background: \"rgba(255,205,100,0.72)\";\n * }\n */ function rgbToColorString(color) {\n    if (typeof color === \"object\" && typeof color.red === \"number\" && typeof color.green === \"number\" && typeof color.blue === \"number\") {\n        if (typeof color.alpha === \"number\") {\n            return rgba({\n                red: color.red,\n                green: color.green,\n                blue: color.blue,\n                alpha: color.alpha\n            });\n        }\n        return rgb({\n            red: color.red,\n            green: color.green,\n            blue: color.blue\n        });\n    }\n    throw new PolishedError(46);\n}\n/**\n * Increases the intensity of a color. Its range is between 0 to 1. The first\n * argument of the saturate function is the amount by how much the color\n * intensity should be increased.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: saturate(0.2, '#CCCD64'),\n *   background: saturate('0.2', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${saturate(0.2, '#FFCD64')};\n *   background: ${saturate('0.2', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#e0e250\";\n *   background: \"rgba(224,226,80,0.7)\";\n * }\n */ function saturate(amount, color) {\n    if (color === \"transparent\") return color;\n    var hslColor = parseToHsl(color);\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, hslColor, {\n        saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))\n    }));\n}\n// prettier-ignore\nvar curriedSaturate = curry /* ::<number | string, string, string> */ (saturate);\nvar curriedSaturate$1 = curriedSaturate;\n/**\n * Sets the hue of a color to the provided value. The hue range can be\n * from 0 and 359.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setHue(42, '#CCCD64'),\n *   background: setHue('244', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setHue(42, '#CCCD64')};\n *   background: ${setHue('244', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#cdae64\";\n *   background: \"rgba(107,100,205,0.7)\";\n * }\n */ function setHue(hue, color) {\n    if (color === \"transparent\") return color;\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parseToHsl(color), {\n        hue: parseFloat(hue)\n    }));\n}\n// prettier-ignore\nvar curriedSetHue = curry /* ::<number | string, string, string> */ (setHue);\nvar curriedSetHue$1 = curriedSetHue;\n/**\n * Sets the lightness of a color to the provided value. The lightness range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setLightness(0.2, '#CCCD64'),\n *   background: setLightness('0.75', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setLightness(0.2, '#CCCD64')};\n *   background: ${setLightness('0.75', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#4d4d19\";\n *   background: \"rgba(223,224,159,0.7)\";\n * }\n */ function setLightness(lightness, color) {\n    if (color === \"transparent\") return color;\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parseToHsl(color), {\n        lightness: parseFloat(lightness)\n    }));\n}\n// prettier-ignore\nvar curriedSetLightness = curry /* ::<number | string, string, string> */ (setLightness);\nvar curriedSetLightness$1 = curriedSetLightness;\n/**\n * Sets the saturation of a color to the provided value. The saturation range can be\n * from 0 and 1.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: setSaturation(0.2, '#CCCD64'),\n *   background: setSaturation('0.75', 'rgba(204,205,100,0.7)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${setSaturation(0.2, '#CCCD64')};\n *   background: ${setSaturation('0.75', 'rgba(204,205,100,0.7)')};\n * `\n *\n * // CSS in JS Output\n * element {\n *   background: \"#adad84\";\n *   background: \"rgba(228,229,76,0.7)\";\n * }\n */ function setSaturation(saturation, color) {\n    if (color === \"transparent\") return color;\n    return toColorString((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parseToHsl(color), {\n        saturation: parseFloat(saturation)\n    }));\n}\n// prettier-ignore\nvar curriedSetSaturation = curry /* ::<number | string, string, string> */ (setSaturation);\nvar curriedSetSaturation$1 = curriedSetSaturation;\n/**\n * Shades a color by mixing it with black. `shade` can produce\n * hue shifts, where as `darken` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: shade(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${shade(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#00003f\";\n * }\n */ function shade(percentage, color) {\n    if (color === \"transparent\") return color;\n    return mix$1(parseFloat(percentage), \"rgb(0, 0, 0)\", color);\n}\n// prettier-ignore\nvar curriedShade = curry /* ::<number | string, string, string> */ (shade);\nvar curriedShade$1 = curriedShade;\n/**\n * Tints a color by mixing it with white. `tint` can produce\n * hue shifts, where as `lighten` manipulates the luminance channel and therefore\n * doesn't produce hue shifts.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: tint(0.25, '#00f')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${tint(0.25, '#00f')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"#bfbfff\";\n * }\n */ function tint(percentage, color) {\n    if (color === \"transparent\") return color;\n    return mix$1(parseFloat(percentage), \"rgb(255, 255, 255)\", color);\n}\n// prettier-ignore\nvar curriedTint = curry /* ::<number | string, string, string> */ (tint);\nvar curriedTint$1 = curriedTint;\n/**\n * Decreases the opacity of a color. Its range for the amount is between 0 to 1.\n *\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   background: transparentize(0.1, '#fff'),\n *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),\n *   background: transparentize('0.5', 'rgba(255, 0, 0, 0.8)'),\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   background: ${transparentize(0.1, '#fff')};\n *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')};\n *   background: ${transparentize('0.5', 'rgba(255, 0, 0, 0.8)')};\n * `\n *\n * // CSS in JS Output\n *\n * element {\n *   background: \"rgba(255,255,255,0.9)\";\n *   background: \"rgba(255,255,255,0.8)\";\n *   background: \"rgba(255,0,0,0.3)\";\n * }\n */ function transparentize(amount, color) {\n    if (color === \"transparent\") return color;\n    var parsedColor = parseToRgb(color);\n    var alpha = typeof parsedColor.alpha === \"number\" ? parsedColor.alpha : 1;\n    var colorWithAlpha = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, parsedColor, {\n        alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)\n    });\n    return rgba(colorWithAlpha);\n}\n// prettier-ignore\nvar curriedTransparentize = curry /* ::<number | string, string, string> */ (transparentize);\nvar curriedTransparentize$1 = curriedTransparentize;\n/**\n * Shorthand for easily setting the animation property. Allows either multiple arrays with animations\n * or a single animation spread over the arguments.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out, colorchange 2s'\n * }\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...animation('rotate', '1s', 'ease-in-out')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${animation('rotate', '1s', 'ease-in-out')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'animation': 'rotate 1s ease-in-out'\n * }\n */ function animation() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    // Allow single or multiple animations passed\n    var multiMode = Array.isArray(args[0]);\n    if (!multiMode && args.length > 8) {\n        throw new PolishedError(64);\n    }\n    var code = args.map(function(arg) {\n        if (multiMode && !Array.isArray(arg) || !multiMode && Array.isArray(arg)) {\n            throw new PolishedError(65);\n        }\n        if (Array.isArray(arg) && arg.length > 8) {\n            throw new PolishedError(66);\n        }\n        return Array.isArray(arg) ? arg.join(\" \") : arg;\n    }).join(\", \");\n    return {\n        animation: code\n    };\n}\n/**\n * Shorthand that accepts any number of backgroundImage values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgroundImages('url(\"/image/background.jpg\")', 'linear-gradient(red, green)')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'backgroundImage': 'url(\"/image/background.jpg\"), linear-gradient(red, green)'\n * }\n */ function backgroundImages() {\n    for(var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++){\n        properties[_key] = arguments[_key];\n    }\n    return {\n        backgroundImage: properties.join(\", \")\n    };\n}\n/**\n * Shorthand that accepts any number of background values as parameters for creating a single background statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${backgrounds('url(\"/image/background.jpg\")', 'linear-gradient(red, green)', 'center no-repeat')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'background': 'url(\"/image/background.jpg\"), linear-gradient(red, green), center no-repeat'\n * }\n */ function backgrounds() {\n    for(var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++){\n        properties[_key] = arguments[_key];\n    }\n    return {\n        background: properties.join(\", \")\n    };\n}\nvar sideMap = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n];\n/**\n * Shorthand for the border property that splits out individual properties for use with tools like Fela and Styletron. A side keyword can optionally be passed to target only one side's border properties.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...border('1px', 'solid', 'red')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${border('1px', 'solid', 'red')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderColor': 'red',\n *   'borderStyle': 'solid',\n *   'borderWidth': `1px`,\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...border('top', '1px', 'solid', 'red')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${border('top', '1px', 'solid', 'red')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopColor': 'red',\n *   'borderTopStyle': 'solid',\n *   'borderTopWidth': `1px`,\n * }\n */ function border(sideKeyword) {\n    for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        values[_key - 1] = arguments[_key];\n    }\n    if (typeof sideKeyword === \"string\" && sideMap.indexOf(sideKeyword) >= 0) {\n        var _ref;\n        return _ref = {}, _ref[\"border\" + capitalizeString(sideKeyword) + \"Width\"] = values[0], _ref[\"border\" + capitalizeString(sideKeyword) + \"Style\"] = values[1], _ref[\"border\" + capitalizeString(sideKeyword) + \"Color\"] = values[2], _ref;\n    } else {\n        values.unshift(sideKeyword);\n        return {\n            borderWidth: values[0],\n            borderStyle: values[1],\n            borderColor: values[2]\n        };\n    }\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderColor('red', 'green', 'blue', 'yellow')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderColor('red', 'green', 'blue', 'yellow')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopColor': 'red',\n *   'borderRightColor': 'green',\n *   'borderBottomColor': 'blue',\n *   'borderLeftColor': 'yellow'\n * }\n */ function borderColor() {\n    for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){\n        values[_key] = arguments[_key];\n    }\n    return directionalProperty.apply(void 0, [\n        \"borderColor\"\n    ].concat(values));\n}\n/**\n * Shorthand that accepts a value for side and a value for radius and applies the radius value to both corners of the side.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderRadius('top', '5px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderRadius('top', '5px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopRightRadius': '5px',\n *   'borderTopLeftRadius': '5px',\n * }\n */ function borderRadius(side, radius) {\n    var uppercaseSide = capitalizeString(side);\n    if (!radius && radius !== 0) {\n        throw new PolishedError(62);\n    }\n    if (uppercaseSide === \"Top\" || uppercaseSide === \"Bottom\") {\n        var _ref;\n        return _ref = {}, _ref[\"border\" + uppercaseSide + \"RightRadius\"] = radius, _ref[\"border\" + uppercaseSide + \"LeftRadius\"] = radius, _ref;\n    }\n    if (uppercaseSide === \"Left\" || uppercaseSide === \"Right\") {\n        var _ref2;\n        return _ref2 = {}, _ref2[\"borderTop\" + uppercaseSide + \"Radius\"] = radius, _ref2[\"borderBottom\" + uppercaseSide + \"Radius\"] = radius, _ref2;\n    }\n    throw new PolishedError(63);\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderStyle('solid', 'dashed', 'dotted', 'double')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderStyle('solid', 'dashed', 'dotted', 'double')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopStyle': 'solid',\n *   'borderRightStyle': 'dashed',\n *   'borderBottomStyle': 'dotted',\n *   'borderLeftStyle': 'double'\n * }\n */ function borderStyle() {\n    for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){\n        values[_key] = arguments[_key];\n    }\n    return directionalProperty.apply(void 0, [\n        \"borderStyle\"\n    ].concat(values));\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...borderWidth('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${borderWidth('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'borderTopWidth': '12px',\n *   'borderRightWidth': '24px',\n *   'borderBottomWidth': '36px',\n *   'borderLeftWidth': '48px'\n * }\n */ function borderWidth() {\n    for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){\n        values[_key] = arguments[_key];\n    }\n    return directionalProperty.apply(void 0, [\n        \"borderWidth\"\n    ].concat(values));\n}\nfunction generateSelectors(template, state) {\n    var stateSuffix = state ? \":\" + state : \"\";\n    return template(stateSuffix);\n}\n/**\n * Function helper that adds an array of states to a template of selectors. Used in textInputs and buttons.\n * @private\n */ function statefulSelectors(states, template, stateMap) {\n    if (!template) throw new PolishedError(67);\n    if (states.length === 0) return generateSelectors(template, null);\n    var selectors = [];\n    for(var i = 0; i < states.length; i += 1){\n        if (stateMap && stateMap.indexOf(states[i]) < 0) {\n            throw new PolishedError(68);\n        }\n        selectors.push(generateSelectors(template, states[i]));\n    }\n    selectors = selectors.join(\",\");\n    return selectors;\n}\nvar stateMap$1 = [\n    undefined,\n    null,\n    \"active\",\n    \"focus\",\n    \"hover\"\n];\nfunction template$1(state) {\n    return \"button\" + state + ',\\n  input[type=\"button\"]' + state + ',\\n  input[type=\"reset\"]' + state + ',\\n  input[type=\"submit\"]' + state;\n}\n/**\n * Populates selectors that target all buttons. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [buttons('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${buttons('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'button:active,\n *  'input[type=\"button\"]:active,\n *  'input[type=\\\"reset\\\"]:active,\n *  'input[type=\\\"submit\\\"]:active: {\n *   'border': 'none'\n * }\n */ function buttons() {\n    for(var _len = arguments.length, states = new Array(_len), _key = 0; _key < _len; _key++){\n        states[_key] = arguments[_key];\n    }\n    return statefulSelectors(states, template$1, stateMap$1);\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...margin('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${margin('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'marginTop': '12px',\n *   'marginRight': '24px',\n *   'marginBottom': '36px',\n *   'marginLeft': '48px'\n * }\n */ function margin() {\n    for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){\n        values[_key] = arguments[_key];\n    }\n    return directionalProperty.apply(void 0, [\n        \"margin\"\n    ].concat(values));\n}\n/**\n * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...padding('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${padding('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'paddingTop': '12px',\n *   'paddingRight': '24px',\n *   'paddingBottom': '36px',\n *   'paddingLeft': '48px'\n * }\n */ function padding() {\n    for(var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++){\n        values[_key] = arguments[_key];\n    }\n    return directionalProperty.apply(void 0, [\n        \"padding\"\n    ].concat(values));\n}\nvar positionMap = [\n    \"absolute\",\n    \"fixed\",\n    \"relative\",\n    \"static\",\n    \"sticky\"\n];\n/**\n * Shorthand accepts up to five values, including null to skip a value, and maps them to their respective directions. The first value can optionally be a position keyword.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...position('12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n *\n * // Styles as object usage\n * const styles = {\n *   ...position('absolute', '12px', '24px', '36px', '48px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${position('absolute', '12px', '24px', '36px', '48px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'position': 'absolute',\n *   'top': '12px',\n *   'right': '24px',\n *   'bottom': '36px',\n *   'left': '48px'\n * }\n */ function position(firstValue) {\n    for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        values[_key - 1] = arguments[_key];\n    }\n    if (positionMap.indexOf(firstValue) >= 0 && firstValue) {\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, directionalProperty.apply(void 0, [\n            \"\"\n        ].concat(values)), {\n            position: firstValue\n        });\n    } else {\n        return directionalProperty.apply(void 0, [\n            \"\",\n            firstValue\n        ].concat(values));\n    }\n}\n/**\n * Shorthand to set the height and width properties in a single statement.\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...size('300px', '250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${size('300px', '250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'height': '300px',\n *   'width': '250px',\n * }\n */ function size(height, width) {\n    if (width === void 0) {\n        width = height;\n    }\n    return {\n        height: height,\n        width: width\n    };\n}\nvar stateMap = [\n    undefined,\n    null,\n    \"active\",\n    \"focus\",\n    \"hover\"\n];\nfunction template(state) {\n    return 'input[type=\"color\"]' + state + ',\\n    input[type=\"date\"]' + state + ',\\n    input[type=\"datetime\"]' + state + ',\\n    input[type=\"datetime-local\"]' + state + ',\\n    input[type=\"email\"]' + state + ',\\n    input[type=\"month\"]' + state + ',\\n    input[type=\"number\"]' + state + ',\\n    input[type=\"password\"]' + state + ',\\n    input[type=\"search\"]' + state + ',\\n    input[type=\"tel\"]' + state + ',\\n    input[type=\"text\"]' + state + ',\\n    input[type=\"time\"]' + state + ',\\n    input[type=\"url\"]' + state + ',\\n    input[type=\"week\"]' + state + \",\\n    input:not([type])\" + state + \",\\n    textarea\" + state;\n}\n/**\n * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.\n * @example\n * // Styles as object usage\n * const styles = {\n *   [textInputs('active')]: {\n *     'border': 'none'\n *   }\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   > ${textInputs('active')} {\n *     border: none;\n *   }\n * `\n *\n * // CSS in JS Output\n *\n *  'input[type=\"color\"]:active,\n *  input[type=\"date\"]:active,\n *  input[type=\"datetime\"]:active,\n *  input[type=\"datetime-local\"]:active,\n *  input[type=\"email\"]:active,\n *  input[type=\"month\"]:active,\n *  input[type=\"number\"]:active,\n *  input[type=\"password\"]:active,\n *  input[type=\"search\"]:active,\n *  input[type=\"tel\"]:active,\n *  input[type=\"text\"]:active,\n *  input[type=\"time\"]:active,\n *  input[type=\"url\"]:active,\n *  input[type=\"week\"]:active,\n *  input:not([type]):active,\n *  textarea:active': {\n *   'border': 'none'\n * }\n */ function textInputs() {\n    for(var _len = arguments.length, states = new Array(_len), _key = 0; _key < _len; _key++){\n        states[_key] = arguments[_key];\n    }\n    return statefulSelectors(states, template, stateMap);\n}\n/**\n * Accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same transition values to (second parameter).\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),\n *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};\n *   ${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',\n * }\n */ function transitions() {\n    for(var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++){\n        properties[_key] = arguments[_key];\n    }\n    if (Array.isArray(properties[0]) && properties.length === 2) {\n        var value = properties[1];\n        if (typeof value !== \"string\") {\n            throw new PolishedError(61);\n        }\n        var transitionsString = properties[0].map(function(property) {\n            return property + \" \" + value;\n        }).join(\", \");\n        return {\n            transition: transitionsString\n        };\n    } else {\n        return {\n            transition: properties.join(\", \")\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/polished/dist/polished.esm.js\n");

/***/ })

};
;