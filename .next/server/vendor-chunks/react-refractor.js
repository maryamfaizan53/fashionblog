"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-refractor";
exports.ids = ["vendor-chunks/react-refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-refractor/lib/Refractor.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-refractor/lib/Refractor.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar fract = __webpack_require__(/*! refractor/core.js */ \"(ssr)/./node_modules/refractor/core.js\");\nvar mapChildren = __webpack_require__(/*! ./mapChildren */ \"(ssr)/./node_modules/react-refractor/lib/mapChildren.js\");\nvar addMarkers = __webpack_require__(/*! ./addMarkers */ \"(ssr)/./node_modules/react-refractor/lib/addMarkers.js\");\n// eslint-disable-next-line id-length\nvar h = React.createElement;\nfunction Refractor(props) {\n    if (true) {\n        if (!fract.registered(props.language)) {\n            // eslint-disable-next-line no-console\n            console.warn('No language definitions for \"'.concat(props.language, '\" seems to be registered, did you forget to call `Refractor.registerLanguage()`?'));\n        }\n    }\n    var langClassName = \"language-\".concat(props.language);\n    var codeProps = {\n        className: langClassName\n    };\n    var preProps = {\n        className: [\n            props.className || \"refractor\",\n            langClassName\n        ].filter(Boolean).join(\" \")\n    };\n    if (props.inline) {\n        codeProps.style = {\n            display: \"inline\"\n        };\n        codeProps.className = props.className || \"refractor\";\n    }\n    var ast = fract.highlight(props.value, props.language);\n    if (props.markers && props.markers.length > 0) {\n        ast = addMarkers(ast, {\n            markers: props.markers\n        });\n    }\n    var value = ast.length === 0 ? props.value : ast.map(mapChildren.depth(0));\n    var code = h(\"code\", codeProps, value);\n    return props.inline ? code : h(\"pre\", preProps, code);\n}\nRefractor.registerLanguage = function(lang) {\n    return fract.register(lang);\n};\nRefractor.hasLanguage = function(lang) {\n    return fract.registered(lang);\n};\nmodule.exports = Refractor; //# sourceMappingURL=Refractor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9SZWZyYWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYixJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxjQUFjRixtQkFBT0EsQ0FBQztBQUMxQixJQUFJRyxhQUFhSCxtQkFBT0EsQ0FBQztBQUV6QixxQ0FBcUM7QUFDckMsSUFBSUksSUFBSUwsTUFBTU0sYUFBYTtBQUMzQixTQUFTQyxVQUFVQyxLQUFLO0lBQ3RCLElBQUlDLElBQXlCLEVBQWM7UUFDekMsSUFBSSxDQUFDUCxNQUFNUSxVQUFVLENBQUNGLE1BQU1HLFFBQVEsR0FBRztZQUNyQyxzQ0FBc0M7WUFDdENDLFFBQVFDLElBQUksQ0FBQyxnQ0FBaUNDLE1BQU0sQ0FBQ04sTUFBTUcsUUFBUSxFQUFFO1FBQ3ZFO0lBQ0Y7SUFDQSxJQUFJSSxnQkFBZ0IsWUFBWUQsTUFBTSxDQUFDTixNQUFNRyxRQUFRO0lBQ3JELElBQUlLLFlBQVk7UUFDZEMsV0FBV0Y7SUFDYjtJQUNBLElBQUlHLFdBQVc7UUFDYkQsV0FBVztZQUFDVCxNQUFNUyxTQUFTLElBQUk7WUFBYUY7U0FBYyxDQUFDSSxNQUFNLENBQUNDLFNBQVNDLElBQUksQ0FBQztJQUNsRjtJQUNBLElBQUliLE1BQU1jLE1BQU0sRUFBRTtRQUNoQk4sVUFBVU8sS0FBSyxHQUFHO1lBQ2hCQyxTQUFTO1FBQ1g7UUFDQVIsVUFBVUMsU0FBUyxHQUFHVCxNQUFNUyxTQUFTLElBQUk7SUFDM0M7SUFDQSxJQUFJUSxNQUFNdkIsTUFBTXdCLFNBQVMsQ0FBQ2xCLE1BQU1tQixLQUFLLEVBQUVuQixNQUFNRyxRQUFRO0lBQ3JELElBQUlILE1BQU1vQixPQUFPLElBQUlwQixNQUFNb0IsT0FBTyxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUM3Q0osTUFBTXJCLFdBQVdxQixLQUFLO1lBQ3BCRyxTQUFTcEIsTUFBTW9CLE9BQU87UUFDeEI7SUFDRjtJQUNBLElBQUlELFFBQVFGLElBQUlJLE1BQU0sS0FBSyxJQUFJckIsTUFBTW1CLEtBQUssR0FBR0YsSUFBSUssR0FBRyxDQUFDM0IsWUFBWTRCLEtBQUssQ0FBQztJQUN2RSxJQUFJQyxPQUFPM0IsRUFBRSxRQUFRVyxXQUFXVztJQUNoQyxPQUFPbkIsTUFBTWMsTUFBTSxHQUFHVSxPQUFPM0IsRUFBRSxPQUFPYSxVQUFVYztBQUNsRDtBQUNBekIsVUFBVTBCLGdCQUFnQixHQUFHLFNBQVVDLElBQUk7SUFDekMsT0FBT2hDLE1BQU1pQyxRQUFRLENBQUNEO0FBQ3hCO0FBQ0EzQixVQUFVNkIsV0FBVyxHQUFHLFNBQVVGLElBQUk7SUFDcEMsT0FBT2hDLE1BQU1RLFVBQVUsQ0FBQ3dCO0FBQzFCO0FBQ0FHLE9BQU9DLE9BQU8sR0FBRy9CLFdBQ2pCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXBsZS1ibG9nLXN0eWxlZC10ZW1wbGF0ZS1mb3ItaGVhZGxlc3MtY21zLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJhY3Rvci9saWIvUmVmcmFjdG9yLmpzP2Q4Y2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgZnJhY3QgPSByZXF1aXJlKCdyZWZyYWN0b3IvY29yZS5qcycpO1xudmFyIG1hcENoaWxkcmVuID0gcmVxdWlyZSgnLi9tYXBDaGlsZHJlbicpO1xudmFyIGFkZE1hcmtlcnMgPSByZXF1aXJlKCcuL2FkZE1hcmtlcnMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGlkLWxlbmd0aFxudmFyIGggPSBSZWFjdC5jcmVhdGVFbGVtZW50O1xuZnVuY3Rpb24gUmVmcmFjdG9yKHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFmcmFjdC5yZWdpc3RlcmVkKHByb3BzLmxhbmd1YWdlKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIk5vIGxhbmd1YWdlIGRlZmluaXRpb25zIGZvciBcXFwiXCIuY29uY2F0KHByb3BzLmxhbmd1YWdlLCBcIlxcXCIgc2VlbXMgdG8gYmUgcmVnaXN0ZXJlZCwgZGlkIHlvdSBmb3JnZXQgdG8gY2FsbCBgUmVmcmFjdG9yLnJlZ2lzdGVyTGFuZ3VhZ2UoKWA/XCIpKTtcbiAgICB9XG4gIH1cbiAgdmFyIGxhbmdDbGFzc05hbWUgPSBcImxhbmd1YWdlLVwiLmNvbmNhdChwcm9wcy5sYW5ndWFnZSk7XG4gIHZhciBjb2RlUHJvcHMgPSB7XG4gICAgY2xhc3NOYW1lOiBsYW5nQ2xhc3NOYW1lXG4gIH07XG4gIHZhciBwcmVQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6IFtwcm9wcy5jbGFzc05hbWUgfHwgJ3JlZnJhY3RvcicsIGxhbmdDbGFzc05hbWVdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJylcbiAgfTtcbiAgaWYgKHByb3BzLmlubGluZSkge1xuICAgIGNvZGVQcm9wcy5zdHlsZSA9IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnXG4gICAgfTtcbiAgICBjb2RlUHJvcHMuY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lIHx8ICdyZWZyYWN0b3InO1xuICB9XG4gIHZhciBhc3QgPSBmcmFjdC5oaWdobGlnaHQocHJvcHMudmFsdWUsIHByb3BzLmxhbmd1YWdlKTtcbiAgaWYgKHByb3BzLm1hcmtlcnMgJiYgcHJvcHMubWFya2Vycy5sZW5ndGggPiAwKSB7XG4gICAgYXN0ID0gYWRkTWFya2Vycyhhc3QsIHtcbiAgICAgIG1hcmtlcnM6IHByb3BzLm1hcmtlcnNcbiAgICB9KTtcbiAgfVxuICB2YXIgdmFsdWUgPSBhc3QubGVuZ3RoID09PSAwID8gcHJvcHMudmFsdWUgOiBhc3QubWFwKG1hcENoaWxkcmVuLmRlcHRoKDApKTtcbiAgdmFyIGNvZGUgPSBoKCdjb2RlJywgY29kZVByb3BzLCB2YWx1ZSk7XG4gIHJldHVybiBwcm9wcy5pbmxpbmUgPyBjb2RlIDogaCgncHJlJywgcHJlUHJvcHMsIGNvZGUpO1xufVxuUmVmcmFjdG9yLnJlZ2lzdGVyTGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZykge1xuICByZXR1cm4gZnJhY3QucmVnaXN0ZXIobGFuZyk7XG59O1xuUmVmcmFjdG9yLmhhc0xhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmcpIHtcbiAgcmV0dXJuIGZyYWN0LnJlZ2lzdGVyZWQobGFuZyk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZyYWN0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWZyYWN0b3IuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsImZyYWN0IiwibWFwQ2hpbGRyZW4iLCJhZGRNYXJrZXJzIiwiaCIsImNyZWF0ZUVsZW1lbnQiLCJSZWZyYWN0b3IiLCJwcm9wcyIsInByb2Nlc3MiLCJyZWdpc3RlcmVkIiwibGFuZ3VhZ2UiLCJjb25zb2xlIiwid2FybiIsImNvbmNhdCIsImxhbmdDbGFzc05hbWUiLCJjb2RlUHJvcHMiLCJjbGFzc05hbWUiLCJwcmVQcm9wcyIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwiaW5saW5lIiwic3R5bGUiLCJkaXNwbGF5IiwiYXN0IiwiaGlnaGxpZ2h0IiwidmFsdWUiLCJtYXJrZXJzIiwibGVuZ3RoIiwibWFwIiwiZGVwdGgiLCJjb2RlIiwicmVnaXN0ZXJMYW5ndWFnZSIsImxhbmciLCJyZWdpc3RlciIsImhhc0xhbmd1YWdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/Refractor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/addMarkers.js":
/*!********************************************************!*\
  !*** ./node_modules/react-refractor/lib/addMarkers.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar filter = __webpack_require__(/*! unist-util-filter */ \"(ssr)/./node_modules/unist-util-filter/index.js\");\nvar visit = __webpack_require__(/*! unist-util-visit-parents */ \"(ssr)/./node_modules/unist-util-visit-parents/index.js\");\nvar NodeMap = __webpack_require__(/*! ./map */ \"(ssr)/./node_modules/react-refractor/lib/map.js\");\nfunction lineNumberify(ast) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        lineNumber: 1\n    };\n    return ast.reduce(function(result, node) {\n        var lineStart = context.lineNumber;\n        if (node.type === \"text\") {\n            if (node.value.indexOf(\"\\n\") === -1) {\n                node.lineStart = lineStart;\n                node.lineEnd = lineStart;\n                result.nodes.push(node);\n                return result;\n            }\n            var lines = node.value.split(\"\\n\");\n            for(var i = 0; i < lines.length; i++){\n                var lineNum = i === 0 ? context.lineNumber : ++context.lineNumber;\n                result.nodes.push({\n                    type: \"text\",\n                    value: i === lines.length - 1 ? lines[i] : \"\".concat(lines[i], \"\\n\"),\n                    lineStart: lineNum,\n                    lineEnd: lineNum\n                });\n            }\n            result.lineNumber = context.lineNumber;\n            return result;\n        }\n        if (node.children) {\n            var processed = lineNumberify(node.children, context);\n            var firstChild = processed.nodes[0];\n            var lastChild = processed.nodes[processed.nodes.length - 1];\n            node.lineStart = firstChild ? firstChild.lineStart : lineStart;\n            node.lineEnd = lastChild ? lastChild.lineEnd : lineStart;\n            node.children = processed.nodes;\n            result.lineNumber = processed.lineNumber;\n            result.nodes.push(node);\n            return result;\n        }\n        result.nodes.push(node);\n        return result;\n    }, {\n        nodes: [],\n        lineNumber: context.lineNumber\n    });\n}\nfunction unwrapLine(markerLine, nodes) {\n    var tree = {\n        type: \"root\",\n        children: nodes\n    };\n    var headMap = new NodeMap();\n    var lineMap = new NodeMap();\n    var tailMap = new NodeMap();\n    var cloned = [];\n    function addCopy(map, node, ancestors) {\n        cloned.push(node);\n        ancestors.forEach(function(ancestor) {\n            if (!map.has(ancestor)) {\n                map.set(ancestor, Object.assign({}, ancestor, {\n                    children: []\n                }));\n                if (ancestor !== tree) {\n                    cloned.push(ancestor);\n                }\n            }\n        });\n        var i = ancestors.length;\n        while(i--){\n            var ancestor = map.get(ancestors[i]);\n            var child = ancestors[i + 1];\n            var leaf = map.get(child) || node;\n            if (ancestor.children.indexOf(leaf) === -1) {\n                ancestor.children.push(leaf);\n            }\n        }\n    }\n    visit(tree, function(node, ancestors) {\n        if (node.children) {\n            return;\n        }\n        // These nodes are on previous lines, but nested within the same structure\n        if (node.lineStart < markerLine) {\n            addCopy(headMap, node, ancestors);\n            return;\n        }\n        // These nodes are on the target line\n        if (node.lineStart === markerLine) {\n            addCopy(lineMap, node, ancestors);\n            return;\n        }\n        // If we have shared ancestors with some of the cloned elements,\n        // create another tree of the remaining nodes\n        if (node.lineEnd > markerLine && cloned.some(function(clone) {\n            return ancestors.indexOf(clone) !== -1;\n        })) {\n            addCopy(tailMap, node, ancestors);\n        }\n    });\n    // Get the remaining nodes - the ones who were not part of the same tree\n    var filtered = filter(tree, function(node) {\n        return cloned.indexOf(node) === -1;\n    });\n    var getChildren = function getChildren(map) {\n        var rootNode = map.get(tree);\n        if (!rootNode) {\n            return [];\n        }\n        visit(rootNode, function(leaf, ancestors) {\n            if (leaf.children) {\n                leaf.lineStart = 0;\n                leaf.lineEnd = 0;\n                return;\n            }\n            ancestors.forEach(function(ancestor) {\n                ancestor.lineStart = Math.max(ancestor.lineStart, leaf.lineStart);\n                ancestor.lineEnd = Math.max(ancestor.lineEnd, leaf.lineEnd);\n            });\n        });\n        return rootNode.children;\n    };\n    var merged = [].concat(getChildren(headMap), getChildren(lineMap), getChildren(tailMap), filtered ? filtered.children : []);\n    headMap.clear();\n    lineMap.clear();\n    tailMap.clear();\n    return merged;\n}\nfunction wrapBatch(children, marker, options) {\n    var className = marker.className || \"refractor-marker\";\n    return {\n        type: \"element\",\n        tagName: marker.component || \"div\",\n        properties: marker.component ? Object.assign({}, options, {\n            className: className\n        }) : {\n            className: className\n        },\n        children: children,\n        lineStart: marker.line,\n        lineEnd: children[children.length - 1].lineEnd,\n        isMarker: true\n    };\n}\nfunction wrapLines(treeNodes, markers, options) {\n    if (markers.length === 0 || treeNodes.length === 0) {\n        return treeNodes;\n    }\n    var ast = markers.reduce(function(acc, marker) {\n        return unwrapLine(marker.line, acc);\n    }, treeNodes);\n    // Container for the new AST\n    var wrapped = [];\n    // Note: Markers are already sorted by line number (ascending)\n    var astIndex = 0;\n    for(var m = 0; m < markers.length; m++){\n        var marker = markers[m];\n        // Start by eating all AST nodes with line numbers up to the given marker\n        for(var node = ast[astIndex]; node && node.lineEnd < marker.line; node = ast[++astIndex]){\n            wrapped.push(node);\n        }\n        // Now proceed to find all _contiguous_ nodes on the same line\n        var batch = [];\n        for(var _node = ast[astIndex]; _node && _node.lineEnd === marker.line; _node = ast[++astIndex]){\n            batch.push(_node);\n        }\n        // Now add that batch, if we have anything\n        if (batch.length > 0) {\n            wrapped.push(wrapBatch(batch, marker, options));\n        }\n    }\n    // Now add the remaining AST nodes\n    while(astIndex < ast.length){\n        wrapped.push(ast[astIndex++]);\n    }\n    return wrapped;\n}\nfunction addMarkers(ast, options) {\n    var markers = options.markers.map(function(marker) {\n        return marker.line ? marker : {\n            line: marker\n        };\n    }).sort(function(nodeA, nodeB) {\n        return nodeA.line - nodeB.line;\n    });\n    var numbered = lineNumberify(ast).nodes;\n    return wrapLines(numbered, markers, options);\n}\nmodule.exports = addMarkers; //# sourceMappingURL=addMarkers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/addMarkers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/map.js":
/*!*************************************************!*\
  !*** ./node_modules/react-refractor/lib/map.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n/**\n * Weird \"map\" polyfill, that's weak if possible\n */ module.exports = typeof WeakMap === \"function\" ? HappyMap : SadMap;\n// Happy path! Fakes a `clear()` if possible (noop)\nfunction HappyMap() {\n    this.map = new WeakMap();\n}\nHappyMap.prototype.has = function(key) {\n    return this.map.has(key);\n};\nHappyMap.prototype.set = function(key, value) {\n    this.map.set(key, value);\n    return this;\n};\nHappyMap.prototype.get = function(key) {\n    return this.map.get(key);\n};\nHappyMap.prototype.clear = function() {\n// intentional noop, since we dont need to/cant clear\n};\n// Sad path! Use less stylish approach\nfunction SadMap() {\n    this.keys = [];\n    this.values = [];\n}\nSadMap.prototype.has = function(key) {\n    return this.keys.indexOf(key) !== -1;\n};\nSadMap.prototype.set = function(key, value) {\n    var index = this.keys.indexOf(key);\n    if (index === -1) {\n        this.keys.push(key);\n        this.values.push(value);\n    } else {\n        this.values[index] = value;\n    }\n    return this;\n};\nSadMap.prototype.get = function(key) {\n    var index = this.keys.indexOf(key);\n    return index === -1 ? undefined : this.values[index];\n};\nSadMap.prototype.clear = function() {\n    this.keys = [];\n    this.values = [];\n}; //# sourceMappingURL=map.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Q0FFQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsT0FBT0MsWUFBWSxhQUFhQyxXQUFXQztBQUU1RCxtREFBbUQ7QUFDbkQsU0FBU0Q7SUFDUCxJQUFJLENBQUNFLEdBQUcsR0FBRyxJQUFJSDtBQUNqQjtBQUNBQyxTQUFTRyxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFVQyxHQUFHO0lBQ3BDLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNFLEdBQUcsQ0FBQ0M7QUFDdEI7QUFDQUwsU0FBU0csU0FBUyxDQUFDRyxHQUFHLEdBQUcsU0FBVUQsR0FBRyxFQUFFRSxLQUFLO0lBQzNDLElBQUksQ0FBQ0wsR0FBRyxDQUFDSSxHQUFHLENBQUNELEtBQUtFO0lBQ2xCLE9BQU8sSUFBSTtBQUNiO0FBQ0FQLFNBQVNHLFNBQVMsQ0FBQ0ssR0FBRyxHQUFHLFNBQVVILEdBQUc7SUFDcEMsT0FBTyxJQUFJLENBQUNILEdBQUcsQ0FBQ00sR0FBRyxDQUFDSDtBQUN0QjtBQUNBTCxTQUFTRyxTQUFTLENBQUNNLEtBQUssR0FBRztBQUN6QixxREFBcUQ7QUFDdkQ7QUFFQSxzQ0FBc0M7QUFDdEMsU0FBU1I7SUFDUCxJQUFJLENBQUNTLElBQUksR0FBRyxFQUFFO0lBQ2QsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtBQUNsQjtBQUNBVixPQUFPRSxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFVQyxHQUFHO0lBQ2xDLE9BQU8sSUFBSSxDQUFDSyxJQUFJLENBQUNFLE9BQU8sQ0FBQ1AsU0FBUyxDQUFDO0FBQ3JDO0FBQ0FKLE9BQU9FLFNBQVMsQ0FBQ0csR0FBRyxHQUFHLFNBQVVELEdBQUcsRUFBRUUsS0FBSztJQUN6QyxJQUFJTSxRQUFRLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxPQUFPLENBQUNQO0lBQzlCLElBQUlRLFVBQVUsQ0FBQyxHQUFHO1FBQ2hCLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxJQUFJLENBQUNUO1FBQ2YsSUFBSSxDQUFDTSxNQUFNLENBQUNHLElBQUksQ0FBQ1A7SUFDbkIsT0FBTztRQUNMLElBQUksQ0FBQ0ksTUFBTSxDQUFDRSxNQUFNLEdBQUdOO0lBQ3ZCO0lBQ0EsT0FBTyxJQUFJO0FBQ2I7QUFDQU4sT0FBT0UsU0FBUyxDQUFDSyxHQUFHLEdBQUcsU0FBVUgsR0FBRztJQUNsQyxJQUFJUSxRQUFRLElBQUksQ0FBQ0gsSUFBSSxDQUFDRSxPQUFPLENBQUNQO0lBQzlCLE9BQU9RLFVBQVUsQ0FBQyxJQUFJRSxZQUFZLElBQUksQ0FBQ0osTUFBTSxDQUFDRSxNQUFNO0FBQ3REO0FBQ0FaLE9BQU9FLFNBQVMsQ0FBQ00sS0FBSyxHQUFHO0lBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7SUFDZCxJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO0FBQ2xCLEdBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2ltcGxlLWJsb2ctc3R5bGVkLXRlbXBsYXRlLWZvci1oZWFkbGVzcy1jbXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXAuanM/NDUyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBXZWlyZCBcIm1hcFwiIHBvbHlmaWxsLCB0aGF0J3Mgd2VhayBpZiBwb3NzaWJsZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gSGFwcHlNYXAgOiBTYWRNYXA7XG5cbi8vIEhhcHB5IHBhdGghIEZha2VzIGEgYGNsZWFyKClgIGlmIHBvc3NpYmxlIChub29wKVxuZnVuY3Rpb24gSGFwcHlNYXAoKSB7XG4gIHRoaXMubWFwID0gbmV3IFdlYWtNYXAoKTtcbn1cbkhhcHB5TWFwLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiB0aGlzLm1hcC5oYXMoa2V5KTtcbn07XG5IYXBweU1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdGhpcy5tYXAuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn07XG5IYXBweU1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSk7XG59O1xuSGFwcHlNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAvLyBpbnRlbnRpb25hbCBub29wLCBzaW5jZSB3ZSBkb250IG5lZWQgdG8vY2FudCBjbGVhclxufTtcblxuLy8gU2FkIHBhdGghIFVzZSBsZXNzIHN0eWxpc2ggYXBwcm9hY2hcbmZ1bmN0aW9uIFNhZE1hcCgpIHtcbiAgdGhpcy5rZXlzID0gW107XG4gIHRoaXMudmFsdWVzID0gW107XG59XG5TYWRNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMua2V5cy5pbmRleE9mKGtleSkgIT09IC0xO1xufTtcblNhZE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHRoaXMua2V5cy5wdXNoKGtleSk7XG4gICAgdGhpcy52YWx1ZXMucHVzaCh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy52YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuU2FkTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gIHJldHVybiBpbmRleCA9PT0gLTEgPyB1bmRlZmluZWQgOiB0aGlzLnZhbHVlc1tpbmRleF07XG59O1xuU2FkTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5rZXlzID0gW107XG4gIHRoaXMudmFsdWVzID0gW107XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiV2Vha01hcCIsIkhhcHB5TWFwIiwiU2FkTWFwIiwibWFwIiwicHJvdG90eXBlIiwiaGFzIiwia2V5Iiwic2V0IiwidmFsdWUiLCJnZXQiLCJjbGVhciIsImtleXMiLCJ2YWx1ZXMiLCJpbmRleE9mIiwiaW5kZXgiLCJwdXNoIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/map.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-refractor/lib/mapChildren.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-refractor/lib/mapChildren.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction mapChild(child, i, depth) {\n    if (child.tagName) {\n        var className = child.properties && Array.isArray(child.properties.className) ? child.properties.className.join(\" \") : child.properties.className;\n        return React.createElement(child.tagName, Object.assign({\n            key: \"fract-\".concat(depth, \"-\").concat(i)\n        }, child.properties, {\n            className: className\n        }), child.children && child.children.map(mapWithDepth(depth + 1)));\n    }\n    return child.value;\n}\nfunction mapWithDepth(depth) {\n    return function mapChildrenWithDepth(child, i) {\n        return mapChild(child, i, depth);\n    };\n}\nexports.depth = mapWithDepth; //# sourceMappingURL=mapChildren.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXBDaGlsZHJlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsQ0FBQyxFQUFFQyxLQUFLO0lBQy9CLElBQUlGLE1BQU1HLE9BQU8sRUFBRTtRQUNqQixJQUFJQyxZQUFZSixNQUFNSyxVQUFVLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ1AsTUFBTUssVUFBVSxDQUFDRCxTQUFTLElBQUlKLE1BQU1LLFVBQVUsQ0FBQ0QsU0FBUyxDQUFDSSxJQUFJLENBQUMsT0FBT1IsTUFBTUssVUFBVSxDQUFDRCxTQUFTO1FBQ2pKLE9BQU9QLE1BQU1ZLGFBQWEsQ0FBQ1QsTUFBTUcsT0FBTyxFQUFFTyxPQUFPQyxNQUFNLENBQUM7WUFDdERDLEtBQUssU0FBU0MsTUFBTSxDQUFDWCxPQUFPLEtBQUtXLE1BQU0sQ0FBQ1o7UUFDMUMsR0FBR0QsTUFBTUssVUFBVSxFQUFFO1lBQ25CRCxXQUFXQTtRQUNiLElBQUlKLE1BQU1jLFFBQVEsSUFBSWQsTUFBTWMsUUFBUSxDQUFDQyxHQUFHLENBQUNDLGFBQWFkLFFBQVE7SUFDaEU7SUFDQSxPQUFPRixNQUFNaUIsS0FBSztBQUNwQjtBQUNBLFNBQVNELGFBQWFkLEtBQUs7SUFDekIsT0FBTyxTQUFTZ0IscUJBQXFCbEIsS0FBSyxFQUFFQyxDQUFDO1FBQzNDLE9BQU9GLFNBQVNDLE9BQU9DLEdBQUdDO0lBQzVCO0FBQ0Y7QUFDQWlCLGFBQWEsR0FBR0gsY0FDaEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2ltcGxlLWJsb2ctc3R5bGVkLXRlbXBsYXRlLWZvci1oZWFkbGVzcy1jbXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmFjdG9yL2xpYi9tYXBDaGlsZHJlbi5qcz82MDg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuZnVuY3Rpb24gbWFwQ2hpbGQoY2hpbGQsIGksIGRlcHRoKSB7XG4gIGlmIChjaGlsZC50YWdOYW1lKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGNoaWxkLnByb3BlcnRpZXMgJiYgQXJyYXkuaXNBcnJheShjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZSkgPyBjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZS5qb2luKCcgJykgOiBjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjaGlsZC50YWdOYW1lLCBPYmplY3QuYXNzaWduKHtcbiAgICAgIGtleTogXCJmcmFjdC1cIi5jb25jYXQoZGVwdGgsIFwiLVwiKS5jb25jYXQoaSlcbiAgICB9LCBjaGlsZC5wcm9wZXJ0aWVzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgIH0pLCBjaGlsZC5jaGlsZHJlbiAmJiBjaGlsZC5jaGlsZHJlbi5tYXAobWFwV2l0aERlcHRoKGRlcHRoICsgMSkpKTtcbiAgfVxuICByZXR1cm4gY2hpbGQudmFsdWU7XG59XG5mdW5jdGlvbiBtYXBXaXRoRGVwdGgoZGVwdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1hcENoaWxkcmVuV2l0aERlcHRoKGNoaWxkLCBpKSB7XG4gICAgcmV0dXJuIG1hcENoaWxkKGNoaWxkLCBpLCBkZXB0aCk7XG4gIH07XG59XG5leHBvcnRzLmRlcHRoID0gbWFwV2l0aERlcHRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwQ2hpbGRyZW4uanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIm1hcENoaWxkIiwiY2hpbGQiLCJpIiwiZGVwdGgiLCJ0YWdOYW1lIiwiY2xhc3NOYW1lIiwicHJvcGVydGllcyIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJjcmVhdGVFbGVtZW50IiwiT2JqZWN0IiwiYXNzaWduIiwia2V5IiwiY29uY2F0IiwiY2hpbGRyZW4iLCJtYXAiLCJtYXBXaXRoRGVwdGgiLCJ2YWx1ZSIsIm1hcENoaWxkcmVuV2l0aERlcHRoIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-refractor/lib/mapChildren.js\n");

/***/ })

};
;