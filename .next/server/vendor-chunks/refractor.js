"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/refractor";
exports.ids = ["vendor-chunks/refractor"];
exports.modules = {

/***/ "(ssr)/./node_modules/refractor/core.js":
/*!****************************************!*\
  !*** ./node_modules/refractor/core.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* global window, self */ // istanbul ignore next - Don't allow Prism to run on page load in browser or\n// to start messaging from workers.\nvar ctx = typeof globalThis === \"object\" ? globalThis : typeof self === \"object\" ? self :  false ? 0 : typeof global === \"object\" ? global : {};\nvar restore = capture();\nctx.Prism = {\n    manual: true,\n    disableWorkerMessageHandler: true\n};\n// Load all stuff in `prism.js` itself, except for `prism-file-highlight.js`.\n// The wrapped non-leaky grammars are loaded instead of Prism’s originals.\nvar h = __webpack_require__(/*! hastscript */ \"(ssr)/./node_modules/hastscript/index.js\");\nvar decode = __webpack_require__(/*! parse-entities */ \"(ssr)/./node_modules/parse-entities/index.js\");\nvar Prism = __webpack_require__(/*! prismjs/components/prism-core */ \"(ssr)/./node_modules/prismjs/components/prism-core.js\");\nvar markup = __webpack_require__(/*! ./lang/markup */ \"(ssr)/./node_modules/refractor/lang/markup.js\");\nvar css = __webpack_require__(/*! ./lang/css */ \"(ssr)/./node_modules/refractor/lang/css.js\");\nvar clike = __webpack_require__(/*! ./lang/clike */ \"(ssr)/./node_modules/refractor/lang/clike.js\");\nvar js = __webpack_require__(/*! ./lang/javascript */ \"(ssr)/./node_modules/refractor/lang/javascript.js\");\nrestore();\nvar own = {}.hasOwnProperty;\n// Inherit.\nfunction Refractor() {}\nRefractor.prototype = Prism;\n// Construct.\nvar refract = new Refractor();\n// Expose.\nmodule.exports = refract;\n// Create.\nrefract.highlight = highlight;\nrefract.register = register;\nrefract.alias = alias;\nrefract.registered = registered;\nrefract.listLanguages = listLanguages;\n// Register bundled grammars.\nregister(markup);\nregister(css);\nregister(clike);\nregister(js);\nrefract.util.encode = encode;\nrefract.Token.stringify = stringify;\nfunction register(grammar) {\n    if (typeof grammar !== \"function\" || !grammar.displayName) {\n        throw new Error(\"Expected `function` for `grammar`, got `\" + grammar + \"`\");\n    }\n    // Do not duplicate registrations.\n    if (refract.languages[grammar.displayName] === undefined) {\n        grammar(refract);\n    }\n}\nfunction alias(name, alias) {\n    var languages = refract.languages;\n    var map = name;\n    var key;\n    var list;\n    var length;\n    var index;\n    if (alias) {\n        map = {};\n        map[name] = alias;\n    }\n    for(key in map){\n        list = map[key];\n        list = typeof list === \"string\" ? [\n            list\n        ] : list;\n        length = list.length;\n        index = -1;\n        while(++index < length){\n            languages[list[index]] = languages[key];\n        }\n    }\n}\nfunction highlight(value, name) {\n    var sup = Prism.highlight;\n    var grammar;\n    if (typeof value !== \"string\") {\n        throw new Error(\"Expected `string` for `value`, got `\" + value + \"`\");\n    }\n    // `name` is a grammar object.\n    if (refract.util.type(name) === \"Object\") {\n        grammar = name;\n        name = null;\n    } else {\n        if (typeof name !== \"string\") {\n            throw new Error(\"Expected `string` for `name`, got `\" + name + \"`\");\n        }\n        if (own.call(refract.languages, name)) {\n            grammar = refract.languages[name];\n        } else {\n            throw new Error(\"Unknown language: `\" + name + \"` is not registered\");\n        }\n    }\n    return sup.call(this, value, grammar, name);\n}\nfunction registered(language) {\n    if (typeof language !== \"string\") {\n        throw new Error(\"Expected `string` for `language`, got `\" + language + \"`\");\n    }\n    return own.call(refract.languages, language);\n}\nfunction listLanguages() {\n    var languages = refract.languages;\n    var list = [];\n    var language;\n    for(language in languages){\n        if (own.call(languages, language) && typeof languages[language] === \"object\") {\n            list.push(language);\n        }\n    }\n    return list;\n}\nfunction stringify(value, language, parent) {\n    var env;\n    if (typeof value === \"string\") {\n        return {\n            type: \"text\",\n            value: value\n        };\n    }\n    if (refract.util.type(value) === \"Array\") {\n        return stringifyAll(value, language);\n    }\n    env = {\n        type: value.type,\n        content: refract.Token.stringify(value.content, language, parent),\n        tag: \"span\",\n        classes: [\n            \"token\",\n            value.type\n        ],\n        attributes: {},\n        language: language,\n        parent: parent\n    };\n    if (value.alias) {\n        env.classes = env.classes.concat(value.alias);\n    }\n    refract.hooks.run(\"wrap\", env);\n    return h(env.tag + \".\" + env.classes.join(\".\"), attributes(env.attributes), env.content);\n}\nfunction stringifyAll(values, language) {\n    var result = [];\n    var length = values.length;\n    var index = -1;\n    var value;\n    while(++index < length){\n        value = values[index];\n        if (value !== \"\" && value !== null && value !== undefined) {\n            result.push(value);\n        }\n    }\n    index = -1;\n    length = result.length;\n    while(++index < length){\n        value = result[index];\n        result[index] = refract.Token.stringify(value, language, result);\n    }\n    return result;\n}\nfunction encode(tokens) {\n    return tokens;\n}\nfunction attributes(attrs) {\n    var key;\n    for(key in attrs){\n        attrs[key] = decode(attrs[key]);\n    }\n    return attrs;\n}\nfunction capture() {\n    var defined = \"Prism\" in ctx;\n    /* istanbul ignore next */ var current = defined ? ctx.Prism : undefined;\n    return restore;\n    function restore() {\n        /* istanbul ignore else - Clean leaks after Prism. */ if (defined) {\n            ctx.Prism = current;\n        } else {\n            delete ctx.Prism;\n        }\n        defined = undefined;\n        current = undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/bash.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/bash.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports = bash;\nbash.displayName = \"bash\";\nbash.aliases = [\n    \"shell\"\n];\nfunction bash(Prism) {\n    ;\n    (function(Prism) {\n        // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n        // + LC_ALL, RANDOM, REPLY, SECONDS.\n        // + make sure PS1..4 are here as they are not always set,\n        // - some useless things.\n        var envVars = \"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\";\n        var commandAfterHeredoc = {\n            pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n            lookbehind: true,\n            alias: \"punctuation\",\n            // this looks reasonably well in all themes\n            inside: null // see below\n        };\n        var insideString = {\n            bash: commandAfterHeredoc,\n            environment: {\n                pattern: RegExp(\"\\\\$\" + envVars),\n                alias: \"constant\"\n            },\n            variable: [\n                // [0]: Arithmetic Environment\n                {\n                    pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n                    greedy: true,\n                    inside: {\n                        // If there is a $ sign at the beginning highlight $(( and )) as variable\n                        variable: [\n                            {\n                                pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n                                lookbehind: true\n                            },\n                            /^\\$\\(\\(/\n                        ],\n                        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n                        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n                        operator: /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n                        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n                        punctuation: /\\(\\(?|\\)\\)?|,|;/\n                    }\n                },\n                {\n                    pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n                    greedy: true,\n                    inside: {\n                        variable: /^\\$\\(|^`|\\)$|`$/\n                    }\n                },\n                {\n                    pattern: /\\$\\{[^}]+\\}/,\n                    greedy: true,\n                    inside: {\n                        operator: /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n                        punctuation: /[\\[\\]]/,\n                        environment: {\n                            pattern: RegExp(\"(\\\\{)\" + envVars),\n                            lookbehind: true,\n                            alias: \"constant\"\n                        }\n                    }\n                },\n                /\\$(?:\\w+|[#?*!@$])/\n            ],\n            // Escape sequences from echo and printf's manuals, and escaped quotes.\n            entity: /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n        };\n        Prism.languages.bash = {\n            shebang: {\n                pattern: /^#!\\s*\\/.*/,\n                alias: \"important\"\n            },\n            comment: {\n                pattern: /(^|[^\"{\\\\$])#.*/,\n                lookbehind: true\n            },\n            \"function-name\": [\n                // a) function foo {\n                // b) foo() {\n                // c) function foo() {\n                // but not “foo {”\n                {\n                    // a) and c)\n                    pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n                    lookbehind: true,\n                    alias: \"function\"\n                },\n                {\n                    // b)\n                    pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n                    alias: \"function\"\n                }\n            ],\n            // Highlight variable names as variables in for and select beginnings.\n            \"for-or-select\": {\n                pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n                alias: \"variable\",\n                lookbehind: true\n            },\n            // Highlight variable names as variables in the left-hand part\n            // of assignments (“=” and “+=”).\n            \"assign-left\": {\n                pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n                inside: {\n                    environment: {\n                        pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n                        lookbehind: true,\n                        alias: \"constant\"\n                    }\n                },\n                alias: \"variable\",\n                lookbehind: true\n            },\n            string: [\n                // Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n                {\n                    pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: insideString\n                },\n                // → No expansion (so no “inside”).\n                {\n                    pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: {\n                        bash: commandAfterHeredoc\n                    }\n                },\n                {\n                    // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n                    pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: insideString\n                },\n                {\n                    // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n                    pattern: /(^|[^$\\\\])'[^']*'/,\n                    lookbehind: true,\n                    greedy: true\n                },\n                {\n                    // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n                    pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n                    greedy: true,\n                    inside: {\n                        entity: insideString.entity\n                    }\n                }\n            ],\n            environment: {\n                pattern: RegExp(\"\\\\$?\" + envVars),\n                alias: \"constant\"\n            },\n            variable: insideString.variable,\n            function: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n                lookbehind: true\n            },\n            keyword: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n                lookbehind: true\n            },\n            // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n            builtin: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n                lookbehind: true,\n                // Alias added to make those easier to distinguish from strings.\n                alias: \"class-name\"\n            },\n            boolean: {\n                pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n                lookbehind: true\n            },\n            \"file-descriptor\": {\n                pattern: /\\B&\\d\\b/,\n                alias: \"important\"\n            },\n            operator: {\n                // Lots of redirections here, but not just that.\n                pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n                inside: {\n                    \"file-descriptor\": {\n                        pattern: /^\\d/,\n                        alias: \"important\"\n                    }\n                }\n            },\n            punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n            number: {\n                pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n                lookbehind: true\n            }\n        };\n        commandAfterHeredoc.inside = Prism.languages.bash;\n        /* Patterns in command substitution. */ var toBeCopied = [\n            \"comment\",\n            \"function-name\",\n            \"for-or-select\",\n            \"assign-left\",\n            \"string\",\n            \"environment\",\n            \"function\",\n            \"keyword\",\n            \"builtin\",\n            \"boolean\",\n            \"file-descriptor\",\n            \"operator\",\n            \"punctuation\",\n            \"number\"\n        ];\n        var inside = insideString.variable[1].inside;\n        for(var i = 0; i < toBeCopied.length; i++){\n            inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n        }\n        Prism.languages.shell = Prism.languages.bash;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/bash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/clike.js":
/*!**********************************************!*\
  !*** ./node_modules/refractor/lang/clike.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = clike;\nclike.displayName = \"clike\";\nclike.aliases = [];\nfunction clike(Prism) {\n    Prism.languages.clike = {\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: true,\n                greedy: true\n            }\n        ],\n        string: {\n            pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: true\n        },\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n            lookbehind: true,\n            inside: {\n                punctuation: /[.\\\\]/\n            }\n        },\n        keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        function: /\\b\\w+(?=\\()/,\n        number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n        operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n        punctuation: /[{}[\\];(),.:]/\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsTUFBTUMsV0FBVyxHQUFHO0FBQ3BCRCxNQUFNRSxPQUFPLEdBQUcsRUFBRTtBQUNsQixTQUFTRixNQUFNRyxLQUFLO0lBQ2xCQSxNQUFNQyxTQUFTLENBQUNKLEtBQUssR0FBRztRQUN0QkssU0FBUztZQUNQO2dCQUNFQyxTQUFTO2dCQUNUQyxZQUFZO2dCQUNaQyxRQUFRO1lBQ1Y7WUFDQTtnQkFDRUYsU0FBUztnQkFDVEMsWUFBWTtnQkFDWkMsUUFBUTtZQUNWO1NBQ0Q7UUFDREMsUUFBUTtZQUNOSCxTQUFTO1lBQ1RFLFFBQVE7UUFDVjtRQUNBLGNBQWM7WUFDWkYsU0FDRTtZQUNGQyxZQUFZO1lBQ1pHLFFBQVE7Z0JBQ05DLGFBQWE7WUFDZjtRQUNGO1FBQ0FDLFNBQ0U7UUFDRkMsU0FBUztRQUNUQyxVQUFVO1FBQ1ZDLFFBQVE7UUFDUkMsVUFBVTtRQUNWTCxhQUFhO0lBQ2Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXBsZS1ibG9nLXN0eWxlZC10ZW1wbGF0ZS1mb3ItaGVhZGxlc3MtY21zLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2NsaWtlLmpzPzQ4MTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY2xpa2VcbmNsaWtlLmRpc3BsYXlOYW1lID0gJ2NsaWtlJ1xuY2xpa2UuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjbGlrZShQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuY2xpa2UgPSB7XG4gICAgY29tbWVudDogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcOl0pXFwvXFwvLiovLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH1cbiAgICBdLFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogLyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICBwYXR0ZXJuOlxuICAgICAgICAvKFxcYig/OmNsYXNzfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfGludGVyZmFjZXxuZXd8dHJhaXQpXFxzK3xcXGJjYXRjaFxccytcXCgpW1xcdy5cXFxcXSsvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC9bLlxcXFxdL1xuICAgICAgfVxuICAgIH0sXG4gICAga2V5d29yZDpcbiAgICAgIC9cXGIoPzpicmVha3xjYXRjaHxjb250aW51ZXxkb3xlbHNlfGZpbmFsbHl8Zm9yfGZ1bmN0aW9ufGlmfGlufGluc3RhbmNlb2Z8bmV3fG51bGx8cmV0dXJufHRocm93fHRyeXx3aGlsZSlcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgZnVuY3Rpb246IC9cXGJcXHcrKD89XFwoKS8sXG4gICAgbnVtYmVyOiAvXFxiMHhbXFxkYS1mXStcXGJ8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OmVbKy1dP1xcZCspPy9pLFxuICAgIG9wZXJhdG9yOiAvWzw+XT0/fFshPV09Pz0/fC0tP3xcXCtcXCs/fCYmP3xcXHxcXHw/fFs/Ki9+XiVdLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpdL1xuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNsaWtlIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwiUHJpc20iLCJsYW5ndWFnZXMiLCJjb21tZW50IiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJzdHJpbmciLCJpbnNpZGUiLCJwdW5jdHVhdGlvbiIsImtleXdvcmQiLCJib29sZWFuIiwiZnVuY3Rpb24iLCJudW1iZXIiLCJvcGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/clike.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/css.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/css.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nmodule.exports = css;\ncss.displayName = \"css\";\ncss.aliases = [];\nfunction css(Prism) {\n    ;\n    (function(Prism) {\n        var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n        Prism.languages.css = {\n            comment: /\\/\\*[\\s\\S]*?\\*\\//,\n            atrule: {\n                pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n                inside: {\n                    rule: /^@[\\w-]+/,\n                    \"selector-function-argument\": {\n                        pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                        lookbehind: true,\n                        alias: \"selector\"\n                    },\n                    keyword: {\n                        pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                        lookbehind: true\n                    } // See rest below\n                }\n            },\n            url: {\n                // https://drafts.csswg.org/css-values-3/#urls\n                pattern: RegExp(\"\\\\burl\\\\((?:\" + string.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n                greedy: true,\n                inside: {\n                    function: /^url/i,\n                    punctuation: /^\\(|\\)$/,\n                    string: {\n                        pattern: RegExp(\"^\" + string.source + \"$\"),\n                        alias: \"url\"\n                    }\n                }\n            },\n            selector: {\n                pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + string.source + \")*(?=\\\\s*\\\\{)\"),\n                lookbehind: true\n            },\n            string: {\n                pattern: string,\n                greedy: true\n            },\n            property: {\n                pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n                lookbehind: true\n            },\n            important: /!important\\b/i,\n            function: {\n                pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n                lookbehind: true\n            },\n            punctuation: /[(){};:,]/\n        };\n        Prism.languages.css[\"atrule\"].inside.rest = Prism.languages.css;\n        var markup = Prism.languages.markup;\n        if (markup) {\n            markup.tag.addInlined(\"style\", \"css\");\n            markup.tag.addAttribute(\"style\", \"css\");\n        }\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLElBQUlDLFdBQVcsR0FBRztBQUNsQkQsSUFBSUUsT0FBTyxHQUFHLEVBQUU7QUFDaEIsU0FBU0YsSUFBSUcsS0FBSzs7SUFDZCxVQUFVQSxLQUFLO1FBQ2YsSUFBSUMsU0FDRjtRQUNGRCxNQUFNRSxTQUFTLENBQUNMLEdBQUcsR0FBRztZQUNwQk0sU0FBUztZQUNUQyxRQUFRO2dCQUNOQyxTQUFTO2dCQUNUQyxRQUFRO29CQUNOQyxNQUFNO29CQUNOLDhCQUE4Qjt3QkFDNUJGLFNBQ0U7d0JBQ0ZHLFlBQVk7d0JBQ1pDLE9BQU87b0JBQ1Q7b0JBQ0FDLFNBQVM7d0JBQ1BMLFNBQVM7d0JBQ1RHLFlBQVk7b0JBQ2QsRUFBRSxpQkFBaUI7Z0JBQ3JCO1lBQ0Y7WUFDQUcsS0FBSztnQkFDSCw4Q0FBOEM7Z0JBQzlDTixTQUFTTyxPQUNQLGlCQUNFWCxPQUFPWSxNQUFNLEdBQ2IsTUFDQSw4QkFBOEJBLE1BQU0sR0FDcEMsUUFDRjtnQkFFRkMsUUFBUTtnQkFDUlIsUUFBUTtvQkFDTlMsVUFBVTtvQkFDVkMsYUFBYTtvQkFDYmYsUUFBUTt3QkFDTkksU0FBU08sT0FBTyxNQUFNWCxPQUFPWSxNQUFNLEdBQUc7d0JBQ3RDSixPQUFPO29CQUNUO2dCQUNGO1lBQ0Y7WUFDQVEsVUFBVTtnQkFDUlosU0FBU08sT0FDUCx1REFDRVgsT0FBT1ksTUFBTSxHQUNiO2dCQUVKTCxZQUFZO1lBQ2Q7WUFDQVAsUUFBUTtnQkFDTkksU0FBU0o7Z0JBQ1RhLFFBQVE7WUFDVjtZQUNBSSxVQUFVO2dCQUNSYixTQUNFO2dCQUNGRyxZQUFZO1lBQ2Q7WUFDQVcsV0FBVztZQUNYSixVQUFVO2dCQUNSVixTQUFTO2dCQUNURyxZQUFZO1lBQ2Q7WUFDQVEsYUFBYTtRQUNmO1FBQ0FoQixNQUFNRSxTQUFTLENBQUNMLEdBQUcsQ0FBQyxTQUFTLENBQUNTLE1BQU0sQ0FBQ2MsSUFBSSxHQUFHcEIsTUFBTUUsU0FBUyxDQUFDTCxHQUFHO1FBQy9ELElBQUl3QixTQUFTckIsTUFBTUUsU0FBUyxDQUFDbUIsTUFBTTtRQUNuQyxJQUFJQSxRQUFRO1lBQ1ZBLE9BQU9DLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLFNBQVM7WUFDL0JGLE9BQU9DLEdBQUcsQ0FBQ0UsWUFBWSxDQUFDLFNBQVM7UUFDbkM7SUFDRixHQUFHeEI7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXBsZS1ibG9nLXN0eWxlZC10ZW1wbGF0ZS1mb3ItaGVhZGxlc3MtY21zLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2Nzcy5qcz83YmM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNzc1xuY3NzLmRpc3BsYXlOYW1lID0gJ2NzcydcbmNzcy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNzcyhQcmlzbSkge1xuICA7KGZ1bmN0aW9uIChQcmlzbSkge1xuICAgIHZhciBzdHJpbmcgPVxuICAgICAgLyg/OlwiKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W15cIlxcXFxcXHJcXG5dKSpcInwnKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W14nXFxcXFxcclxcbl0pKicpL1xuICAgIFByaXNtLmxhbmd1YWdlcy5jc3MgPSB7XG4gICAgICBjb21tZW50OiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgICBhdHJ1bGU6IHtcbiAgICAgICAgcGF0dGVybjogL0BbXFx3LV0oPzpbXjt7XFxzXXxcXHMrKD8hW1xcc3tdKSkqKD86O3woPz1cXHMqXFx7KSkvLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBydWxlOiAvXkBbXFx3LV0rLyxcbiAgICAgICAgICAnc2VsZWN0b3ItZnVuY3Rpb24tYXJndW1lbnQnOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOlxuICAgICAgICAgICAgICAvKFxcYnNlbGVjdG9yXFxzKlxcKFxccyooPyFbXFxzKV0pKSg/OlteKClcXHNdfFxccysoPyFbXFxzKV0pfFxcKCg/OlteKCldfFxcKFteKCldKlxcKSkqXFwpKSsoPz1cXHMqXFwpKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgYWxpYXM6ICdzZWxlY3RvcidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGtleXdvcmQ6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oXnxbXlxcdy1dKSg/OmFuZHxub3R8b25seXxvcikoPyFbXFx3LV0pLyxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgICB9IC8vIFNlZSByZXN0IGJlbG93XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1cmw6IHtcbiAgICAgICAgLy8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgJ1xcXFxidXJsXFxcXCgoPzonICtcbiAgICAgICAgICAgIHN0cmluZy5zb3VyY2UgK1xuICAgICAgICAgICAgJ3wnICtcbiAgICAgICAgICAgIC8oPzpbXlxcXFxcXHJcXG4oKVwiJ118XFxcXFtcXHNcXFNdKSovLnNvdXJjZSArXG4gICAgICAgICAgICAnKVxcXFwpJyxcbiAgICAgICAgICAnaSdcbiAgICAgICAgKSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICBmdW5jdGlvbjogL151cmwvaSxcbiAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXCh8XFwpJC8sXG4gICAgICAgICAgc3RyaW5nOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoJ14nICsgc3RyaW5nLnNvdXJjZSArICckJyksXG4gICAgICAgICAgICBhbGlhczogJ3VybCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZWxlY3Rvcjoge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgJyhefFt7fVxcXFxzXSlbXnt9XFxcXHNdKD86W157fTtcIlxcJ1xcXFxzXXxcXFxccysoPyFbXFxcXHN7XSl8JyArXG4gICAgICAgICAgICBzdHJpbmcuc291cmNlICtcbiAgICAgICAgICAgICcpKig/PVxcXFxzKlxcXFx7KSdcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZzoge1xuICAgICAgICBwYXR0ZXJuOiBzdHJpbmcsXG4gICAgICAgIGdyZWVkeTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHByb3BlcnR5OiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhefFteLVxcd1xceEEwLVxcdUZGRkZdKSg/IVxccylbLV9hLXpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbLVxcd1xceEEwLVxcdUZGRkZdKSooPz1cXHMqOikvaSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGltcG9ydGFudDogLyFpbXBvcnRhbnRcXGIvaSxcbiAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXi1hLXowLTldKVstYS16MC05XSsoPz1cXCgpL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBwdW5jdHVhdGlvbjogL1soKXt9OzosXS9cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmNzc1snYXRydWxlJ10uaW5zaWRlLnJlc3QgPSBQcmlzbS5sYW5ndWFnZXMuY3NzXG4gICAgdmFyIG1hcmt1cCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXBcbiAgICBpZiAobWFya3VwKSB7XG4gICAgICBtYXJrdXAudGFnLmFkZElubGluZWQoJ3N0eWxlJywgJ2NzcycpXG4gICAgICBtYXJrdXAudGFnLmFkZEF0dHJpYnV0ZSgnc3R5bGUnLCAnY3NzJylcbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3MiLCJkaXNwbGF5TmFtZSIsImFsaWFzZXMiLCJQcmlzbSIsInN0cmluZyIsImxhbmd1YWdlcyIsImNvbW1lbnQiLCJhdHJ1bGUiLCJwYXR0ZXJuIiwiaW5zaWRlIiwicnVsZSIsImxvb2tiZWhpbmQiLCJhbGlhcyIsImtleXdvcmQiLCJ1cmwiLCJSZWdFeHAiLCJzb3VyY2UiLCJncmVlZHkiLCJmdW5jdGlvbiIsInB1bmN0dWF0aW9uIiwic2VsZWN0b3IiLCJwcm9wZXJ0eSIsImltcG9ydGFudCIsInJlc3QiLCJtYXJrdXAiLCJ0YWciLCJhZGRJbmxpbmVkIiwiYWRkQXR0cmlidXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/javascript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/javascript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = javascript;\njavascript.displayName = \"javascript\";\njavascript.aliases = [\n    \"js\"\n];\nfunction javascript(Prism) {\n    Prism.languages.javascript = Prism.languages.extend(\"clike\", {\n        \"class-name\": [\n            Prism.languages.clike[\"class-name\"],\n            {\n                pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n                lookbehind: true\n            }\n        ],\n        keyword: [\n            {\n                pattern: /((?:^|\\})\\s*)catch\\b/,\n                lookbehind: true\n            },\n            {\n                pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n                lookbehind: true\n            }\n        ],\n        // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n        function: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n        number: {\n            pattern: RegExp(/(^|[^\\w$])/.source + \"(?:\" + // constant\n            (/NaN|Infinity/.source + \"|\" + // binary integer\n            /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + // octal integer\n            /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + // hexadecimal integer\n            /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + // decimal bigint\n            /\\d+(?:_\\d+)*n/.source + \"|\" + // decimal number (integer or float) but no bigint\n            /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + \")\" + /(?![\\w$])/.source),\n            lookbehind: true\n        },\n        operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n    });\n    Prism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n    Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n        regex: {\n            // eslint-disable-next-line regexp/no-dupe-characters-character-class\n            pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"regex-source\": {\n                    pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                    lookbehind: true,\n                    alias: \"language-regex\",\n                    inside: Prism.languages.regex\n                },\n                \"regex-delimiter\": /^\\/|\\/$/,\n                \"regex-flags\": /^[a-z]+$/\n            }\n        },\n        // This must be declared before keyword because we use \"function\" inside the look-forward\n        \"function-variable\": {\n            pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n            alias: \"function\"\n        },\n        parameter: [\n            {\n                pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            },\n            {\n                pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n                lookbehind: true,\n                inside: Prism.languages.javascript\n            }\n        ],\n        constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n    });\n    Prism.languages.insertBefore(\"javascript\", \"string\", {\n        hashbang: {\n            pattern: /^#!.*/,\n            greedy: true,\n            alias: \"comment\"\n        },\n        \"template-string\": {\n            pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n            greedy: true,\n            inside: {\n                \"template-punctuation\": {\n                    pattern: /^`|`$/,\n                    alias: \"string\"\n                },\n                interpolation: {\n                    pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                    lookbehind: true,\n                    inside: {\n                        \"interpolation-punctuation\": {\n                            pattern: /^\\$\\{|\\}$/,\n                            alias: \"punctuation\"\n                        },\n                        rest: Prism.languages.javascript\n                    }\n                },\n                string: /[\\s\\S]+/\n            }\n        },\n        \"string-property\": {\n            pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n            lookbehind: true,\n            greedy: true,\n            alias: \"property\"\n        }\n    });\n    Prism.languages.insertBefore(\"javascript\", \"operator\", {\n        \"literal-property\": {\n            pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n            lookbehind: true,\n            alias: \"property\"\n        }\n    });\n    if (Prism.languages.markup) {\n        Prism.languages.markup.tag.addInlined(\"script\", \"javascript\") // add attribute support for all DOM events.\n        ;\n        // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n        Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\");\n    }\n    Prism.languages.js = Prism.languages.javascript;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/json.js":
/*!*********************************************!*\
  !*** ./node_modules/refractor/lang/json.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports = json;\njson.displayName = \"json\";\njson.aliases = [\n    \"webmanifest\"\n];\nfunction json(Prism) {\n    // https://www.json.org/json-en.html\n    Prism.languages.json = {\n        property: {\n            pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n            lookbehind: true,\n            greedy: true\n        },\n        string: {\n            pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n            lookbehind: true,\n            greedy: true\n        },\n        comment: {\n            pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            greedy: true\n        },\n        number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n        punctuation: /[{}[\\],]/,\n        operator: /:/,\n        boolean: /\\b(?:false|true)\\b/,\n        null: {\n            pattern: /\\bnull\\b/,\n            alias: \"keyword\"\n        }\n    };\n    Prism.languages.webmanifest = Prism.languages.json;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanNvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxLQUFLQyxXQUFXLEdBQUc7QUFDbkJELEtBQUtFLE9BQU8sR0FBRztJQUFDO0NBQWM7QUFDOUIsU0FBU0YsS0FBS0csS0FBSztJQUNqQixvQ0FBb0M7SUFDcENBLE1BQU1DLFNBQVMsQ0FBQ0osSUFBSSxHQUFHO1FBQ3JCSyxVQUFVO1lBQ1JDLFNBQVM7WUFDVEMsWUFBWTtZQUNaQyxRQUFRO1FBQ1Y7UUFDQUMsUUFBUTtZQUNOSCxTQUFTO1lBQ1RDLFlBQVk7WUFDWkMsUUFBUTtRQUNWO1FBQ0FFLFNBQVM7WUFDUEosU0FBUztZQUNURSxRQUFRO1FBQ1Y7UUFDQUcsUUFBUTtRQUNSQyxhQUFhO1FBQ2JDLFVBQVU7UUFDVkMsU0FBUztRQUNUQyxNQUFNO1lBQ0pULFNBQVM7WUFDVFUsT0FBTztRQUNUO0lBQ0Y7SUFDQWIsTUFBTUMsU0FBUyxDQUFDYSxXQUFXLEdBQUdkLE1BQU1DLFNBQVMsQ0FBQ0osSUFBSTtBQUNwRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXBsZS1ibG9nLXN0eWxlZC10ZW1wbGF0ZS1mb3ItaGVhZGxlc3MtY21zLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2pzb24uanM/YjczMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBqc29uXG5qc29uLmRpc3BsYXlOYW1lID0gJ2pzb24nXG5qc29uLmFsaWFzZXMgPSBbJ3dlYm1hbmlmZXN0J11cbmZ1bmN0aW9uIGpzb24oUHJpc20pIHtcbiAgLy8gaHR0cHM6Ly93d3cuanNvbi5vcmcvanNvbi1lbi5odG1sXG4gIFByaXNtLmxhbmd1YWdlcy5qc29uID0ge1xuICAgIHByb3BlcnR5OiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcIig/OlxcXFwufFteXFxcXFwiXFxyXFxuXSkqXCIoPz1cXHMqOikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcIig/OlxcXFwufFteXFxcXFwiXFxyXFxuXSkqXCIoPyFcXHMqOikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgY29tbWVudDoge1xuICAgICAgcGF0dGVybjogL1xcL1xcLy4qfFxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICBudW1iZXI6IC8tP1xcYlxcZCsoPzpcXC5cXGQrKT8oPzplWystXT9cXGQrKT9cXGIvaSxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF0sXS8sXG4gICAgb3BlcmF0b3I6IC86LyxcbiAgICBib29sZWFuOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgIG51bGw6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJudWxsXFxiLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9XG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLndlYm1hbmlmZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLmpzb25cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwianNvbiIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwicHJvcGVydHkiLCJwYXR0ZXJuIiwibG9va2JlaGluZCIsImdyZWVkeSIsInN0cmluZyIsImNvbW1lbnQiLCJudW1iZXIiLCJwdW5jdHVhdGlvbiIsIm9wZXJhdG9yIiwiYm9vbGVhbiIsIm51bGwiLCJhbGlhcyIsIndlYm1hbmlmZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/jsx.js":
/*!********************************************!*\
  !*** ./node_modules/refractor/lang/jsx.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nmodule.exports = jsx;\njsx.displayName = \"jsx\";\njsx.aliases = [];\nfunction jsx(Prism) {\n    ;\n    (function(Prism) {\n        var javascript = Prism.util.clone(Prism.languages.javascript);\n        var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n        var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n        var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n        /**\n     * @param {string} source\n     * @param {string} [flags]\n     */ function re(source, flags) {\n            source = source.replace(/<S>/g, function() {\n                return space;\n            }).replace(/<BRACES>/g, function() {\n                return braces;\n            }).replace(/<SPREAD>/g, function() {\n                return spread;\n            });\n            return RegExp(source, flags);\n        }\n        spread = re(spread).source;\n        Prism.languages.jsx = Prism.languages.extend(\"markup\", javascript);\n        Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n        Prism.languages.jsx.tag.inside[\"tag\"].pattern = /^<\\/?[^\\s>\\/]*/;\n        Prism.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n        Prism.languages.jsx.tag.inside[\"tag\"].inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n        Prism.languages.jsx.tag.inside[\"comment\"] = javascript[\"comment\"];\n        Prism.languages.insertBefore(\"inside\", \"attr-name\", {\n            spread: {\n                pattern: re(/<SPREAD>/.source),\n                inside: Prism.languages.jsx\n            }\n        }, Prism.languages.jsx.tag);\n        Prism.languages.insertBefore(\"inside\", \"special-attr\", {\n            script: {\n                // Allow for two levels of nesting\n                pattern: re(/=<BRACES>/.source),\n                alias: \"language-javascript\",\n                inside: {\n                    \"script-punctuation\": {\n                        pattern: /^=(?=\\{)/,\n                        alias: \"punctuation\"\n                    },\n                    rest: Prism.languages.jsx\n                }\n            }\n        }, Prism.languages.jsx.tag) // The following will handle plain text inside tags\n        ;\n        var stringifyToken = function(token) {\n            if (!token) {\n                return \"\";\n            }\n            if (typeof token === \"string\") {\n                return token;\n            }\n            if (typeof token.content === \"string\") {\n                return token.content;\n            }\n            return token.content.map(stringifyToken).join(\"\");\n        };\n        var walkTokens = function(tokens) {\n            var openedTags = [];\n            for(var i = 0; i < tokens.length; i++){\n                var token = tokens[i];\n                var notTagNorBrace = false;\n                if (typeof token !== \"string\") {\n                    if (token.type === \"tag\" && token.content[0] && token.content[0].type === \"tag\") {\n                        // We found a tag, now find its kind\n                        if (token.content[0].content[0].content === \"</\") {\n                            // Closing tag\n                            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                                // Pop matching opening tag\n                                openedTags.pop();\n                            }\n                        } else {\n                            if (token.content[token.content.length - 1].content === \"/>\") {\n                            // Autoclosed tag, ignore\n                            } else {\n                                // Opening tag\n                                openedTags.push({\n                                    tagName: stringifyToken(token.content[0].content[1]),\n                                    openedBraces: 0\n                                });\n                            }\n                        }\n                    } else if (openedTags.length > 0 && token.type === \"punctuation\" && token.content === \"{\") {\n                        // Here we might have entered a JSX context inside a tag\n                        openedTags[openedTags.length - 1].openedBraces++;\n                    } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === \"punctuation\" && token.content === \"}\") {\n                        // Here we might have left a JSX context inside a tag\n                        openedTags[openedTags.length - 1].openedBraces--;\n                    } else {\n                        notTagNorBrace = true;\n                    }\n                }\n                if (notTagNorBrace || typeof token === \"string\") {\n                    if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n                        // Here we are inside a tag, and not inside a JSX context.\n                        // That's plain text: drop any tokens matched.\n                        var plainText = stringifyToken(token) // And merge text with adjacent text\n                        ;\n                        if (i < tokens.length - 1 && (typeof tokens[i + 1] === \"string\" || tokens[i + 1].type === \"plain-text\")) {\n                            plainText += stringifyToken(tokens[i + 1]);\n                            tokens.splice(i + 1, 1);\n                        }\n                        if (i > 0 && (typeof tokens[i - 1] === \"string\" || tokens[i - 1].type === \"plain-text\")) {\n                            plainText = stringifyToken(tokens[i - 1]) + plainText;\n                            tokens.splice(i - 1, 1);\n                            i--;\n                        }\n                        tokens[i] = new Prism.Token(\"plain-text\", plainText, null, plainText);\n                    }\n                }\n                if (token.content && typeof token.content !== \"string\") {\n                    walkTokens(token.content);\n                }\n            }\n        };\n        Prism.hooks.add(\"after-tokenize\", function(env) {\n            if (env.language !== \"jsx\" && env.language !== \"tsx\") {\n                return;\n            }\n            walkTokens(env.tokens);\n        });\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/jsx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/markup.js":
/*!***********************************************!*\
  !*** ./node_modules/refractor/lang/markup.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nmodule.exports = markup;\nmarkup.displayName = \"markup\";\nmarkup.aliases = [\n    \"html\",\n    \"mathml\",\n    \"svg\",\n    \"xml\",\n    \"ssml\",\n    \"atom\",\n    \"rss\"\n];\nfunction markup(Prism) {\n    Prism.languages.markup = {\n        comment: {\n            pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n            greedy: true\n        },\n        prolog: {\n            pattern: /<\\?[\\s\\S]+?\\?>/,\n            greedy: true\n        },\n        doctype: {\n            // https://www.w3.org/TR/xml/#NT-doctypedecl\n            pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n            greedy: true,\n            inside: {\n                \"internal-subset\": {\n                    pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: null // see below\n                },\n                string: {\n                    pattern: /\"[^\"]*\"|'[^']*'/,\n                    greedy: true\n                },\n                punctuation: /^<!|>$|[[\\]]/,\n                \"doctype-tag\": /^DOCTYPE/i,\n                name: /[^\\s<>'\"]+/\n            }\n        },\n        cdata: {\n            pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n            greedy: true\n        },\n        tag: {\n            pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n            greedy: true,\n            inside: {\n                tag: {\n                    pattern: /^<\\/?[^\\s>\\/]+/,\n                    inside: {\n                        punctuation: /^<\\/?/,\n                        namespace: /^[^\\s>\\/:]+:/\n                    }\n                },\n                \"special-attr\": [],\n                \"attr-value\": {\n                    pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                    inside: {\n                        punctuation: [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                },\n                punctuation: /\\/?>/,\n                \"attr-name\": {\n                    pattern: /[^\\s>\\/]+/,\n                    inside: {\n                        namespace: /^[^\\s>\\/:]+:/\n                    }\n                }\n            }\n        },\n        entity: [\n            {\n                pattern: /&[\\da-z]{1,8};/i,\n                alias: \"named-entity\"\n            },\n            /&#x?[\\da-f]{1,8};/i\n        ]\n    };\n    Prism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = Prism.languages.markup[\"entity\"];\n    Prism.languages.markup[\"doctype\"].inside[\"internal-subset\"].inside = Prism.languages.markup // Plugin to make entity title show the real entity, idea by Roman Komarov\n    ;\n    Prism.hooks.add(\"wrap\", function(env) {\n        if (env.type === \"entity\") {\n            env.attributes[\"title\"] = env.content.value.replace(/&amp;/, \"&\");\n        }\n    });\n    Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n        /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */ value: function addInlined(tagName, lang) {\n            var includedCdataInside = {};\n            includedCdataInside[\"language-\" + lang] = {\n                pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n                lookbehind: true,\n                inside: Prism.languages[lang]\n            };\n            includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n            var inside = {\n                \"included-cdata\": {\n                    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                    inside: includedCdataInside\n                }\n            };\n            inside[\"language-\" + lang] = {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages[lang]\n            };\n            var def = {};\n            def[tagName] = {\n                pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n                    return tagName;\n                }), \"i\"),\n                lookbehind: true,\n                greedy: true,\n                inside: inside\n            };\n            Prism.languages.insertBefore(\"markup\", \"cdata\", def);\n        }\n    });\n    Object.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n        /**\n     * Adds an pattern to highlight languages embedded in HTML attributes.\n     *\n     * An example of an inlined language is CSS with `style` attributes.\n     *\n     * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addAttribute('style', 'css');\n     */ value: function(attrName, lang) {\n            Prism.languages.markup.tag.inside[\"special-attr\"].push({\n                pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + attrName + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n                lookbehind: true,\n                inside: {\n                    \"attr-name\": /^[^\\s=]+/,\n                    \"attr-value\": {\n                        pattern: /=[\\s\\S]+/,\n                        inside: {\n                            value: {\n                                pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                                lookbehind: true,\n                                alias: [\n                                    lang,\n                                    \"language-\" + lang\n                                ],\n                                inside: Prism.languages[lang]\n                            },\n                            punctuation: [\n                                {\n                                    pattern: /^=/,\n                                    alias: \"attr-equals\"\n                                },\n                                /\"|'/\n                            ]\n                        }\n                    }\n                }\n            });\n        }\n    });\n    Prism.languages.html = Prism.languages.markup;\n    Prism.languages.mathml = Prism.languages.markup;\n    Prism.languages.svg = Prism.languages.markup;\n    Prism.languages.xml = Prism.languages.extend(\"markup\", {});\n    Prism.languages.ssml = Prism.languages.xml;\n    Prism.languages.atom = Prism.languages.xml;\n    Prism.languages.rss = Prism.languages.xml;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/markup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/refractor/lang/typescript.js":
/*!***************************************************!*\
  !*** ./node_modules/refractor/lang/typescript.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = typescript;\ntypescript.displayName = \"typescript\";\ntypescript.aliases = [\n    \"ts\"\n];\nfunction typescript(Prism) {\n    ;\n    (function(Prism) {\n        Prism.languages.typescript = Prism.languages.extend(\"javascript\", {\n            \"class-name\": {\n                pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n                lookbehind: true,\n                greedy: true,\n                inside: null // see below\n            },\n            builtin: /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n        }) // The keywords TypeScript adds to JavaScript\n        ;\n        Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, /\\btype\\b(?=\\s*(?:[\\{*]|$))/) // doesn't work with TS because TS is too complex\n        ;\n        delete Prism.languages.typescript[\"parameter\"];\n        delete Prism.languages.typescript[\"literal-property\"] // a version of typescript specifically for highlighting types\n        ;\n        var typeInside = Prism.languages.extend(\"typescript\", {});\n        delete typeInside[\"class-name\"];\n        Prism.languages.typescript[\"class-name\"].inside = typeInside;\n        Prism.languages.insertBefore(\"typescript\", \"function\", {\n            decorator: {\n                pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n                inside: {\n                    at: {\n                        pattern: /^@/,\n                        alias: \"operator\"\n                    },\n                    function: /^[\\s\\S]+/\n                }\n            },\n            \"generic-function\": {\n                // e.g. foo<T extends \"bar\" | \"baz\">( ...\n                pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n                greedy: true,\n                inside: {\n                    function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n                    generic: {\n                        pattern: /<[\\s\\S]+/,\n                        // everything after the first <\n                        alias: \"class-name\",\n                        inside: typeInside\n                    }\n                }\n            }\n        });\n        Prism.languages.ts = Prism.languages.typescript;\n    })(Prism);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvdHlwZXNjcmlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxXQUFXQyxXQUFXLEdBQUc7QUFDekJELFdBQVdFLE9BQU8sR0FBRztJQUFDO0NBQUs7QUFDM0IsU0FBU0YsV0FBV0csS0FBSzs7SUFDckIsVUFBVUEsS0FBSztRQUNmQSxNQUFNQyxTQUFTLENBQUNKLFVBQVUsR0FBR0csTUFBTUMsU0FBUyxDQUFDQyxNQUFNLENBQUMsY0FBYztZQUNoRSxjQUFjO2dCQUNaQyxTQUNFO2dCQUNGQyxZQUFZO2dCQUNaQyxRQUFRO2dCQUNSQyxRQUFRLEtBQUssWUFBWTtZQUMzQjtZQUNBQyxTQUNFO1FBQ0osR0FBRyw2Q0FBNkM7O1FBQ2hEUCxNQUFNQyxTQUFTLENBQUNKLFVBQVUsQ0FBQ1csT0FBTyxDQUFDQyxJQUFJLENBQ3JDLHNEQUNBLDRGQUNBLDhCQUNBLGlEQUFpRDs7UUFDbkQsT0FBT1QsTUFBTUMsU0FBUyxDQUFDSixVQUFVLENBQUMsWUFBWTtRQUM5QyxPQUFPRyxNQUFNQyxTQUFTLENBQUNKLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyw4REFBOEQ7O1FBQ3BILElBQUlhLGFBQWFWLE1BQU1DLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUN2RCxPQUFPUSxVQUFVLENBQUMsYUFBYTtRQUMvQlYsTUFBTUMsU0FBUyxDQUFDSixVQUFVLENBQUMsYUFBYSxDQUFDUyxNQUFNLEdBQUdJO1FBQ2xEVixNQUFNQyxTQUFTLENBQUNVLFlBQVksQ0FBQyxjQUFjLFlBQVk7WUFDckRDLFdBQVc7Z0JBQ1RULFNBQVM7Z0JBQ1RHLFFBQVE7b0JBQ05PLElBQUk7d0JBQ0ZWLFNBQVM7d0JBQ1RXLE9BQU87b0JBQ1Q7b0JBQ0FDLFVBQVU7Z0JBQ1o7WUFDRjtZQUNBLG9CQUFvQjtnQkFDbEIseUNBQXlDO2dCQUN6Q1osU0FDRTtnQkFDRkUsUUFBUTtnQkFDUkMsUUFBUTtvQkFDTlMsVUFBVTtvQkFDVkMsU0FBUzt3QkFDUGIsU0FBUzt3QkFDVCwrQkFBK0I7d0JBQy9CVyxPQUFPO3dCQUNQUixRQUFRSTtvQkFDVjtnQkFDRjtZQUNGO1FBQ0Y7UUFDQVYsTUFBTUMsU0FBUyxDQUFDZ0IsRUFBRSxHQUFHakIsTUFBTUMsU0FBUyxDQUFDSixVQUFVO0lBQ2pELEdBQUdHO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaW1wbGUtYmxvZy1zdHlsZWQtdGVtcGxhdGUtZm9yLWhlYWRsZXNzLWNtcy8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy90eXBlc2NyaXB0LmpzPzVjMzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZXNjcmlwdFxudHlwZXNjcmlwdC5kaXNwbGF5TmFtZSA9ICd0eXBlc2NyaXB0J1xudHlwZXNjcmlwdC5hbGlhc2VzID0gWyd0cyddXG5mdW5jdGlvbiB0eXBlc2NyaXB0KFByaXNtKSB7XG4gIDsoZnVuY3Rpb24gKFByaXNtKSB7XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqYXZhc2NyaXB0Jywge1xuICAgICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICAgIHBhdHRlcm46XG4gICAgICAgICAgLyhcXGIoPzpjbGFzc3xleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxpbnRlcmZhY2V8bmV3fHR5cGUpXFxzKykoPyFrZXlvZlxcYikoPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD86XFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj4pPy8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuICAgICAgfSxcbiAgICAgIGJ1aWx0aW46XG4gICAgICAgIC9cXGIoPzpBcnJheXxGdW5jdGlvbnxQcm9taXNlfGFueXxib29sZWFufGNvbnNvbGV8bmV2ZXJ8bnVtYmVyfHN0cmluZ3xzeW1ib2x8dW5rbm93bilcXGIvXG4gICAgfSkgLy8gVGhlIGtleXdvcmRzIFR5cGVTY3JpcHQgYWRkcyB0byBKYXZhU2NyaXB0XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQua2V5d29yZC5wdXNoKFxuICAgICAgL1xcYig/OmFic3RyYWN0fGRlY2xhcmV8aXN8a2V5b2Z8cmVhZG9ubHl8cmVxdWlyZSlcXGIvLCAvLyBrZXl3b3JkcyB0aGF0IGhhdmUgdG8gYmUgZm9sbG93ZWQgYnkgYW4gaWRlbnRpZmllclxuICAgICAgL1xcYig/OmFzc2VydHN8aW5mZXJ8aW50ZXJmYWNlfG1vZHVsZXxuYW1lc3BhY2V8dHlwZSlcXGIoPz1cXHMqKD86W3tfJGEtekEtWlxceEEwLVxcdUZGRkZdfCQpKS8sIC8vIFRoaXMgaXMgZm9yIGBpbXBvcnQgdHlwZSAqLCB7fWBcbiAgICAgIC9cXGJ0eXBlXFxiKD89XFxzKig/OltcXHsqXXwkKSkvXG4gICAgKSAvLyBkb2Vzbid0IHdvcmsgd2l0aCBUUyBiZWNhdXNlIFRTIGlzIHRvbyBjb21wbGV4XG4gICAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0WydwYXJhbWV0ZXInXVxuICAgIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdFsnbGl0ZXJhbC1wcm9wZXJ0eSddIC8vIGEgdmVyc2lvbiBvZiB0eXBlc2NyaXB0IHNwZWNpZmljYWxseSBmb3IgaGlnaGxpZ2h0aW5nIHR5cGVzXG4gICAgdmFyIHR5cGVJbnNpZGUgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCd0eXBlc2NyaXB0Jywge30pXG4gICAgZGVsZXRlIHR5cGVJbnNpZGVbJ2NsYXNzLW5hbWUnXVxuICAgIFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0WydjbGFzcy1uYW1lJ10uaW5zaWRlID0gdHlwZUluc2lkZVxuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3R5cGVzY3JpcHQnLCAnZnVuY3Rpb24nLCB7XG4gICAgICBkZWNvcmF0b3I6IHtcbiAgICAgICAgcGF0dGVybjogL0BbJFxcd1xceEEwLVxcdUZGRkZdKy8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGF0OiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXkAvLFxuICAgICAgICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uOiAvXltcXHNcXFNdKy9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdnZW5lcmljLWZ1bmN0aW9uJzoge1xuICAgICAgICAvLyBlLmcuIGZvbzxUIGV4dGVuZHMgXCJiYXJcIiB8IFwiYmF6XCI+KCAuLi5cbiAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAvIz8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqXFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj4oPz1cXHMqXFwoKS8sXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9eIz8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqLyxcbiAgICAgICAgICBnZW5lcmljOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvPFtcXHNcXFNdKy8sXG4gICAgICAgICAgICAvLyBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCA8XG4gICAgICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnLFxuICAgICAgICAgICAgaW5zaWRlOiB0eXBlSW5zaWRlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICBQcmlzbS5sYW5ndWFnZXMudHMgPSBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdFxuICB9KShQcmlzbSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidHlwZXNjcmlwdCIsImRpc3BsYXlOYW1lIiwiYWxpYXNlcyIsIlByaXNtIiwibGFuZ3VhZ2VzIiwiZXh0ZW5kIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJncmVlZHkiLCJpbnNpZGUiLCJidWlsdGluIiwia2V5d29yZCIsInB1c2giLCJ0eXBlSW5zaWRlIiwiaW5zZXJ0QmVmb3JlIiwiZGVjb3JhdG9yIiwiYXQiLCJhbGlhcyIsImZ1bmN0aW9uIiwiZ2VuZXJpYyIsInRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/refractor/lang/typescript.js\n");

/***/ })

};
;