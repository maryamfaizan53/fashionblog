"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@xstate";
exports.ids = ["vendor-chunks/@xstate"];
exports.modules = {

/***/ "(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@xstate/react/dist/xstate-react.development.esm.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActorContext: () => (/* binding */ createActorContext),\n/* harmony export */   shallowEqual: () => (/* binding */ shallowEqual),\n/* harmony export */   useActor: () => (/* binding */ useActor),\n/* harmony export */   useActorRef: () => (/* binding */ useActorRef),\n/* harmony export */   useMachine: () => (/* binding */ useMachine),\n/* harmony export */   useSelector: () => (/* binding */ useSelector)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var use_isomorphic_layout_effect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-isomorphic-layout-effect */ \"(ssr)/./node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var use_sync_external_store_shim_with_selector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector */ \"(ssr)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var use_sync_external_store_shim__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! use-sync-external-store/shim */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n\n\n\n\n\n\nconst forEachActor = (actorRef, callback)=>{\n    callback(actorRef);\n    const children = actorRef.getSnapshot().children;\n    if (children) {\n        Object.values(children).forEach((child)=>{\n            forEachActor(child, callback);\n        });\n    }\n};\nfunction stopRootWithRehydration(actorRef) {\n    // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n    // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n    // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n    // it also just allows us to end up with a somewhat more predictable behavior for the users\n    const persistedSnapshots = [];\n    forEachActor(actorRef, (ref)=>{\n        persistedSnapshots.push([\n            ref,\n            ref.getSnapshot()\n        ]);\n        // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n        // React reconnects its subscribers (from the useSyncExternalStore) on its own\n        // and userland subscibers should basically always do the same anyway\n        // as each subscription should have its own cleanup logic and that should be called each such reconnect\n        ref.observers = new Set();\n    });\n    const systemSnapshot = actorRef.system.getSnapshot?.();\n    actorRef.stop();\n    actorRef.system._snapshot = systemSnapshot;\n    persistedSnapshots.forEach(([ref, snapshot])=>{\n        ref._processingStatus = 0;\n        ref._snapshot = snapshot;\n    });\n}\nfunction useIdleActorRef(logic, ...[options]) {\n    let [[currentConfig, actorRef], setCurrent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const actorRef = (0,xstate__WEBPACK_IMPORTED_MODULE_4__.A)(logic, options);\n        return [\n            logic.config,\n            actorRef\n        ];\n    });\n    if (logic.config !== currentConfig) {\n        const newActorRef = (0,xstate__WEBPACK_IMPORTED_MODULE_4__.A)(logic, {\n            ...options,\n            snapshot: actorRef.getPersistedSnapshot({\n                __unsafeAllowInlineActors: true\n            })\n        });\n        setCurrent([\n            logic.config,\n            newActorRef\n        ]);\n        actorRef = newActorRef;\n    }\n    // TODO: consider using `useAsapEffect` that would do this in `useInsertionEffect` is that's available\n    (0,use_isomorphic_layout_effect__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(()=>{\n        actorRef.logic.implementations = logic.implementations;\n    });\n    return actorRef;\n}\nfunction useActorRef(machine, ...[options, observerOrListener]) {\n    const actorRef = useIdleActorRef(machine, options);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!observerOrListener) {\n            return;\n        }\n        const sub = actorRef.subscribe((0,xstate__WEBPACK_IMPORTED_MODULE_4__.L)(observerOrListener));\n        return ()=>{\n            sub.unsubscribe();\n        };\n    }, [\n        observerOrListener\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        actorRef.start();\n        return ()=>{\n            stopRootWithRehydration(actorRef);\n        };\n    }, [\n        actorRef\n    ]);\n    return actorRef;\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\nfunction useSelector(actor, selector, compare = defaultCompare) {\n    const subscribe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((handleStoreChange)=>{\n        if (!actor) {\n            return ()=>{};\n        }\n        const { unsubscribe } = actor.subscribe(handleStoreChange);\n        return unsubscribe;\n    }, [\n        actor\n    ]);\n    const boundGetSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>actor?.getSnapshot(), [\n        actor\n    ]);\n    const selectedSnapshot = (0,use_sync_external_store_shim_with_selector__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStoreWithSelector)(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);\n    return selectedSnapshot;\n}\nfunction createActorContext(actorLogic, actorOptions) {\n    const ReactContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n    const OriginalProvider = ReactContext.Provider;\n    function Provider({ children, logic: providedLogic = actorLogic, machine, options: providedOptions }) {\n        if (machine) {\n            throw new Error(`The \"machine\" prop has been deprecated. Please use \"logic\" instead.`);\n        }\n        const actor = useActorRef(providedLogic, {\n            ...actorOptions,\n            ...providedOptions\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(OriginalProvider, {\n            value: actor,\n            children\n        });\n    }\n    // TODO: add properties to actor ref to make more descriptive\n    Provider.displayName = `ActorProvider`;\n    function useContext() {\n        const actor = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ReactContext);\n        if (!actor) {\n            throw new Error(`You used a hook from \"${Provider.displayName}\" but it's not inside a <${Provider.displayName}> component.`);\n        }\n        return actor;\n    }\n    function useSelector$1(selector, compare) {\n        const actor = useContext();\n        return useSelector(actor, selector, compare);\n    }\n    return {\n        Provider: Provider,\n        useActorRef: useContext,\n        useSelector: useSelector$1\n    };\n}\n// From https://github.com/reduxjs/react-redux/blob/720f0ba79236cdc3e1115f4ef9a7760a21784b48/src/utils/shallowEqual.ts\nfunction is(x, y) {\n    if (x === y) {\n        return x !== 0 || y !== 0 || 1 / x === 1 / y;\n    } else {\n        return x !== x && y !== y;\n    }\n}\nfunction shallowEqual(objA, objB) {\n    if (is(objA, objB)) return true;\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false;\n    }\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n    if (keysA.length !== keysB.length) return false;\n    for(let i = 0; i < keysA.length; i++){\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction useActor(logic, ...[options]) {\n    if (!!logic && \"send\" in logic && typeof logic.send === \"function\") {\n        throw new Error(`useActor() expects actor logic (e.g. a machine), but received an ActorRef. Use the useSelector(actorRef, ...) hook instead to read the ActorRef's snapshot.`);\n    }\n    const actorRef = useIdleActorRef(logic, options);\n    const getSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return actorRef.getSnapshot();\n    }, [\n        actorRef\n    ]);\n    const subscribe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((handleStoreChange)=>{\n        const { unsubscribe } = actorRef.subscribe(handleStoreChange);\n        return unsubscribe;\n    }, [\n        actorRef\n    ]);\n    const actorSnapshot = (0,use_sync_external_store_shim__WEBPACK_IMPORTED_MODULE_3__.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        actorRef.start();\n        return ()=>{\n            stopRootWithRehydration(actorRef);\n        };\n    }, [\n        actorRef\n    ]);\n    return [\n        actorSnapshot,\n        actorRef.send,\n        actorRef\n    ];\n}\n/** @alias useActor */ function useMachine(machine, ...[options]) {\n    return useActor(machine, options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHhzdGF0ZS9yZWFjdC9kaXN0L3hzdGF0ZS1yZWFjdC5kZXZlbG9wbWVudC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQzBCO0FBQ1k7QUFDcEI7QUFDNkM7QUFDMUI7QUFFcEUsTUFBTVMsZUFBZSxDQUFDQyxVQUFVQztJQUM5QkEsU0FBU0Q7SUFDVCxNQUFNRSxXQUFXRixTQUFTRyxXQUFXLEdBQUdELFFBQVE7SUFDaEQsSUFBSUEsVUFBVTtRQUNaRSxPQUFPQyxNQUFNLENBQUNILFVBQVVJLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDOUJSLGFBQWFRLE9BQU9OO1FBQ3RCO0lBQ0Y7QUFDRjtBQUNBLFNBQVNPLHdCQUF3QlIsUUFBUTtJQUN2Qyw0R0FBNEc7SUFDNUcsNkVBQTZFO0lBQzdFLGdHQUFnRztJQUNoRywyRkFBMkY7SUFDM0YsTUFBTVMscUJBQXFCLEVBQUU7SUFDN0JWLGFBQWFDLFVBQVVVLENBQUFBO1FBQ3JCRCxtQkFBbUJFLElBQUksQ0FBQztZQUFDRDtZQUFLQSxJQUFJUCxXQUFXO1NBQUc7UUFDaEQsa0dBQWtHO1FBQ2xHLDhFQUE4RTtRQUM5RSxxRUFBcUU7UUFDckUsdUdBQXVHO1FBQ3ZHTyxJQUFJRSxTQUFTLEdBQUcsSUFBSUM7SUFDdEI7SUFDQSxNQUFNQyxpQkFBaUJkLFNBQVNlLE1BQU0sQ0FBQ1osV0FBVztJQUNsREgsU0FBU2dCLElBQUk7SUFDYmhCLFNBQVNlLE1BQU0sQ0FBQ0UsU0FBUyxHQUFHSDtJQUM1QkwsbUJBQW1CSCxPQUFPLENBQUMsQ0FBQyxDQUFDSSxLQUFLUSxTQUFTO1FBQ3pDUixJQUFJUyxpQkFBaUIsR0FBRztRQUN4QlQsSUFBSU8sU0FBUyxHQUFHQztJQUNsQjtBQUNGO0FBRUEsU0FBU0UsZ0JBQWdCQyxLQUFLLEVBQUUsR0FBRyxDQUFDQyxRQUFRO0lBQzFDLElBQUksQ0FBQyxDQUFDQyxlQUFldkIsU0FBUyxFQUFFd0IsV0FBVyxHQUFHaEMs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LENBQUNDLFFBQVE7SUFDbkMsSUFBSSxDQUFDLENBQUNELFNBQVMsVUFBVUEsU0FBUyxPQUFPQSxNQUFNd0QsSUFBSSxLQUFLLFlBQVk7UUFDbEUsTUFBTSxJQUFJckIsTUFBTSxDQUFDLDJKQUEySixDQUFDO0lBQy9LO0lBQ0EsTUFBTXhELFdBQVdvQixnQkFBZ0JDLE9BQU9DO0lBQ3hDLE1BQU1uQixjQUFjVixrREFBV0EsQ0FBQztRQUM5QixPQUFPTyxTQUFTRyxXQUFXO0lBQzdCLEdBQUc7UUFBQ0g7S0FBUztJQUNiLE1BQU1rQyxZQUFZekMsa0RBQVdBLENBQUNtRCxDQUFBQTtRQUM1QixNQUFNLEVBQ0pULFdBQVcsRUFDWixHQUFHbkMsU0FBU2tDLFNBQVMsQ0FBQ1U7UUFDdkIsT0FBT1Q7SUFDVCxHQUFHO1FBQUNuQztLQUFTO0lBQ2IsTUFBTThFLGdCQUFnQmhGLGtGQUFvQkEsQ0FBQ29DLFdBQVcvQixhQUFhQTtJQUNuRVosZ0RBQVNBLENBQUM7UUFDUlMsU0FBU29DLEtBQUs7UUFDZCxPQUFPO1lBQ0w1Qix3QkFBd0JSO1FBQzFCO0lBQ0YsR0FBRztRQUFDQTtLQUFTO0lBQ2IsT0FBTztRQUFDOEU7UUFBZTlFLFNBQVM2RSxJQUFJO1FBQUU3RTtLQUFTO0FBQ2pEO0FBRUEsb0JBQW9CLEdBQ3BCLFNBQVMrRSxXQUFXaEQsT0FBTyxFQUFFLEdBQUcsQ0FBQ1QsUUFBUTtJQUN2QyxPQUFPc0QsU0FBUzdDLFNBQVNUO0FBQzNCO0FBRTRGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2ltcGxlLWJsb2ctc3R5bGVkLXRlbXBsYXRlLWZvci1oZWFkbGVzcy1jbXMvLi9ub2RlX21vZHVsZXMvQHhzdGF0ZS9yZWFjdC9kaXN0L3hzdGF0ZS1yZWFjdC5kZXZlbG9wbWVudC5lc20uanM/MTZkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGZyb20gJ3VzZS1pc29tb3JwaGljLWxheW91dC1lZmZlY3QnO1xuaW1wb3J0IHsgdG9PYnNlcnZlciwgY3JlYXRlQWN0b3IgfSBmcm9tICd4c3RhdGUnO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltJztcblxuY29uc3QgZm9yRWFjaEFjdG9yID0gKGFjdG9yUmVmLCBjYWxsYmFjaykgPT4ge1xuICBjYWxsYmFjayhhY3RvclJlZik7XG4gIGNvbnN0IGNoaWxkcmVuID0gYWN0b3JSZWYuZ2V0U25hcHNob3QoKS5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuKSB7XG4gICAgT2JqZWN0LnZhbHVlcyhjaGlsZHJlbikuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBmb3JFYWNoQWN0b3IoY2hpbGQsIGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHN0b3BSb290V2l0aFJlaHlkcmF0aW9uKGFjdG9yUmVmKSB7XG4gIC8vIHBlcnNpc3Qgc25hcHNob3QgaGVyZSBpbiBhIGN1c3RvbSB3YXkgYWxsb3dzIHVzIHRvIHBlcnNpc3QgaW5saW5lIGFjdG9ycyBhbmQgdG8gcHJlc2VydmUgYWN0b3IgcmVmZXJlbmNlc1xuICAvLyB3ZSBkbyBpdCB0byBhdm9pZCBzZXRTdGF0ZSBpbiB1c2VFZmZlY3Qgd2hlbiB0aGUgZWZmZWN0IGdldHMgXCJyZWNvbm5lY3RlZFwiXG4gIC8vIHRoaXMgY3VycmVudGx5IG9ubHkgaGFwcGVucyBpbiBTdHJpY3QgRWZmZWN0cyBidXQgaXQgc2ltdWxhdGVzIHRoZSBPZmZzY3JlZW4gYWthIEFjdGl2aXR5IEFQSVxuICAvLyBpdCBhbHNvIGp1c3QgYWxsb3dzIHVzIHRvIGVuZCB1cCB3aXRoIGEgc29tZXdoYXQgbW9yZSBwcmVkaWN0YWJsZSBiZWhhdmlvciBmb3IgdGhlIHVzZXJzXG4gIGNvbnN0IHBlcnNpc3RlZFNuYXBzaG90cyA9IFtdO1xuICBmb3JFYWNoQWN0b3IoYWN0b3JSZWYsIHJlZiA9PiB7XG4gICAgcGVyc2lzdGVkU25hcHNob3RzLnB1c2goW3JlZiwgcmVmLmdldFNuYXBzaG90KCldKTtcbiAgICAvLyBtdXRpbmcgb2JzZXJ2ZXJzIGFsbG93IHVzIHRvIGF2b2lkIGB1c2VTZWxlY3RvcmAgZnJvbSBiZWluZyBub3RpZmllZCBhYm91dCB0aGUgc3RvcHBlZCBzbmFwc2hvdFxuICAgIC8vIFJlYWN0IHJlY29ubmVjdHMgaXRzIHN1YnNjcmliZXJzIChmcm9tIHRoZSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSkgb24gaXRzIG93blxuICAgIC8vIGFuZCB1c2VybGFuZCBzdWJzY2liZXJzIHNob3VsZCBiYXNpY2FsbHkgYWx3YXlzIGRvIHRoZSBzYW1lIGFueXdheVxuICAgIC8vIGFzIGVhY2ggc3Vic2NyaXB0aW9uIHNob3VsZCBoYXZlIGl0cyBvd24gY2xlYW51cCBsb2dpYyBhbmQgdGhhdCBzaG91bGQgYmUgY2FsbGVkIGVhY2ggc3VjaCByZWNvbm5lY3RcbiAgICByZWYub2JzZXJ2ZXJzID0gbmV3IFNldCgpO1xuICB9KTtcbiAgY29uc3Qgc3lzdGVtU25hcHNob3QgPSBhY3RvclJlZi5zeXN0ZW0uZ2V0U25hcHNob3Q/LigpO1xuICBhY3RvclJlZi5zdG9wKCk7XG4gIGFjdG9yUmVmLnN5c3RlbS5fc25hcHNob3QgPSBzeXN0ZW1TbmFwc2hvdDtcbiAgcGVyc2lzdGVkU25hcHNob3RzLmZvckVhY2goKFtyZWYsIHNuYXBzaG90XSkgPT4ge1xuICAgIHJlZi5fcHJvY2Vzc2luZ1N0YXR1cyA9IDA7XG4gICAgcmVmLl9zbmFwc2hvdCA9IHNuYXBzaG90O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdXNlSWRsZUFjdG9yUmVmKGxvZ2ljLCAuLi5bb3B0aW9uc10pIHtcbiAgbGV0IFtbY3VycmVudENvbmZpZywgYWN0b3JSZWZdLCBzZXRDdXJyZW50XSA9IHVzZVN0YXRlKCgpID0+IHtcbiAgICBjb25zdCBhY3RvclJlZiA9IGNyZWF0ZUFjdG9yKGxvZ2ljLCBvcHRpb25zKTtcbiAgICByZXR1cm4gW2xvZ2ljLmNvbmZpZywgYWN0b3JSZWZdO1xuICB9KTtcbiAgaWYgKGxvZ2ljLmNvbmZpZyAhPT0gY3VycmVudENvbmZpZykge1xuICAgIGNvbnN0IG5ld0FjdG9yUmVmID0gY3JlYXRlQWN0b3IobG9naWMsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBzbmFwc2hvdDogYWN0b3JSZWYuZ2V0UGVyc2lzdGVkU25hcHNob3Qoe1xuICAgICAgICBfX3Vuc2FmZUFsbG93SW5saW5lQWN0b3JzOiB0cnVlXG4gICAgICB9KVxuICAgIH0pO1xuICAgIHNldEN1cnJlbnQoW2xvZ2ljLmNvbmZpZywgbmV3QWN0b3JSZWZdKTtcbiAgICBhY3RvclJlZiA9IG5ld0FjdG9yUmVmO1xuICB9XG5cbiAgLy8gVE9ETzogY29uc2lkZXIgdXNpbmcgYHVzZUFzYXBFZmZlY3RgIHRoYXQgd291bGQgZG8gdGhpcyBpbiBgdXNlSW5zZXJ0aW9uRWZmZWN0YCBpcyB0aGF0J3MgYXZhaWxhYmxlXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdG9yUmVmLmxvZ2ljLmltcGxlbWVudGF0aW9ucyA9IGxvZ2ljLmltcGxlbWVudGF0aW9ucztcbiAgfSk7XG4gIHJldHVybiBhY3RvclJlZjtcbn1cbmZ1bmN0aW9uIHVzZUFjdG9yUmVmKG1hY2hpbmUsIC4uLltvcHRpb25zLCBvYnNlcnZlck9yTGlzdGVuZXJdKSB7XG4gIGNvbnN0IGFjdG9yUmVmID0gdXNlSWRsZUFjdG9yUmVmKG1hY2hpbmUsIG9wdGlvbnMpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb2JzZXJ2ZXJPckxpc3RlbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN1YiA9IGFjdG9yUmVmLnN1YnNjcmliZSh0b09ic2VydmVyKG9ic2VydmVyT3JMaXN0ZW5lcikpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbb2JzZXJ2ZXJPckxpc3RlbmVyXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYWN0b3JSZWYuc3RhcnQoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3RvcFJvb3RXaXRoUmVoeWRyYXRpb24oYWN0b3JSZWYpO1xuICAgIH07XG4gIH0sIFthY3RvclJlZl0pO1xuICByZXR1cm4gYWN0b3JSZWY7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5mdW5jdGlvbiB1c2VTZWxlY3RvcihhY3Rvciwgc2VsZWN0b3IsIGNvbXBhcmUgPSBkZWZhdWx0Q29tcGFyZSkge1xuICBjb25zdCBzdWJzY3JpYmUgPSB1c2VDYWxsYmFjayhoYW5kbGVTdG9yZUNoYW5nZSA9PiB7XG4gICAgaWYgKCFhY3Rvcikge1xuICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICB1bnN1YnNjcmliZVxuICAgIH0gPSBhY3Rvci5zdWJzY3JpYmUoaGFuZGxlU3RvcmVDaGFuZ2UpO1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSwgW2FjdG9yXSk7XG4gIGNvbnN0IGJvdW5kR2V0U25hcHNob3QgPSB1c2VDYWxsYmFjaygoKSA9PiBhY3Rvcj8uZ2V0U25hcHNob3QoKSwgW2FjdG9yXSk7XG4gIGNvbnN0IHNlbGVjdGVkU25hcHNob3QgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcihzdWJzY3JpYmUsIGJvdW5kR2V0U25hcHNob3QsIGJvdW5kR2V0U25hcHNob3QsIHNlbGVjdG9yLCBjb21wYXJlKTtcbiAgcmV0dXJuIHNlbGVjdGVkU25hcHNob3Q7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFjdG9yQ29udGV4dChhY3RvckxvZ2ljLCBhY3Rvck9wdGlvbnMpIHtcbiAgY29uc3QgUmVhY3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG4gIGNvbnN0IE9yaWdpbmFsUHJvdmlkZXIgPSBSZWFjdENvbnRleHQuUHJvdmlkZXI7XG4gIGZ1bmN0aW9uIFByb3ZpZGVyKHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2dpYzogcHJvdmlkZWRMb2dpYyA9IGFjdG9yTG9naWMsXG4gICAgbWFjaGluZSxcbiAgICBvcHRpb25zOiBwcm92aWRlZE9wdGlvbnNcbiAgfSkge1xuICAgIGlmIChtYWNoaW5lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBcIm1hY2hpbmVcIiBwcm9wIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJsb2dpY1wiIGluc3RlYWQuYCk7XG4gICAgfVxuICAgIGNvbnN0IGFjdG9yID0gdXNlQWN0b3JSZWYocHJvdmlkZWRMb2dpYywge1xuICAgICAgLi4uYWN0b3JPcHRpb25zLFxuICAgICAgLi4ucHJvdmlkZWRPcHRpb25zXG4gICAgfSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE9yaWdpbmFsUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBhY3RvcixcbiAgICAgIGNoaWxkcmVuXG4gICAgfSk7XG4gIH1cblxuICAvLyBUT0RPOiBhZGQgcHJvcGVydGllcyB0byBhY3RvciByZWYgdG8gbWFrZSBtb3JlIGRlc2NyaXB0aXZlXG4gIFByb3ZpZGVyLmRpc3BsYXlOYW1lID0gYEFjdG9yUHJvdmlkZXJgO1xuICBmdW5jdGlvbiB1c2VDb250ZXh0KCkge1xuICAgIGNvbnN0IGFjdG9yID0gUmVhY3QudXNlQ29udGV4dChSZWFjdENvbnRleHQpO1xuICAgIGlmICghYWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IHVzZWQgYSBob29rIGZyb20gXCIke1Byb3ZpZGVyLmRpc3BsYXlOYW1lfVwiIGJ1dCBpdCdzIG5vdCBpbnNpZGUgYSA8JHtQcm92aWRlci5kaXNwbGF5TmFtZX0+IGNvbXBvbmVudC5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdG9yO1xuICB9XG4gIGZ1bmN0aW9uIHVzZVNlbGVjdG9yJDEoc2VsZWN0b3IsIGNvbXBhcmUpIHtcbiAgICBjb25zdCBhY3RvciA9IHVzZUNvbnRleHQoKTtcbiAgICByZXR1cm4gdXNlU2VsZWN0b3IoYWN0b3IsIHNlbGVjdG9yLCBjb21wYXJlKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICB1c2VBY3RvclJlZjogdXNlQ29udGV4dCxcbiAgICB1c2VTZWxlY3RvcjogdXNlU2VsZWN0b3IkMVxuICB9O1xufVxuXG4vLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWR1eGpzL3JlYWN0LXJlZHV4L2Jsb2IvNzIwZjBiYTc5MjM2Y2RjM2UxMTE1ZjRlZjlhNzc2MGEyMTc4NGI0OC9zcmMvdXRpbHMvc2hhbGxvd0VxdWFsLnRzXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB1c2VBY3Rvcihsb2dpYywgLi4uW29wdGlvbnNdKSB7XG4gIGlmICghIWxvZ2ljICYmICdzZW5kJyBpbiBsb2dpYyAmJiB0eXBlb2YgbG9naWMuc2VuZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgdXNlQWN0b3IoKSBleHBlY3RzIGFjdG9yIGxvZ2ljIChlLmcuIGEgbWFjaGluZSksIGJ1dCByZWNlaXZlZCBhbiBBY3RvclJlZi4gVXNlIHRoZSB1c2VTZWxlY3RvcihhY3RvclJlZiwgLi4uKSBob29rIGluc3RlYWQgdG8gcmVhZCB0aGUgQWN0b3JSZWYncyBzbmFwc2hvdC5gKTtcbiAgfVxuICBjb25zdCBhY3RvclJlZiA9IHVzZUlkbGVBY3RvclJlZihsb2dpYywgb3B0aW9ucyk7XG4gIGNvbnN0IGdldFNuYXBzaG90ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiBhY3RvclJlZi5nZXRTbmFwc2hvdCgpO1xuICB9LCBbYWN0b3JSZWZdKTtcbiAgY29uc3Qgc3Vic2NyaWJlID0gdXNlQ2FsbGJhY2soaGFuZGxlU3RvcmVDaGFuZ2UgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHVuc3Vic2NyaWJlXG4gICAgfSA9IGFjdG9yUmVmLnN1YnNjcmliZShoYW5kbGVTdG9yZUNoYW5nZSk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9LCBbYWN0b3JSZWZdKTtcbiAgY29uc3QgYWN0b3JTbmFwc2hvdCA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNuYXBzaG90KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RvclJlZi5zdGFydCgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzdG9wUm9vdFdpdGhSZWh5ZHJhdGlvbihhY3RvclJlZik7XG4gICAgfTtcbiAgfSwgW2FjdG9yUmVmXSk7XG4gIHJldHVybiBbYWN0b3JTbmFwc2hvdCwgYWN0b3JSZWYuc2VuZCwgYWN0b3JSZWZdO1xufVxuXG4vKiogQGFsaWFzIHVzZUFjdG9yICovXG5mdW5jdGlvbiB1c2VNYWNoaW5lKG1hY2hpbmUsIC4uLltvcHRpb25zXSkge1xuICByZXR1cm4gdXNlQWN0b3IobWFjaGluZSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUFjdG9yQ29udGV4dCwgc2hhbGxvd0VxdWFsLCB1c2VBY3RvciwgdXNlQWN0b3JSZWYsIHVzZU1hY2hpbmUsIHVzZVNlbGVjdG9yIH07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInRvT2JzZXJ2ZXIiLCJjcmVhdGVBY3RvciIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJmb3JFYWNoQWN0b3IiLCJhY3RvclJlZiIsImNhbGxiYWNrIiwiY2hpbGRyZW4iLCJnZXRTbmFwc2hvdCIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJjaGlsZCIsInN0b3BSb290V2l0aFJlaHlkcmF0aW9uIiwicGVyc2lzdGVkU25hcHNob3RzIiwicmVmIiwicHVzaCIsIm9ic2VydmVycyIsIlNldCIsInN5c3RlbVNuYXBzaG90Iiwic3lzdGVtIiwic3RvcCIsIl9zbmFwc2hvdCIsInNuYXBzaG90IiwiX3Byb2Nlc3NpbmdTdGF0dXMiLCJ1c2VJZGxlQWN0b3JSZWYiLCJsb2dpYyIsIm9wdGlvbnMiLCJjdXJyZW50Q29uZmlnIiwic2V0Q3VycmVudCIsImNvbmZpZyIsIm5ld0FjdG9yUmVmIiwiZ2V0UGVyc2lzdGVkU25hcHNob3QiLCJfX3Vuc2FmZUFsbG93SW5saW5lQWN0b3JzIiwiaW1wbGVtZW50YXRpb25zIiwidXNlQWN0b3JSZWYiLCJtYWNoaW5lIiwib2JzZXJ2ZXJPckxpc3RlbmVyIiwic3ViIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiLCJzdGFydCIsImRlZmF1bHRDb21wYXJlIiwiYSIsImIiLCJ1c2VTZWxlY3RvciIsImFjdG9yIiwic2VsZWN0b3IiLCJjb21wYXJlIiwiaGFuZGxlU3RvcmVDaGFuZ2UiLCJib3VuZEdldFNuYXBzaG90Iiwic2VsZWN0ZWRTbmFwc2hvdCIsImNyZWF0ZUFjdG9yQ29udGV4dCIsImFjdG9yTG9naWMiLCJhY3Rvck9wdGlvbnMiLCJSZWFjdENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiT3JpZ2luYWxQcm92aWRlciIsIlByb3ZpZGVyIiwicHJvdmlkZWRMb2dpYyIsInByb3ZpZGVkT3B0aW9ucyIsIkVycm9yIiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwiZGlzcGxheU5hbWUiLCJ1c2VDb250ZXh0IiwidXNlU2VsZWN0b3IkMSIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5cyIsImtleXNCIiwibGVuZ3RoIiwiaSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInVzZUFjdG9yIiwic2VuZCIsImFjdG9yU25hcHNob3QiLCJ1c2VNYWNoaW5lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\n");

/***/ })

};
;