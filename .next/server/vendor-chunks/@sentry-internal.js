"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry-internal";
exports.ids = ["vendor-chunks/@sentry-internal"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === \"undefined\" || __SENTRY_DEBUG__;\n //# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Q0FJQyxHQUNELE1BQU1BLGNBQWUsT0FBT0MscUJBQXFCLGVBQWVBO0FBRXpDLENBQ3ZCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXBsZS1ibG9nLXN0eWxlZC10ZW1wbGF0ZS1mb3ItaGVhZGxlc3MtY21zLy4vbm9kZV9tb2R1bGVzL0BzZW50cnktaW50ZXJuYWwvYnJvd3Nlci11dGlscy9idWlsZC9lc20vZGVidWctYnVpbGQuanM/YjllYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnQgeyBERUJVR19CVUlMRCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOlsiREVCVUdfQlVJTEQiLCJfX1NFTlRSWV9ERUJVR19fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearCachedImplementation: () => (/* binding */ clearCachedImplementation),\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   getNativeImplementation: () => (/* binding */ getNativeImplementation),\n/* harmony export */   setTimeout: () => (/* binding */ setTimeout)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/supports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\n\n/**\n * We generally want to use window.fetch / window.setTimeout.\n * However, in some cases this may be wrapped (e.g. by Zone.js for Angular),\n * so we try to get an unpatched version of this from a sandboxed iframe.\n */ const cachedImplementations = {};\n/**\n * Get the native implementation of a browser function.\n *\n * This can be used to ensure we get an unwrapped version of a function, in cases where a wrapped function can lead to problems.\n *\n * The following methods can be retrieved:\n * - `setTimeout`: This can be wrapped by e.g. Angular, causing change detection to be triggered.\n * - `fetch`: This can be wrapped by e.g. ad-blockers, causing an infinite loop when a request is blocked.\n */ function getNativeImplementation(name) {\n    const cached = cachedImplementations[name];\n    if (cached) {\n        return cached;\n    }\n    let impl = _types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW[name];\n    // Fast path to avoid DOM I/O\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.isNativeFunction)(impl)) {\n        return cachedImplementations[name] = impl.bind(_types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW);\n    }\n    const document = _types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW.document;\n    // eslint-disable-next-line deprecation/deprecation\n    if (document && typeof document.createElement === \"function\") {\n        try {\n            const sandbox = document.createElement(\"iframe\");\n            sandbox.hidden = true;\n            document.head.appendChild(sandbox);\n            const contentWindow = sandbox.contentWindow;\n            if (contentWindow && contentWindow[name]) {\n                impl = contentWindow[name];\n            }\n            document.head.removeChild(sandbox);\n        } catch (e) {\n            // Could not create sandbox iframe, just use window.xxx\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_3__.logger.warn(`Could not create sandbox iframe for ${name} check, bailing to window.${name}: `, e);\n        }\n    }\n    // Sanity check: This _should_ not happen, but if it does, we just skip caching...\n    // This can happen e.g. in tests where fetch may not be available in the env, or similar.\n    if (!impl) {\n        return impl;\n    }\n    return cachedImplementations[name] = impl.bind(_types_js__WEBPACK_IMPORTED_MODULE_0__.WINDOW);\n}\n/** Clear a cached implementation. */ function clearCachedImplementation(name) {\n    cachedImplementations[name] = undefined;\n}\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */ function fetch(...rest) {\n    return getNativeImplementation(\"fetch\")(...rest);\n}\n/**\n * Get an unwrapped `setTimeout` method.\n * This ensures that even if e.g. Angular wraps `setTimeout`, we get the native implementation,\n * avoiding triggering change detection.\n */ function setTimeout(...rest) {\n    return getNativeImplementation(\"setTimeout\")(...rest);\n}\n //# sourceMappingURL=getNativeImplementation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addClickKeypressInstrumentationHandler: () => (/* binding */ addClickKeypressInstrumentationHandler),\n/* harmony export */   instrumentDOM: () => (/* binding */ instrumentDOM)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\nconst DEBOUNCE_DURATION = 1000;\nlet debounceTimerID;\nlet lastCapturedEventType;\nlet lastCapturedEventTargetId;\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addClickKeypressInstrumentationHandler(handler) {\n    const type = \"dom\";\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentDOM);\n}\n/** Exported for tests only. */ function instrumentDOM() {\n    if (!_types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document) {\n        return;\n    }\n    // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n    // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n    // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n    const triggerDOMHandler = _sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers.bind(null, \"dom\");\n    const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n    _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document.addEventListener(\"click\", globalDOMEventHandler, false);\n    _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.document.addEventListener(\"keypress\", globalDOMEventHandler, false);\n    // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n    // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n    // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n    // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n    // guaranteed to fire at least once.)\n    [\n        \"EventTarget\",\n        \"Node\"\n    ].forEach((target)=>{\n        const globalObject = _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW;\n        const targetObj = globalObject[target];\n        const proto = targetObj && targetObj.prototype;\n        // eslint-disable-next-line no-prototype-builtins\n        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty(\"addEventListener\")) {\n            return;\n        }\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.fill)(proto, \"addEventListener\", function(originalAddEventListener) {\n            return function(type, listener, options) {\n                if (type === \"click\" || type == \"keypress\") {\n                    try {\n                        const handlers = this.__sentry_instrumentation_handlers__ = this.__sentry_instrumentation_handlers__ || {};\n                        const handlerForType = handlers[type] = handlers[type] || {\n                            refCount: 0\n                        };\n                        if (!handlerForType.handler) {\n                            const handler = makeDOMEventHandler(triggerDOMHandler);\n                            handlerForType.handler = handler;\n                            originalAddEventListener.call(this, type, handler, options);\n                        }\n                        handlerForType.refCount++;\n                    } catch (e) {\n                    // Accessing dom properties is always fragile.\n                    // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n                    }\n                }\n                return originalAddEventListener.call(this, type, listener, options);\n            };\n        });\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.fill)(proto, \"removeEventListener\", function(originalRemoveEventListener) {\n            return function(type, listener, options) {\n                if (type === \"click\" || type == \"keypress\") {\n                    try {\n                        const handlers = this.__sentry_instrumentation_handlers__ || {};\n                        const handlerForType = handlers[type];\n                        if (handlerForType) {\n                            handlerForType.refCount--;\n                            // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                            if (handlerForType.refCount <= 0) {\n                                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                                handlerForType.handler = undefined;\n                                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                            }\n                            // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                            if (Object.keys(handlers).length === 0) {\n                                delete this.__sentry_instrumentation_handlers__;\n                            }\n                        }\n                    } catch (e) {\n                    // Accessing dom properties is always fragile.\n                    // Also allows us to skip `addEventListeners` calls with no proper `this` context.\n                    }\n                }\n                return originalRemoveEventListener.call(this, type, listener, options);\n            };\n        });\n    });\n}\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */ function isSimilarToLastCapturedEvent(event) {\n    // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n    if (event.type !== lastCapturedEventType) {\n        return false;\n    }\n    try {\n        // If both events have the same type, it's still possible that actions were performed on different targets.\n        // e.g. 2 clicks on different buttons.\n        if (!event.target || event.target._sentryId !== lastCapturedEventTargetId) {\n            return false;\n        }\n    } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    }\n    // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n    // to which an event listener was attached), we treat them as the same action, as we want to capture\n    // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n    return true;\n}\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */ function shouldSkipDOMEvent(eventType, target) {\n    // We are only interested in filtering `keypress` events for now.\n    if (eventType !== \"keypress\") {\n        return false;\n    }\n    if (!target || !target.tagName) {\n        return true;\n    }\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === \"INPUT\" || target.tagName === \"TEXTAREA\" || target.isContentEditable) {\n        return false;\n    }\n    return true;\n}\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */ function makeDOMEventHandler(handler, globalListener = false) {\n    return (event)=>{\n        // It's possible this handler might trigger multiple times for the same\n        // event (e.g. event propagation through node ancestors).\n        // Ignore if we've already captured that event.\n        if (!event || event[\"_sentryCaptured\"]) {\n            return;\n        }\n        const target = getEventTarget(event);\n        // We always want to skip _some_ events.\n        if (shouldSkipDOMEvent(event.type, target)) {\n            return;\n        }\n        // Mark event as \"seen\"\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(event, \"_sentryCaptured\", true);\n        if (target && !target._sentryId) {\n            // Add UUID to event target so we can identify if\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(target, \"_sentryId\", (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.uuid4)());\n        }\n        const name = event.type === \"keypress\" ? \"input\" : event.type;\n        // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n        // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n        // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n        if (!isSimilarToLastCapturedEvent(event)) {\n            const handlerData = {\n                event,\n                name,\n                global: globalListener\n            };\n            handler(handlerData);\n            lastCapturedEventType = event.type;\n            lastCapturedEventTargetId = target ? target._sentryId : undefined;\n        }\n        // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n        clearTimeout(debounceTimerID);\n        debounceTimerID = _types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.setTimeout(()=>{\n            lastCapturedEventTargetId = undefined;\n            lastCapturedEventType = undefined;\n        }, DEBOUNCE_DURATION);\n    };\n}\nfunction getEventTarget(event) {\n    try {\n        return event.target;\n    } catch (e) {\n        // just accessing `target` property can throw an exception in some rare circumstances\n        // see: https://github.com/getsentry/sentry-javascript/issues/838\n        return null;\n    }\n}\n //# sourceMappingURL=dom.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS9pbnN0cnVtZW50L2RvbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBbUg7QUFDOUU7QUFFckMsTUFBTU8sb0JBQW9CO0FBRTFCLElBQUlDO0FBQ0osSUFBSUM7QUFDSixJQUFJQztBQUVKOzs7OztDQUtDLEdBQ0QsU0FBU0MsdUNBQXVDQyxPQUFPO0lBQ3JELE1BQU1DLE9BQU87SUFDYmIsd0RBQVVBLENBQUNhLE1BQU1EO0lBQ2pCWCw2REFBZUEsQ0FBQ1ksTUFBTUM7QUFDeEI7QUFFQSw2QkFBNkIsR0FDN0IsU0FBU0E7SUFDUCxJQUFJLENBQUNSLDZDQUFNQSxDQUFDUyxRQUFRLEVBQUU7UUFDcEI7SUFDRjtJQUVBLG9IQUFvSDtJQUNwSCxnSEFBZ0g7SUFDaEgseUZBQXlGO0lBQ3pGLE1BQU1DLG9CQUFvQmQseURBQWVBLENBQUNlLElBQUksQ0FBQyxNQUFNO0lBQ3JELE1BQU1DLHdCQUF3QkMsb0JBQW9CSCxtQkFBbUI7SUFDckVWLDZDQUFNQSxDQUFDUyxRQUFRLENBQUNLLGdCQUFnQixDQUFDLFNBQVNGLHVCQUF1QjtJQUNqRVosNkNBQU1BLENBQUNTLFFBQVEsQ0FBQ0ssZ0JBQWdCLENBQUMsWUFBWUYsdUJBQXVCO0lBRXBFLHdHQUF3RztJQUN4RyxnSEFBZ0g7SUFDaEgsNkdBQTZHO0lBQzdHLGdIQUFnSDtJQUNoSCxxQ0FBcUM7SUFDckM7UUFBQztRQUFlO0tBQU8sQ0FBQ0csT0FBTyxDQUFDLENBQUNDO1FBQy9CLE1BQU1DLGVBQWVqQiw2Q0FBTUE7UUFDM0IsTUFBTWtCLFlBQVlELFlBQVksQ0FBQ0QsT0FBTztRQUN0QyxNQUFNRyxRQUFRRCxhQUFhQSxVQUFVRSxTQUFTO1FBRTlDLGlEQUFpRDtRQUNqRCxJQUFJLENBQUNELFNBQVMsQ0FBQ0EsTUFBTUUsY0FBYyxJQUFJLENBQUNGLE1BQU1FLGNBQWMsQ0FBQyxxQkFBcUI7WUFD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QUcvQjtJQUNMO0FBQ0Y7QUFFQSxTQUFTMkMsZUFBZVAsS0FBSztJQUMzQixJQUFJO1FBQ0YsT0FBT0EsTUFBTXJCLE1BQU07SUFDckIsRUFBRSxPQUFPYyxHQUFHO1FBQ1YscUZBQXFGO1FBQ3JGLGlFQUFpRTtRQUNqRSxPQUFPO0lBQ1Q7QUFDRjtBQUVpRSxDQUNqRSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaW1wbGUtYmxvZy1zdHlsZWQtdGVtcGxhdGUtZm9yLWhlYWRsZXNzLWNtcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5LWludGVybmFsL2Jyb3dzZXItdXRpbHMvYnVpbGQvZXNtL2luc3RydW1lbnQvZG9tLmpzP2QzZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkSGFuZGxlciwgbWF5YmVJbnN0cnVtZW50LCB0cmlnZ2VySGFuZGxlcnMsIGZpbGwsIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSwgdXVpZDQgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuXG5jb25zdCBERUJPVU5DRV9EVVJBVElPTiA9IDEwMDA7XG5cbmxldCBkZWJvdW5jZVRpbWVySUQ7XG5sZXQgbGFzdENhcHR1cmVkRXZlbnRUeXBlO1xubGV0IGxhc3RDYXB0dXJlZEV2ZW50VGFyZ2V0SWQ7XG5cbi8qKlxuICogQWRkIGFuIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyIGZvciB3aGVuIGEgY2xpY2sgb3IgYSBrZXlwcmVzcyBoYXBwZW5zLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZENsaWNrS2V5cHJlc3NJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdkb20nO1xuICBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudERPTSk7XG59XG5cbi8qKiBFeHBvcnRlZCBmb3IgdGVzdHMgb25seS4gKi9cbmZ1bmN0aW9uIGluc3RydW1lbnRET00oKSB7XG4gIGlmICghV0lORE9XLmRvY3VtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gTWFrZSBpdCBzbyB0aGF0IGFueSBjbGljayBvciBrZXlwcmVzcyB0aGF0IGlzIHVuaGFuZGxlZCAvIGJ1YmJsZWQgdXAgYWxsIHRoZSB3YXkgdG8gdGhlIGRvY3VtZW50IHRyaWdnZXJzIG91ciBkb21cbiAgLy8gaGFuZGxlcnMuIChOb3JtYWxseSB3ZSBoYXZlIG9ubHkgb25lLCB3aGljaCBjYXB0dXJlcyBhIGJyZWFkY3J1bWIgZm9yIGVhY2ggY2xpY2sgb3Iga2V5cHJlc3MuKSBEbyB0aGlzIGJlZm9yZVxuICAvLyB3ZSBpbnN0cnVtZW50IGBhZGRFdmVudExpc3RlbmVyYCBzbyB0aGF0IHdlIGRvbid0IGVuZCB1cCBhdHRhY2hpbmcgdGhpcyBoYW5kbGVyIHR3aWNlLlxuICBjb25zdCB0cmlnZ2VyRE9NSGFuZGxlciA9IHRyaWdnZXJIYW5kbGVycy5iaW5kKG51bGwsICdkb20nKTtcbiAgY29uc3QgZ2xvYmFsRE9NRXZlbnRIYW5kbGVyID0gbWFrZURPTUV2ZW50SGFuZGxlcih0cmlnZ2VyRE9NSGFuZGxlciwgdHJ1ZSk7XG4gIFdJTkRPVy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGdsb2JhbERPTUV2ZW50SGFuZGxlciwgZmFsc2UpO1xuICBXSU5ET1cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBnbG9iYWxET01FdmVudEhhbmRsZXIsIGZhbHNlKTtcblxuICAvLyBBZnRlciBob29raW5nIGludG8gY2xpY2sgYW5kIGtleXByZXNzIGV2ZW50cyBidWJibGVkIHVwIHRvIGBkb2N1bWVudGAsIHdlIGFsc28gaG9vayBpbnRvIHVzZXItaGFuZGxlZFxuICAvLyBjbGlja3MgJiBrZXlwcmVzc2VzLCBieSBhZGRpbmcgYW4gZXZlbnQgbGlzdGVuZXIgb2Ygb3VyIG93biB0byBhbnkgZWxlbWVudCB0byB3aGljaCB0aGV5IGFkZCBhIGxpc3RlbmVyLiBUaGF0XG4gIC8vIHdheSwgd2hlbmV2ZXIgb25lIG9mIHRoZWlyIGhhbmRsZXJzIGlzIHRyaWdnZXJlZCwgb3VycyB3aWxsIGJlLCB0b28uIChUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHRoZWlyIGhhbmRsZXJcbiAgLy8gY291bGQgcG90ZW50aWFsbHkgcHJldmVudCB0aGUgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byBvdXIgZ2xvYmFsIGxpc3RlbmVycy4gVGhpcyB3YXksIG91ciBoYW5kbGVyIGFyZSBzdGlsbFxuICAvLyBndWFyYW50ZWVkIHRvIGZpcmUgYXQgbGVhc3Qgb25jZS4pXG4gIFsnRXZlbnRUYXJnZXQnLCAnTm9kZSddLmZvckVhY2goKHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IGdsb2JhbE9iamVjdCA9IFdJTkRPVyA7XG4gICAgY29uc3QgdGFyZ2V0T2JqID0gZ2xvYmFsT2JqZWN0W3RhcmdldF07XG4gICAgY29uc3QgcHJvdG8gPSB0YXJnZXRPYmogJiYgdGFyZ2V0T2JqLnByb3RvdHlwZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICBpZiAoIXByb3RvIHx8ICFwcm90by5oYXNPd25Qcm9wZXJ0eSB8fCAhcHJvdG8uaGFzT3duUHJvcGVydHkoJ2FkZEV2ZW50TGlzdGVuZXInKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZpbGwocHJvdG8sICdhZGRFdmVudExpc3RlbmVyJywgZnVuY3Rpb24gKG9yaWdpbmFsQWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdjbGljaycgfHwgdHlwZSA9PSAna2V5cHJlc3MnKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXJzID0gKHRoaXMuX19zZW50cnlfaW5zdHJ1bWVudGF0aW9uX2hhbmRsZXJzX18gPVxuICAgICAgICAgICAgICB0aGlzLl9fc2VudHJ5X2luc3RydW1lbnRhdGlvbl9oYW5kbGVyc19fIHx8IHt9KTtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXJGb3JUeXBlID0gKGhhbmRsZXJzW3R5cGVdID0gaGFuZGxlcnNbdHlwZV0gfHwgeyByZWZDb3VudDogMCB9KTtcblxuICAgICAgICAgICAgaWYgKCFoYW5kbGVyRm9yVHlwZS5oYW5kbGVyKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBtYWtlRE9NRXZlbnRIYW5kbGVyKHRyaWdnZXJET01IYW5kbGVyKTtcbiAgICAgICAgICAgICAgaGFuZGxlckZvclR5cGUuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgICAgICAgIG9yaWdpbmFsQWRkRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIHR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoYW5kbGVyRm9yVHlwZS5yZWZDb3VudCsrO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIEFjY2Vzc2luZyBkb20gcHJvcGVydGllcyBpcyBhbHdheXMgZnJhZ2lsZS5cbiAgICAgICAgICAgIC8vIEFsc28gYWxsb3dzIHVzIHRvIHNraXAgYGFkZEV2ZW50TGlzdGVuZXJzYCBjYWxscyB3aXRoIG5vIHByb3BlciBgdGhpc2AgY29udGV4dC5cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JpZ2luYWxBZGRFdmVudExpc3RlbmVyLmNhbGwodGhpcywgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGZpbGwoXG4gICAgICBwcm90byxcbiAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJyxcbiAgICAgIGZ1bmN0aW9uIChvcmlnaW5hbFJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09ICdrZXlwcmVzcycpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5fX3NlbnRyeV9pbnN0cnVtZW50YXRpb25faGFuZGxlcnNfXyB8fCB7fTtcbiAgICAgICAgICAgICAgY29uc3QgaGFuZGxlckZvclR5cGUgPSBoYW5kbGVyc1t0eXBlXTtcblxuICAgICAgICAgICAgICBpZiAoaGFuZGxlckZvclR5cGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyRm9yVHlwZS5yZWZDb3VudC0tO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBsb25nZXIgYW55IGN1c3RvbSBoYW5kbGVycyBvZiB0aGUgY3VycmVudCB0eXBlIG9uIHRoaXMgZWxlbWVudCwgd2UgY2FuIHJlbW92ZSBvdXJzLCB0b28uXG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJGb3JUeXBlLnJlZkNvdW50IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVtb3ZlRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIHR5cGUsIGhhbmRsZXJGb3JUeXBlLmhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgaGFuZGxlckZvclR5cGUuaGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc1t0eXBlXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gbG9uZ2VyIGFueSBjdXN0b20gaGFuZGxlcnMgb2YgYW55IHR5cGUgb24gdGhpcyBlbGVtZW50LCBjbGVhbnVwIGV2ZXJ5dGhpbmcuXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGhhbmRsZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9fc2VudHJ5X2luc3RydW1lbnRhdGlvbl9oYW5kbGVyc19fO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAvLyBBY2Nlc3NpbmcgZG9tIHByb3BlcnRpZXMgaXMgYWx3YXlzIGZyYWdpbGUuXG4gICAgICAgICAgICAgIC8vIEFsc28gYWxsb3dzIHVzIHRvIHNraXAgYGFkZEV2ZW50TGlzdGVuZXJzYCBjYWxscyB3aXRoIG5vIHByb3BlciBgdGhpc2AgY29udGV4dC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgdHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICApO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBldmVudCBpcyBzaW1pbGFyIHRvIHRoZSBsYXN0IGNhcHR1cmVkIG9uZS4gRm9yIGV4YW1wbGUsIHR3byBjbGljayBldmVudHMgb24gdGhlIHNhbWUgYnV0dG9uLlxuICovXG5mdW5jdGlvbiBpc1NpbWlsYXJUb0xhc3RDYXB0dXJlZEV2ZW50KGV2ZW50KSB7XG4gIC8vIElmIGJvdGggZXZlbnRzIGhhdmUgZGlmZmVyZW50IHR5cGUsIHRoZW4gdXNlciBkZWZpbml0ZWx5IHBlcmZvcm1lZCB0d28gc2VwYXJhdGUgYWN0aW9ucy4gZS5nLiBjbGljayArIGtleXByZXNzLlxuICBpZiAoZXZlbnQudHlwZSAhPT0gbGFzdENhcHR1cmVkRXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBJZiBib3RoIGV2ZW50cyBoYXZlIHRoZSBzYW1lIHR5cGUsIGl0J3Mgc3RpbGwgcG9zc2libGUgdGhhdCBhY3Rpb25zIHdlcmUgcGVyZm9ybWVkIG9uIGRpZmZlcmVudCB0YXJnZXRzLlxuICAgIC8vIGUuZy4gMiBjbGlja3Mgb24gZGlmZmVyZW50IGJ1dHRvbnMuXG4gICAgaWYgKCFldmVudC50YXJnZXQgfHwgKGV2ZW50LnRhcmdldCApLl9zZW50cnlJZCAhPT0gbGFzdENhcHR1cmVkRXZlbnRUYXJnZXRJZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGp1c3QgYWNjZXNzaW5nIGB0YXJnZXRgIHByb3BlcnR5IGNhbiB0aHJvdyBhbiBleGNlcHRpb24gaW4gc29tZSByYXJlIGNpcmN1bXN0YW5jZXNcbiAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzgzOFxuICB9XG5cbiAgLy8gSWYgYm90aCBldmVudHMgaGF2ZSB0aGUgc2FtZSB0eXBlIF9hbmRfIHNhbWUgYHRhcmdldGAgKGFuIGVsZW1lbnQgd2hpY2ggdHJpZ2dlcmVkIGFuIGV2ZW50LCBfbm90IG5lY2Vzc2FyaWx5X1xuICAvLyB0byB3aGljaCBhbiBldmVudCBsaXN0ZW5lciB3YXMgYXR0YWNoZWQpLCB3ZSB0cmVhdCB0aGVtIGFzIHRoZSBzYW1lIGFjdGlvbiwgYXMgd2Ugd2FudCB0byBjYXB0dXJlXG4gIC8vIG9ubHkgb25lIGJyZWFkY3J1bWIuIGUuZy4gbXVsdGlwbGUgY2xpY2tzIG9uIHRoZSBzYW1lIGJ1dHRvbiwgb3IgdHlwaW5nIGluc2lkZSBhIHVzZXIgaW5wdXQgYm94LlxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBEZWNpZGUgd2hldGhlciBhbiBldmVudCBzaG91bGQgYmUgY2FwdHVyZWQuXG4gKiBAcGFyYW0gZXZlbnQgZXZlbnQgdG8gYmUgY2FwdHVyZWRcbiAqL1xuZnVuY3Rpb24gc2hvdWxkU2tpcERPTUV2ZW50KGV2ZW50VHlwZSwgdGFyZ2V0KSB7XG4gIC8vIFdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gZmlsdGVyaW5nIGBrZXlwcmVzc2AgZXZlbnRzIGZvciBub3cuXG4gIGlmIChldmVudFR5cGUgIT09ICdrZXlwcmVzcycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0LnRhZ05hbWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIE9ubHkgY29uc2lkZXIga2V5cHJlc3MgZXZlbnRzIG9uIGFjdHVhbCBpbnB1dCBlbGVtZW50cy4gVGhpcyB3aWxsIGRpc3JlZ2FyZCBrZXlwcmVzc2VzIHRhcmdldGluZyBib2R5XG4gIC8vIGUuZy50YWJiaW5nIHRocm91Z2ggZWxlbWVudHMsIGhvdGtleXMsIGV0Yy5cbiAgaWYgKHRhcmdldC50YWdOYW1lID09PSAnSU5QVVQnIHx8IHRhcmdldC50YWdOYW1lID09PSAnVEVYVEFSRUEnIHx8IHRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFdyYXBzIGFkZEV2ZW50TGlzdGVuZXIgdG8gY2FwdHVyZSBVSSBicmVhZGNydW1ic1xuICovXG5mdW5jdGlvbiBtYWtlRE9NRXZlbnRIYW5kbGVyKFxuICBoYW5kbGVyLFxuICBnbG9iYWxMaXN0ZW5lciA9IGZhbHNlLFxuKSB7XG4gIHJldHVybiAoZXZlbnQpID0+IHtcbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoaXMgaGFuZGxlciBtaWdodCB0cmlnZ2VyIG11bHRpcGxlIHRpbWVzIGZvciB0aGUgc2FtZVxuICAgIC8vIGV2ZW50IChlLmcuIGV2ZW50IHByb3BhZ2F0aW9uIHRocm91Z2ggbm9kZSBhbmNlc3RvcnMpLlxuICAgIC8vIElnbm9yZSBpZiB3ZSd2ZSBhbHJlYWR5IGNhcHR1cmVkIHRoYXQgZXZlbnQuXG4gICAgaWYgKCFldmVudCB8fCBldmVudFsnX3NlbnRyeUNhcHR1cmVkJ10pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXQgPSBnZXRFdmVudFRhcmdldChldmVudCk7XG5cbiAgICAvLyBXZSBhbHdheXMgd2FudCB0byBza2lwIF9zb21lXyBldmVudHMuXG4gICAgaWYgKHNob3VsZFNraXBET01FdmVudChldmVudC50eXBlLCB0YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTWFyayBldmVudCBhcyBcInNlZW5cIlxuICAgIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShldmVudCwgJ19zZW50cnlDYXB0dXJlZCcsIHRydWUpO1xuXG4gICAgaWYgKHRhcmdldCAmJiAhdGFyZ2V0Ll9zZW50cnlJZCkge1xuICAgICAgLy8gQWRkIFVVSUQgdG8gZXZlbnQgdGFyZ2V0IHNvIHdlIGNhbiBpZGVudGlmeSBpZlxuICAgICAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwgJ19zZW50cnlJZCcsIHV1aWQ0KCkpO1xuICAgIH1cblxuICAgIGNvbnN0IG5hbWUgPSBldmVudC50eXBlID09PSAna2V5cHJlc3MnID8gJ2lucHV0JyA6IGV2ZW50LnR5cGU7XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBsYXN0IGNhcHR1cmVkIGV2ZW50LCBpdCBtZWFucyB0aGF0IHdlIGNhbiBzYWZlbHkgY2FwdHVyZSB0aGUgbmV3IGV2ZW50IGFuZCBzdG9yZSBpdCBmb3IgZnV0dXJlIGNvbXBhcmlzb25zLlxuICAgIC8vIElmIHRoZXJlIGlzIGEgbGFzdCBjYXB0dXJlZCBldmVudCwgc2VlIGlmIHRoZSBuZXcgZXZlbnQgaXMgZGlmZmVyZW50IGVub3VnaCB0byB0cmVhdCBpdCBhcyBhIHVuaXF1ZSBvbmUuXG4gICAgLy8gSWYgdGhhdCdzIHRoZSBjYXNlLCBlbWl0IHRoZSBwcmV2aW91cyBldmVudCBhbmQgc3RvcmUgbG9jYWxseSB0aGUgbmV3bHktY2FwdHVyZWQgRE9NIGV2ZW50LlxuICAgIGlmICghaXNTaW1pbGFyVG9MYXN0Q2FwdHVyZWRFdmVudChldmVudCkpIHtcbiAgICAgIGNvbnN0IGhhbmRsZXJEYXRhID0geyBldmVudCwgbmFtZSwgZ2xvYmFsOiBnbG9iYWxMaXN0ZW5lciB9O1xuICAgICAgaGFuZGxlcihoYW5kbGVyRGF0YSk7XG4gICAgICBsYXN0Q2FwdHVyZWRFdmVudFR5cGUgPSBldmVudC50eXBlO1xuICAgICAgbGFzdENhcHR1cmVkRXZlbnRUYXJnZXRJZCA9IHRhcmdldCA/IHRhcmdldC5fc2VudHJ5SWQgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gU3RhcnQgYSBuZXcgZGVib3VuY2UgdGltZXIgdGhhdCB3aWxsIHByZXZlbnQgdXMgZnJvbSBjYXB0dXJpbmcgbXVsdGlwbGUgZXZlbnRzIHRoYXQgc2hvdWxkIGJlIGdyb3VwZWQgdG9nZXRoZXIuXG4gICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXJJRCk7XG4gICAgZGVib3VuY2VUaW1lcklEID0gV0lORE9XLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbGFzdENhcHR1cmVkRXZlbnRUYXJnZXRJZCA9IHVuZGVmaW5lZDtcbiAgICAgIGxhc3RDYXB0dXJlZEV2ZW50VHlwZSA9IHVuZGVmaW5lZDtcbiAgICB9LCBERUJPVU5DRV9EVVJBVElPTik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KGV2ZW50KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2ZW50LnRhcmdldCA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBqdXN0IGFjY2Vzc2luZyBgdGFyZ2V0YCBwcm9wZXJ0eSBjYW4gdGhyb3cgYW4gZXhjZXB0aW9uIGluIHNvbWUgcmFyZSBjaXJjdW1zdGFuY2VzXG4gICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy84MzhcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgeyBhZGRDbGlja0tleXByZXNzSW5zdHJ1bWVudGF0aW9uSGFuZGxlciwgaW5zdHJ1bWVudERPTSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmpzLm1hcFxuIl0sIm5hbWVzIjpbImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJ0cmlnZ2VySGFuZGxlcnMiLCJmaWxsIiwiYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IiwidXVpZDQiLCJXSU5ET1ciLCJERUJPVU5DRV9EVVJBVElPTiIsImRlYm91bmNlVGltZXJJRCIsImxhc3RDYXB0dXJlZEV2ZW50VHlwZSIsImxhc3RDYXB0dXJlZEV2ZW50VGFyZ2V0SWQiLCJhZGRDbGlja0tleXByZXNzSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImhhbmRsZXIiLCJ0eXBlIiwiaW5zdHJ1bWVudERPTSIsImRvY3VtZW50IiwidHJpZ2dlckRPTUhhbmRsZXIiLCJiaW5kIiwiZ2xvYmFsRE9NRXZlbnRIYW5kbGVyIiwibWFrZURPTUV2ZW50SGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJmb3JFYWNoIiwidGFyZ2V0IiwiZ2xvYmFsT2JqZWN0IiwidGFyZ2V0T2JqIiwicHJvdG8iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm9yaWdpbmFsQWRkRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwib3B0aW9ucyIsImhhbmRsZXJzIiwiX19zZW50cnlfaW5zdHJ1bWVudGF0aW9uX2hhbmRsZXJzX18iLCJoYW5kbGVyRm9yVHlwZSIsInJlZkNvdW50IiwiY2FsbCIsImUiLCJvcmlnaW5hbFJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiaXNTaW1pbGFyVG9MYXN0Q2FwdHVyZWRFdmVudCIsImV2ZW50IiwiX3NlbnRyeUlkIiwic2hvdWxkU2tpcERPTUV2ZW50IiwiZXZlbnRUeXBlIiwidGFnTmFtZSIsImlzQ29udGVudEVkaXRhYmxlIiwiZ2xvYmFsTGlzdGVuZXIiLCJnZXRFdmVudFRhcmdldCIsIm5hbWUiLCJoYW5kbGVyRGF0YSIsImdsb2JhbCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHistoryInstrumentationHandler: () => (/* binding */ addHistoryInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/vendor/supportsHistory.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\nlet lastHref;\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addHistoryInstrumentationHandler(handler) {\n    const type = \"history\";\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentHistory);\n}\nfunction instrumentHistory() {\n    if (!(0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.supportsHistory)()) {\n        return;\n    }\n    const oldOnPopState = _types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.onpopstate;\n    _types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.onpopstate = function(...args) {\n        const to = _types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.location.href;\n        // keep track of the current URL state, as we always receive only the updated state\n        const from = lastHref;\n        lastHref = to;\n        const handlerData = {\n            from,\n            to\n        };\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"history\", handlerData);\n        if (oldOnPopState) {\n            // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n            // https://github.com/getsentry/sentry-javascript/issues/3344\n            // https://github.com/bugsnag/bugsnag-js/issues/469\n            try {\n                return oldOnPopState.apply(this, args);\n            } catch (_oO) {\n            // no-empty\n            }\n        }\n    };\n    function historyReplacementFunction(originalHistoryFunction) {\n        return function(...args) {\n            const url = args.length > 2 ? args[2] : undefined;\n            if (url) {\n                // coerce to string (this is what pushState does)\n                const from = lastHref;\n                const to = String(url);\n                // keep track of the current URL state, as we always receive only the updated state\n                lastHref = to;\n                const handlerData = {\n                    from,\n                    to\n                };\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"history\", handlerData);\n            }\n            return originalHistoryFunction.apply(this, args);\n        };\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.fill)(_types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.history, \"pushState\", historyReplacementFunction);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.fill)(_types_js__WEBPACK_IMPORTED_MODULE_2__.WINDOW.history, \"replaceState\", historyReplacementFunction);\n}\n //# sourceMappingURL=history.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS9pbnN0cnVtZW50L2hpc3RvcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUc7QUFDOUQ7QUFFckMsSUFBSU07QUFFSjs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsaUNBQWlDQyxPQUFPO0lBQy9DLE1BQU1DLE9BQU87SUFDYlQsd0RBQVVBLENBQUNTLE1BQU1EO0lBQ2pCUCw2REFBZUEsQ0FBQ1EsTUFBTUM7QUFDeEI7QUFFQSxTQUFTQTtJQUNQLElBQUksQ0FBQ1IsNkRBQWVBLElBQUk7UUFDdEI7SUFDRjtJQUVBLE1BQU1TLGdCQUFnQk4sNkNBQU1BLENBQUNPLFVBQVU7SUFDdkNQLDZDQUFNQSxDQUFDTyxVQUFVLEdBQUcsU0FBVyxHQUFHQyxJQUFJO1FBQ3BDLE1BQU1DLEtBQUtULDZDQUFNQSxDQUFDVSxRQUFRLENBQUNDLElBQUk7UUFDL0IsbUZBQW1GO1FBQ25GLE1BQU1DLE9BQU9YO1FBQ2JBLFdBQVdRO1FBQ1gsTUFBTUksY0FBYztZQUFFRDtZQUFNSDtRQUFHO1FBQy9CWCw2REFBZUEsQ0FBQyxXQUFXZTtRQUMzQixJQUFJUCxlQUFlO1lBQ2pCLHlGQUF5RjtZQUN6Riw2REFBNkQ7WUFDN0QsbURBQW1EO1lBQ25ELElBQUk7Z0JBQ0YsT0FBT0EsY0FBY1EsS0FBSyxDQUFDLElBQUksRUFBRU47WUFDbkMsRUFBRSxPQUFPTyxLQUFLO1lBQ1osV0FBVztZQUNiO1FBQ0Y7SUFDRjtJQUVBLFNBQVNDLDJCQUEyQkMsdUJBQXVCO1FBQ3pELE9BQU8sU0FBVyxHQUFHVCxJQUFJO1lBQ3ZCLE1BQU1VLE1BQU1WLEtBQUtXLE1BQU0sR0FBRyxJQUFJWCxJQUFJLENBQUMsRUFBRSxHQUFHWTtZQUN4QyxJQUFJRixLQUFLO2dCQUNQLGlEQUFpRDtnQkFDakQsTUFBTU4sT0FBT1g7Z0JBQ2IsTUFBTVEsS0FBS1ksT0FBT0g7Z0JBQ2xCLG1GQUFtRjtnQkFDbkZqQixXQUFXUTtnQkFDWCxNQUFNSSxjQUFjO29CQUFFRDtvQkFBTUg7Z0JBQUc7Z0JBQy9CWCw2REFBZUEsQ0FBQyxXQUFXZTtZQUM3QjtZQUNBLE9BQU9JLHdCQUF3QkgsS0FBSyxDQUFDLElBQUksRUFBRU47UUFDN0M7SUFDRjtJQUVBVCxrREFBSUEsQ0FBQ0MsNkNBQU1BLENBQUNzQixPQUFPLEVBQUUsYUFBYU47SUFDbENqQixrREFBSUEsQ0FBQ0MsNkNBQU1BLENBQUNzQixPQUFPLEVBQUUsZ0JBQWdCTjtBQUN2QztBQUU0QyxDQUM1QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaW1wbGUtYmxvZy1zdHlsZWQtdGVtcGxhdGUtZm9yLWhlYWRsZXNzLWNtcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5LWludGVybmFsL2Jyb3dzZXItdXRpbHMvYnVpbGQvZXNtL2luc3RydW1lbnQvaGlzdG9yeS5qcz9kNjhiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZEhhbmRsZXIsIG1heWJlSW5zdHJ1bWVudCwgc3VwcG9ydHNIaXN0b3J5LCB0cmlnZ2VySGFuZGxlcnMsIGZpbGwgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgV0lORE9XIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuXG5sZXQgbGFzdEhyZWY7XG5cbi8qKlxuICogQWRkIGFuIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyIGZvciB3aGVuIGEgZmV0Y2ggcmVxdWVzdCBoYXBwZW5zLlxuICogVGhlIGhhbmRsZXIgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2Ugd2hlbiB0aGUgcmVxdWVzdCBzdGFydHMgYW5kIG9uY2Ugd2hlbiBpdCBlbmRzLFxuICogd2hpY2ggY2FuIGJlIGlkZW50aWZpZWQgYnkgY2hlY2tpbmcgaWYgaXQgaGFzIGFuIGBlbmRUaW1lc3RhbXBgLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEhpc3RvcnlJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdoaXN0b3J5JztcbiAgYWRkSGFuZGxlcih0eXBlLCBoYW5kbGVyKTtcbiAgbWF5YmVJbnN0cnVtZW50KHR5cGUsIGluc3RydW1lbnRIaXN0b3J5KTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudEhpc3RvcnkoKSB7XG4gIGlmICghc3VwcG9ydHNIaXN0b3J5KCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBvbGRPblBvcFN0YXRlID0gV0lORE9XLm9ucG9wc3RhdGU7XG4gIFdJTkRPVy5vbnBvcHN0YXRlID0gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgY29uc3QgdG8gPSBXSU5ET1cubG9jYXRpb24uaHJlZjtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IFVSTCBzdGF0ZSwgYXMgd2UgYWx3YXlzIHJlY2VpdmUgb25seSB0aGUgdXBkYXRlZCBzdGF0ZVxuICAgIGNvbnN0IGZyb20gPSBsYXN0SHJlZjtcbiAgICBsYXN0SHJlZiA9IHRvO1xuICAgIGNvbnN0IGhhbmRsZXJEYXRhID0geyBmcm9tLCB0byB9O1xuICAgIHRyaWdnZXJIYW5kbGVycygnaGlzdG9yeScsIGhhbmRsZXJEYXRhKTtcbiAgICBpZiAob2xkT25Qb3BTdGF0ZSkge1xuICAgICAgLy8gQXBwYXJlbnRseSB0aGlzIGNhbiB0aHJvdyBpbiBGaXJlZm94IHdoZW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50ZWQgcGx1Z2luIGlzIGluc3RhbGxlZC5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzMzNDRcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9idWdzbmFnL2J1Z3NuYWctanMvaXNzdWVzLzQ2OVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG9sZE9uUG9wU3RhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9IGNhdGNoIChfb08pIHtcbiAgICAgICAgLy8gbm8tZW1wdHlcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gaGlzdG9yeVJlcGxhY2VtZW50RnVuY3Rpb24ob3JpZ2luYWxIaXN0b3J5RnVuY3Rpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICBjb25zdCB1cmwgPSBhcmdzLmxlbmd0aCA+IDIgPyBhcmdzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKHVybCkge1xuICAgICAgICAvLyBjb2VyY2UgdG8gc3RyaW5nICh0aGlzIGlzIHdoYXQgcHVzaFN0YXRlIGRvZXMpXG4gICAgICAgIGNvbnN0IGZyb20gPSBsYXN0SHJlZjtcbiAgICAgICAgY29uc3QgdG8gPSBTdHJpbmcodXJsKTtcbiAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCBVUkwgc3RhdGUsIGFzIHdlIGFsd2F5cyByZWNlaXZlIG9ubHkgdGhlIHVwZGF0ZWQgc3RhdGVcbiAgICAgICAgbGFzdEhyZWYgPSB0bztcbiAgICAgICAgY29uc3QgaGFuZGxlckRhdGEgPSB7IGZyb20sIHRvIH07XG4gICAgICAgIHRyaWdnZXJIYW5kbGVycygnaGlzdG9yeScsIGhhbmRsZXJEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcmlnaW5hbEhpc3RvcnlGdW5jdGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9XG5cbiAgZmlsbChXSU5ET1cuaGlzdG9yeSwgJ3B1c2hTdGF0ZScsIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKTtcbiAgZmlsbChXSU5ET1cuaGlzdG9yeSwgJ3JlcGxhY2VTdGF0ZScsIGhpc3RvcnlSZXBsYWNlbWVudEZ1bmN0aW9uKTtcbn1cblxuZXhwb3J0IHsgYWRkSGlzdG9yeUluc3RydW1lbnRhdGlvbkhhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhpc3RvcnkuanMubWFwXG4iXSwibmFtZXMiOlsiYWRkSGFuZGxlciIsIm1heWJlSW5zdHJ1bWVudCIsInN1cHBvcnRzSGlzdG9yeSIsInRyaWdnZXJIYW5kbGVycyIsImZpbGwiLCJXSU5ET1ciLCJsYXN0SHJlZiIsImFkZEhpc3RvcnlJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiaGFuZGxlciIsInR5cGUiLCJpbnN0cnVtZW50SGlzdG9yeSIsIm9sZE9uUG9wU3RhdGUiLCJvbnBvcHN0YXRlIiwiYXJncyIsInRvIiwibG9jYXRpb24iLCJocmVmIiwiZnJvbSIsImhhbmRsZXJEYXRhIiwiYXBwbHkiLCJfb08iLCJoaXN0b3J5UmVwbGFjZW1lbnRGdW5jdGlvbiIsIm9yaWdpbmFsSGlzdG9yeUZ1bmN0aW9uIiwidXJsIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiU3RyaW5nIiwiaGlzdG9yeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SENTRY_XHR_DATA_KEY: () => (/* binding */ SENTRY_XHR_DATA_KEY),\n/* harmony export */   addXhrInstrumentationHandler: () => (/* binding */ addXhrInstrumentationHandler),\n/* harmony export */   instrumentXHR: () => (/* binding */ instrumentXHR)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\");\n\n\nconst SENTRY_XHR_DATA_KEY = \"__sentry_xhr_v3__\";\n/**\n * Add an instrumentation handler for when an XHR request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */ function addXhrInstrumentationHandler(handler) {\n    const type = \"xhr\";\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentXHR);\n}\n/** Exported only for tests. */ function instrumentXHR() {\n    if (!_types_js__WEBPACK_IMPORTED_MODULE_1__.WINDOW.XMLHttpRequest) {\n        return;\n    }\n    const xhrproto = XMLHttpRequest.prototype;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    xhrproto.open = new Proxy(xhrproto.open, {\n        apply (originalOpen, xhrOpenThisArg, xhrOpenArgArray) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your XHR call did not\n            //       have a stack trace. If you are using HttpClient integration,\n            //       this is the expected behavior, as we are using this virtual error to capture\n            //       the location of your XHR call, and group your HttpClient events accordingly.\n            const virtualError = new Error();\n            const startTimestamp = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.timestampInSeconds)() * 1000;\n            // open() should always be called with two or more arguments\n            // But to be on the safe side, we actually validate this and bail out if we don't have a method & url\n            const method = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(xhrOpenArgArray[0]) ? xhrOpenArgArray[0].toUpperCase() : undefined;\n            const url = parseUrl(xhrOpenArgArray[1]);\n            if (!method || !url) {\n                return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);\n            }\n            xhrOpenThisArg[SENTRY_XHR_DATA_KEY] = {\n                method,\n                url,\n                request_headers: {}\n            };\n            // if Sentry key appears in URL, don't capture it as a request\n            if (method === \"POST\" && url.match(/sentry_key/)) {\n                xhrOpenThisArg.__sentry_own_request__ = true;\n            }\n            const onreadystatechangeHandler = ()=>{\n                // For whatever reason, this is not the same instance here as from the outer method\n                const xhrInfo = xhrOpenThisArg[SENTRY_XHR_DATA_KEY];\n                if (!xhrInfo) {\n                    return;\n                }\n                if (xhrOpenThisArg.readyState === 4) {\n                    try {\n                        // touching statusCode in some platforms throws\n                        // an exception\n                        xhrInfo.status_code = xhrOpenThisArg.status;\n                    } catch (e) {\n                    /* do nothing */ }\n                    const handlerData = {\n                        endTimestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.timestampInSeconds)() * 1000,\n                        startTimestamp,\n                        xhr: xhrOpenThisArg,\n                        virtualError\n                    };\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"xhr\", handlerData);\n                }\n            };\n            if (\"onreadystatechange\" in xhrOpenThisArg && typeof xhrOpenThisArg.onreadystatechange === \"function\") {\n                xhrOpenThisArg.onreadystatechange = new Proxy(xhrOpenThisArg.onreadystatechange, {\n                    apply (originalOnreadystatechange, onreadystatechangeThisArg, onreadystatechangeArgArray) {\n                        onreadystatechangeHandler();\n                        return originalOnreadystatechange.apply(onreadystatechangeThisArg, onreadystatechangeArgArray);\n                    }\n                });\n            } else {\n                xhrOpenThisArg.addEventListener(\"readystatechange\", onreadystatechangeHandler);\n            }\n            // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n            // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n            // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n            xhrOpenThisArg.setRequestHeader = new Proxy(xhrOpenThisArg.setRequestHeader, {\n                apply (originalSetRequestHeader, setRequestHeaderThisArg, setRequestHeaderArgArray) {\n                    const [header, value] = setRequestHeaderArgArray;\n                    const xhrInfo = setRequestHeaderThisArg[SENTRY_XHR_DATA_KEY];\n                    if (xhrInfo && (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(header) && (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(value)) {\n                        xhrInfo.request_headers[header.toLowerCase()] = value;\n                    }\n                    return originalSetRequestHeader.apply(setRequestHeaderThisArg, setRequestHeaderArgArray);\n                }\n            });\n            return originalOpen.apply(xhrOpenThisArg, xhrOpenArgArray);\n        }\n    });\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    xhrproto.send = new Proxy(xhrproto.send, {\n        apply (originalSend, sendThisArg, sendArgArray) {\n            const sentryXhrData = sendThisArg[SENTRY_XHR_DATA_KEY];\n            if (!sentryXhrData) {\n                return originalSend.apply(sendThisArg, sendArgArray);\n            }\n            if (sendArgArray[0] !== undefined) {\n                sentryXhrData.body = sendArgArray[0];\n            }\n            const handlerData = {\n                startTimestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.timestampInSeconds)() * 1000,\n                xhr: sendThisArg\n            };\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)(\"xhr\", handlerData);\n            return originalSend.apply(sendThisArg, sendArgArray);\n        }\n    });\n}\nfunction parseUrl(url) {\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.isString)(url)) {\n        return url;\n    }\n    try {\n        // url can be a string or URL\n        // but since URL is not available in IE11, we do not check for it,\n        // but simply assume it is an URL and return `toString()` from it (which returns the full URL)\n        // If that fails, we just return undefined\n        return url.toString();\n    } catch (e2) {} // eslint-disable-line no-empty\n    return undefined;\n}\n //# sourceMappingURL=xhr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry-internal/browser-utils/build/esm/types.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WINDOW: () => (/* binding */ WINDOW)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\nconst WINDOW = _sentry_core__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS1pbnRlcm5hbC9icm93c2VyLXV0aWxzL2J1aWxkL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUUxQyxNQUFNQyxTQUFTRCxvREFBVUE7QUFJUCxDQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaW1wbGUtYmxvZy1zdHlsZWQtdGVtcGxhdGUtZm9yLWhlYWRsZXNzLWNtcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5LWludGVybmFsL2Jyb3dzZXItdXRpbHMvYnVpbGQvZXNtL3R5cGVzLmpzPzA4YWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbmNvbnN0IFdJTkRPVyA9IEdMT0JBTF9PQkpcblxuO1xuXG5leHBvcnQgeyBXSU5ET1cgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkdMT0JBTF9PQkoiLCJXSU5ET1ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sentry-internal/browser-utils/build/esm/types.js\n");

/***/ })

};
;