/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @lightSyntaxTransform\n * @noflow\n * @nolint\n * @preventMunge\n * @preserve-invariant-messages\n */ \"use no memo\";\n\"use strict\";\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/ _interopNamespaceDefault(React);\nvar _a, _b;\nconst { useRef, useEffect, isValidElement } = React__namespace;\nconst ReactSecretInternals = (_a = React__namespace.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE) !== null && _a !== void 0 ? _a : React__namespace.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\nconst $empty = Symbol.for(\"react.memo_cache_sentinel\");\nconst c = typeof ((_b = React__namespace.__COMPILER_RUNTIME) === null || _b === void 0 ? void 0 : _b.c) === \"function\" ? React__namespace.__COMPILER_RUNTIME.c : function c(size) {\n    return React__namespace.useMemo(()=>{\n        const $ = new Array(size);\n        for(let ii = 0; ii < size; ii++){\n            $[ii] = $empty;\n        }\n        $[$empty] = true;\n        return $;\n    }, []);\n};\nconst LazyGuardDispatcher = {};\n[\n    \"readContext\",\n    \"useCallback\",\n    \"useContext\",\n    \"useEffect\",\n    \"useImperativeHandle\",\n    \"useInsertionEffect\",\n    \"useLayoutEffect\",\n    \"useMemo\",\n    \"useReducer\",\n    \"useRef\",\n    \"useState\",\n    \"useDebugValue\",\n    \"useDeferredValue\",\n    \"useTransition\",\n    \"useMutableSource\",\n    \"useSyncExternalStore\",\n    \"useId\",\n    \"unstable_isNewReconciler\",\n    \"getCacheSignal\",\n    \"getCacheForType\",\n    \"useCacheRefresh\"\n].forEach((name)=>{\n    LazyGuardDispatcher[name] = ()=>{\n        throw new Error(`[React] Unexpected React hook call (${name}) from a React compiled function. ` + \"Check that all hooks are called directly and named according to convention ('use[A-Z]') \");\n    };\n});\nlet originalDispatcher = null;\nLazyGuardDispatcher[\"useMemoCache\"] = (count)=>{\n    if (originalDispatcher == null) {\n        throw new Error(\"React Compiler internal invariant violation: unexpected null dispatcher\");\n    } else {\n        return originalDispatcher.useMemoCache(count);\n    }\n};\nvar GuardKind;\n(function(GuardKind) {\n    GuardKind[GuardKind[\"PushGuardContext\"] = 0] = \"PushGuardContext\";\n    GuardKind[GuardKind[\"PopGuardContext\"] = 1] = \"PopGuardContext\";\n    GuardKind[GuardKind[\"PushExpectHook\"] = 2] = \"PushExpectHook\";\n    GuardKind[GuardKind[\"PopExpectHook\"] = 3] = \"PopExpectHook\";\n})(GuardKind || (GuardKind = {}));\nfunction setCurrent(newDispatcher) {\n    ReactSecretInternals.ReactCurrentDispatcher.current = newDispatcher;\n    return ReactSecretInternals.ReactCurrentDispatcher.current;\n}\nconst guardFrames = [];\nfunction $dispatcherGuard(kind) {\n    const curr = ReactSecretInternals.ReactCurrentDispatcher.current;\n    if (kind === GuardKind.PushGuardContext) {\n        guardFrames.push(curr);\n        if (guardFrames.length === 1) {\n            originalDispatcher = curr;\n        }\n        if (curr === LazyGuardDispatcher) {\n            throw new Error(`[React] Unexpected call to custom hook or component from a React compiled function. ` + \"Check that (1) all hooks are called directly and named according to convention ('use[A-Z]') \" + \"and (2) components are returned as JSX instead of being directly invoked.\");\n        }\n        setCurrent(LazyGuardDispatcher);\n    } else if (kind === GuardKind.PopGuardContext) {\n        const lastFrame = guardFrames.pop();\n        if (lastFrame == null) {\n            throw new Error(\"React Compiler internal error: unexpected null in guard stack\");\n        }\n        if (guardFrames.length === 0) {\n            originalDispatcher = null;\n        }\n        setCurrent(lastFrame);\n    } else if (kind === GuardKind.PushExpectHook) {\n        guardFrames.push(curr);\n        setCurrent(originalDispatcher);\n    } else if (kind === GuardKind.PopExpectHook) {\n        const lastFrame = guardFrames.pop();\n        if (lastFrame == null) {\n            throw new Error(\"React Compiler internal error: unexpected null in guard stack\");\n        }\n        setCurrent(lastFrame);\n    } else {\n        throw new Error(\"React Compiler internal error: unreachable block\" + kind);\n    }\n}\nfunction $reset($) {\n    for(let ii = 0; ii < $.length; ii++){\n        $[ii] = $empty;\n    }\n}\nfunction $makeReadOnly() {\n    throw new Error(\"TODO: implement $makeReadOnly in react-compiler-runtime\");\n}\nconst renderCounterRegistry = new Map();\nfunction clearRenderCounterRegistry() {\n    for (const counters of renderCounterRegistry.values()){\n        counters.forEach((counter)=>{\n            counter.count = 0;\n        });\n    }\n}\nfunction registerRenderCounter(name, val) {\n    let counters = renderCounterRegistry.get(name);\n    if (counters == null) {\n        counters = new Set();\n        renderCounterRegistry.set(name, counters);\n    }\n    counters.add(val);\n}\nfunction removeRenderCounter(name, val) {\n    const counters = renderCounterRegistry.get(name);\n    if (counters == null) {\n        return;\n    }\n    counters.delete(val);\n}\nfunction useRenderCounter(name) {\n    const val = useRef(null);\n    if (val.current != null) {\n        val.current.count += 1;\n    }\n    useEffect(()=>{\n        if (val.current == null) {\n            const counter = {\n                count: 0\n            };\n            registerRenderCounter(name, counter);\n            val.current = counter;\n        }\n        return ()=>{\n            if (val.current !== null) {\n                removeRenderCounter(name, val.current);\n            }\n        };\n    });\n}\nconst seenErrors = new Set();\nfunction $structuralCheck(oldValue, newValue, variableName, fnName, kind, loc) {\n    function error(l, r, path, depth) {\n        const str = `${fnName}:${loc} [${kind}] ${variableName}${path} changed from ${l} to ${r} at depth ${depth}`;\n        if (seenErrors.has(str)) {\n            return;\n        }\n        seenErrors.add(str);\n        console.error(str);\n    }\n    const depthLimit = 2;\n    function recur(oldValue, newValue, path, depth) {\n        if (depth > depthLimit) {\n            return;\n        } else if (oldValue === newValue) {\n            return;\n        } else if (typeof oldValue !== typeof newValue) {\n            error(`type ${typeof oldValue}`, `type ${typeof newValue}`, path, depth);\n        } else if (typeof oldValue === \"object\") {\n            const oldArray = Array.isArray(oldValue);\n            const newArray = Array.isArray(newValue);\n            if (oldValue === null && newValue !== null) {\n                error(\"null\", `type ${typeof newValue}`, path, depth);\n            } else if (newValue === null) {\n                error(`type ${typeof oldValue}`, \"null\", path, depth);\n            } else if (oldValue instanceof Map) {\n                if (!(newValue instanceof Map)) {\n                    error(`Map instance`, `other value`, path, depth);\n                } else if (oldValue.size !== newValue.size) {\n                    error(`Map instance with size ${oldValue.size}`, `Map instance with size ${newValue.size}`, path, depth);\n                } else {\n                    for (const [k, v] of oldValue){\n                        if (!newValue.has(k)) {\n                            error(`Map instance with key ${k}`, `Map instance without key ${k}`, path, depth);\n                        } else {\n                            recur(v, newValue.get(k), `${path}.get(${k})`, depth + 1);\n                        }\n                    }\n                }\n            } else if (newValue instanceof Map) {\n                error(\"other value\", `Map instance`, path, depth);\n            } else if (oldValue instanceof Set) {\n                if (!(newValue instanceof Set)) {\n                    error(`Set instance`, `other value`, path, depth);\n                } else if (oldValue.size !== newValue.size) {\n                    error(`Set instance with size ${oldValue.size}`, `Set instance with size ${newValue.size}`, path, depth);\n                } else {\n                    for (const v of newValue){\n                        if (!oldValue.has(v)) {\n                            error(`Set instance without element ${v}`, `Set instance with element ${v}`, path, depth);\n                        }\n                    }\n                }\n            } else if (newValue instanceof Set) {\n                error(\"other value\", `Set instance`, path, depth);\n            } else if (oldArray || newArray) {\n                if (oldArray !== newArray) {\n                    error(`type ${oldArray ? \"array\" : \"object\"}`, `type ${newArray ? \"array\" : \"object\"}`, path, depth);\n                } else if (oldValue.length !== newValue.length) {\n                    error(`array with length ${oldValue.length}`, `array with length ${newValue.length}`, path, depth);\n                } else {\n                    for(let ii = 0; ii < oldValue.length; ii++){\n                        recur(oldValue[ii], newValue[ii], `${path}[${ii}]`, depth + 1);\n                    }\n                }\n            } else if (isValidElement(oldValue) || isValidElement(newValue)) {\n                if (isValidElement(oldValue) !== isValidElement(newValue)) {\n                    error(`type ${isValidElement(oldValue) ? \"React element\" : \"object\"}`, `type ${isValidElement(newValue) ? \"React element\" : \"object\"}`, path, depth);\n                } else if (oldValue.type !== newValue.type) {\n                    error(`React element of type ${oldValue.type}`, `React element of type ${newValue.type}`, path, depth);\n                } else {\n                    recur(oldValue.props, newValue.props, `[props of ${path}]`, depth + 1);\n                }\n            } else {\n                for(const key in newValue){\n                    if (!(key in oldValue)) {\n                        error(`object without key ${key}`, `object with key ${key}`, path, depth);\n                    }\n                }\n                for(const key in oldValue){\n                    if (!(key in newValue)) {\n                        error(`object with key ${key}`, `object without key ${key}`, path, depth);\n                    } else {\n                        recur(oldValue[key], newValue[key], `${path}.${key}`, depth + 1);\n                    }\n                }\n            }\n        } else if (typeof oldValue === \"function\") {\n            return;\n        } else if (isNaN(oldValue) || isNaN(newValue)) {\n            if (isNaN(oldValue) !== isNaN(newValue)) {\n                error(`${isNaN(oldValue) ? \"NaN\" : \"non-NaN value\"}`, `${isNaN(newValue) ? \"NaN\" : \"non-NaN value\"}`, path, depth);\n            }\n        } else if (oldValue !== newValue) {\n            error(oldValue, newValue, path, depth);\n        }\n    }\n    recur(oldValue, newValue, \"\", 0);\n}\nexports.$dispatcherGuard = $dispatcherGuard;\nexports.$makeReadOnly = $makeReadOnly;\nexports.$reset = $reset;\nexports.$structuralCheck = $structuralCheck;\nexports.c = c;\nexports.clearRenderCounterRegistry = clearRenderCounterRegistry;\nexports.renderCounterRegistry = renderCounterRegistry;\nexports.useRenderCounter = useRenderCounter; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3Ivbm9kZV9tb2R1bGVzL3JlYWN0LWNvbXBpbGVyLXJ1bnRpbWUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUVEO0FBQWM7QUFFZCxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUVwQixTQUFTQyx5QkFBeUJDLENBQUM7SUFDL0IsSUFBSUMsSUFBSUMsT0FBT0MsTUFBTSxDQUFDO0lBQ3RCLElBQUlILEdBQUc7UUFDSEUsT0FBT0UsSUFBSSxDQUFDSixHQUFHSyxPQUFPLENBQUMsU0FBVUMsQ0FBQztZQUM5QixJQUFJQSxNQUFNLFdBQVc7Z0JBQ2pCLElBQUlDLElBQUlMLE9BQU9NLHdCQUF3QixDQUFDUixHQUFHTTtnQkFDM0NKLE9BQU9PLGNBQWMsQ0FBQ1IsR0FBR0ssR0FBR0MsRUFBRUcsR0FBRyxHQUFHSCxJQUFJO29CQUNwQ0ksWUFBWTtvQkFDWkQsS0FBSzt3QkFBYyxPQUFPVixDQUFDLENBQUNNLEVBQUU7b0JBQUU7Z0JBQ3BDO1lBQ0o7UUFDSjtJQUNKO0lBQ0FMLEVBQUVXLE9BQU8sR0FBR1o7SUFDWixPQUFPRSxPQUFPVyxNQUFNLENBQUNaO0FBQ3pCO0FBRUEsSUFBSWEsbUJBQW1CLFdBQVcsR0FBRWYseUJBQXlCRjtBQUU3RCxJQUFJa0IsSUFBSUM7QUFDUixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxjQUFjLEVBQUUsR0FBR0w7QUFDOUMsTUFBTU0sdUJBQXVCLENBQUNMLEtBQUtELGlCQUFpQk8sK0RBQStELE1BQU0sUUFBUU4sT0FBTyxLQUFLLElBQUlBLEtBQUtELGlCQUFpQlEsa0RBQWtEO0FBQ3pOLE1BQU1DLFNBQVNDLE9BQU9DLEdBQUcsQ0FBQztBQUMxQixNQUFNQyxJQUFJLE9BQVEsRUFBQ1YsS0FBS0YsaUJBQWlCYSxrQkFBa0IsTUFBTSxRQUFRWCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdVLENBQUMsTUFBTSxhQUVwR1osaUJBQWlCYSxrQkFBa0IsQ0FBQ0QsQ0FBQyxHQUN2QyxTQUFTQSxFQUFFRSxJQUFJO0lBQ2IsT0FBT2QsaUJBQWlCZSxPQUFPLENBQUM7UUFDNUIsTUFBTUMsSUFBSSxJQUFJQyxNQUFNSDtRQUNwQixJQUFLLElBQUlJLEtBQUssR0FBR0EsS0FBS0osTUFBTUksS0FBTTtZQUM5QkYsQ0FBQyxDQUFDRSxHQUFHLEdBQUdUO1FBQ1o7UUFDQU8sQ0FBQyxDQUFDUCxPQUFPLEdBQUc7UUFDWixPQUFPTztJQUNYLEdBQUcsRUFBRTtBQUNUO0FBQ0osTUFBTUcsc0JBQXNCLENBQUM7QUFDN0I7SUFDSTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSCxDQUFDNUIsT0FBTyxDQUFDNkIsQ0FBQUE7SUFDTkQsbUJBQW1CLENBQUNDLEtBQUssR0FBRztRQUN4QixNQUFNLElBQUlDLE1BQU0sQ0FBQyxvQ0FBb0MsRUFBRUQsS0FBSyxrQ0FBa0MsQ0FBQyxHQUMzRjtJQUNSO0FBQ0o7QUFDQSxJQUFJRSxxQkFBcUI7QUFDekJILG1CQUFtQixDQUFDLGVBQWUsR0FBRyxDQUFDSTtJQUNuQyxJQUFJRCxzQkFBc0IsTUFBTTtRQUM1QixNQUFNLElBQUlELE1BQU07SUFDcEIsT0FDSztRQUNELE9BQU9DLG1CQUFtQkUsWUFBWSxDQUFDRDtJQUMzQztBQUNKO0FBQ0EsSUFBSUU7QUFDSCxVQUFVQSxTQUFTO0lBQ2hCQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUc7SUFDL0NBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGtCQUFrQixHQUFHLEVBQUUsR0FBRztJQUM5Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxHQUFHO0lBQzdDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLEdBQUc7QUFDaEQsR0FBR0EsYUFBY0EsQ0FBQUEsWUFBWSxDQUFDO0FBQzlCLFNBQVNDLFdBQVdDLGFBQWE7SUFDN0JyQixxQkFBcUJzQixzQkFBc0IsQ0FBQ0MsT0FBTyxHQUFHRjtJQUN0RCxPQUFPckIscUJBQXFCc0Isc0JBQXNCLENBQUNDLE9BQU87QUFDOUQ7QUFDQSxNQUFNQyxjQUFjLEVBQUU7QUFDdEIsU0FBU0MsaUJBQWlCQyxJQUFJO0lBQzFCLE1BQU1DLE9BQU8zQixxQkFBcUJzQixzQkFBc0IsQ0FBQ0MsT0FBTztJQUNoRSxJQUFJRyxTQUFTUCxVQUFVUyxnQkFBZ0IsRUFBRTtRQUNyQ0osWUFBWUssSUFBSSxDQUFDRjtRQUNqQixJQUFJSCxZQUFZTSxNQUFNLEtBQUssR0FBRztZQUMxQmQscUJBQXFCVztRQUN6QjtRQUNBLElBQUlBLFNBQVNkLHFCQUFxQjtZQUM5QixNQUFNLElBQUlFLE1BQU0sQ0FBQyxvRkFBb0YsQ0FBQyxHQUNsRyxpR0FDQTtRQUNSO1FBQ0FLLFdBQVdQO0lBQ2YsT0FDSyxJQUFJYSxTQUFTUCxVQUFVWSxlQUFlLEVBQUU7UUFDekMsTUFBTUMsWUFBWVIsWUFBWVMsR0FBRztRQUNqQyxJQUFJRCxhQUFhLE1BQU07WUFDbkIsTUFBTSxJQUFJakIsTUFBTTtRQUNwQjtRQUNBLElBQUlTLFlBQVlNLE1BQU0sS0FBSyxHQUFHO1lBQzFCZCxxQkFBcUI7UUFDekI7UUFDQUksV0FBV1k7SUFDZixPQUNLLElBQUlOLFNBQVNQLFVBQVVlLGNBQWMsRUFBRTtRQUN4Q1YsWUFBWUssSUFBSSxDQUFDRjtRQUNqQlAsV0FBV0o7SUFDZixPQUNLLElBQUlVLFNBQVNQLFVBQVVnQixhQUFhLEVBQUU7UUFDdkMsTUFBTUgsWUFBWVIsWUFBWVMsR0FBRztRQUNqQyxJQUFJRCxhQUFhLE1BQU07WUFDbkIsTUFBTSxJQUFJakIsTUFBTTtRQUNwQjtRQUNBSyxXQUFXWTtJQUNmLE9BQ0s7UUFDRCxNQUFNLElBQUlqQixNQUFNLHFEQUFxRFc7SUFDekU7QUFDSjtBQUNBLFNBQVNVLE9BQU8xQixDQUFDO0lBQ2IsSUFBSyxJQUFJRSxLQUFLLEdBQUdBLEtBQUtGLEVBQUVvQixNQUFNLEVBQUVsQixLQUFNO1FBQ2xDRixDQUFDLENBQUNFLEdBQUcsR0FBR1Q7SUFDWjtBQUNKO0FBQ0EsU0FBU2tDO0lBQ0wsTUFBTSxJQUFJdEIsTUFBTTtBQUNwQjtBQUNBLE1BQU11Qix3QkFBd0IsSUFBSUM7QUFDbEMsU0FBU0M7SUFDTCxLQUFLLE1BQU1DLFlBQVlILHNCQUFzQkksTUFBTSxHQUFJO1FBQ25ERCxTQUFTeEQsT0FBTyxDQUFDMEQsQ0FBQUE7WUFDYkEsUUFBUTFCLEtBQUssR0FBRztRQUNwQjtJQUNKO0FBQ0o7QUFDQSxTQUFTMkIsc0JBQXNCOUIsSUFBSSxFQUFFK0IsR0FBRztJQUNwQyxJQUFJSixXQUFXSCxzQkFBc0JoRCxHQUFHLENBQUN3QjtJQUN6QyxJQUFJMkIsWUFBWSxNQUFNO1FBQ2xCQSxXQUFXLElBQUlLO1FBQ2ZSLHNCQUFzQlMsR0FBRyxDQUFDakMsTUFBTTJCO0lBQ3BDO0lBQ0FBLFNBQVNPLEdBQUcsQ0FBQ0g7QUFDakI7QUFDQSxTQUFTSSxvQkFBb0JuQyxJQUFJLEVBQUUrQixHQUFHO0lBQ2xDLE1BQU1KLFdBQVdILHNCQUFzQmhELEdBQUcsQ0FBQ3dCO0lBQzNDLElBQUkyQixZQUFZLE1BQU07UUFDbEI7SUFDSjtJQUNBQSxTQUFTUyxNQUFNLENBQUNMO0FBQ3BCO0FBQ0EsU0FBU00saUJBQWlCckMsSUFBSTtJQUMxQixNQUFNK0IsTUFBTWhELE9BQU87SUFDbkIsSUFBSWdELElBQUl0QixPQUFPLElBQUksTUFBTTtRQUNyQnNCLElBQUl0QixPQUFPLENBQUNOLEtBQUssSUFBSTtJQUN6QjtJQUNBbkIsVUFBVTtRQUNOLElBQUkrQyxJQUFJdEIsT0FBTyxJQUFJLE1BQU07WUFDckIsTUFBTW9CLFVBQVU7Z0JBQUUxQixPQUFPO1lBQUU7WUFDM0IyQixzQkFBc0I5QixNQUFNNkI7WUFDNUJFLElBQUl0QixPQUFPLEdBQUdvQjtRQUNsQjtRQUNBLE9BQU87WUFDSCxJQUFJRSxJQUFJdEIsT0FBTyxLQUFLLE1BQU07Z0JBQ3RCMEIsb0JBQW9CbkMsTUFBTStCLElBQUl0QixPQUFPO1lBQ3pDO1FBQ0o7SUFDSjtBQUNKO0FBQ0EsTUFBTTZCLGFBQWEsSUFBSU47QUFDdkIsU0FBU08saUJBQWlCQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsWUFBWSxFQUFFQyxNQUFNLEVBQUUvQixJQUFJLEVBQUVnQyxHQUFHO0lBQ3pFLFNBQVNDLE1BQU1DLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUVDLEtBQUs7UUFDNUIsTUFBTUMsTUFBTSxDQUFDLEVBQUVQLE9BQU8sQ0FBQyxFQUFFQyxJQUFJLEVBQUUsRUFBRWhDLEtBQUssRUFBRSxFQUFFOEIsYUFBYSxFQUFFTSxLQUFLLGNBQWMsRUFBRUYsRUFBRSxJQUFJLEVBQUVDLEVBQUUsVUFBVSxFQUFFRSxNQUFNLENBQUM7UUFDM0csSUFBSVgsV0FBV2EsR0FBRyxDQUFDRCxNQUFNO1lBQ3JCO1FBQ0o7UUFDQVosV0FBV0osR0FBRyxDQUFDZ0I7UUFDZkUsUUFBUVAsS0FBSyxDQUFDSztJQUNsQjtJQUNBLE1BQU1HLGFBQWE7SUFDbkIsU0FBU0MsTUFBTWQsUUFBUSxFQUFFQyxRQUFRLEVBQUVPLElBQUksRUFBRUMsS0FBSztRQUMxQyxJQUFJQSxRQUFRSSxZQUFZO1lBQ3BCO1FBQ0osT0FDSyxJQUFJYixhQUFhQyxVQUFVO1lBQzVCO1FBQ0osT0FDSyxJQUFJLE9BQU9ELGFBQWEsT0FBT0MsVUFBVTtZQUMxQ0ksTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPTCxTQUFTLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPQyxTQUFTLENBQUMsRUFBRU8sTUFBTUM7UUFDdEUsT0FDSyxJQUFJLE9BQU9ULGFBQWEsVUFBVTtZQUNuQyxNQUFNZSxXQUFXMUQsTUFBTTJELE9BQU8sQ0FBQ2hCO1lBQy9CLE1BQU1pQixXQUFXNUQsTUFBTTJELE9BQU8sQ0FBQ2Y7WUFDL0IsSUFBSUQsYUFBYSxRQUFRQyxhQUFhLE1BQU07Z0JBQ3hDSSxNQUFNLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBT0osU0FBUyxDQUFDLEVBQUVPLE1BQU1DO1lBQ25ELE9BQ0ssSUFBSVIsYUFBYSxNQUFNO2dCQUN4QkksTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPTCxTQUFTLENBQUMsRUFBRSxRQUFRUSxNQUFNQztZQUNuRCxPQUNLLElBQUlULG9CQUFvQmYsS0FBSztnQkFDOUIsSUFBSSxDQUFFZ0IsQ0FBQUEsb0JBQW9CaEIsR0FBRSxHQUFJO29CQUM1Qm9CLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFRyxNQUFNQztnQkFDL0MsT0FDSyxJQUFJVCxTQUFTOUMsSUFBSSxLQUFLK0MsU0FBUy9DLElBQUksRUFBRTtvQkFDdENtRCxNQUFNLENBQUMsdUJBQXVCLEVBQUVMLFNBQVM5QyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUrQyxTQUFTL0MsSUFBSSxDQUFDLENBQUMsRUFBRXNELE1BQU1DO2dCQUN0RyxPQUNLO29CQUNELEtBQUssTUFBTSxDQUFDN0UsR0FBR3NGLEVBQUUsSUFBSWxCLFNBQVU7d0JBQzNCLElBQUksQ0FBQ0MsU0FBU1UsR0FBRyxDQUFDL0UsSUFBSTs0QkFDbEJ5RSxNQUFNLENBQUMsc0JBQXNCLEVBQUV6RSxFQUFFLENBQUMsRUFBRSxDQUFDLHlCQUF5QixFQUFFQSxFQUFFLENBQUMsRUFBRTRFLE1BQU1DO3dCQUMvRSxPQUNLOzRCQUNESyxNQUFNSSxHQUFHakIsU0FBU2pFLEdBQUcsQ0FBQ0osSUFBSSxDQUFDLEVBQUU0RSxLQUFLLEtBQUssRUFBRTVFLEVBQUUsQ0FBQyxDQUFDLEVBQUU2RSxRQUFRO3dCQUMzRDtvQkFDSjtnQkFDSjtZQUNKLE9BQ0ssSUFBSVIsb0JBQW9CaEIsS0FBSztnQkFDOUJvQixNQUFNLGVBQWUsQ0FBQyxZQUFZLENBQUMsRUFBRUcsTUFBTUM7WUFDL0MsT0FDSyxJQUFJVCxvQkFBb0JSLEtBQUs7Z0JBQzlCLElBQUksQ0FBRVMsQ0FBQUEsb0JBQW9CVCxHQUFFLEdBQUk7b0JBQzVCYSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRUcsTUFBTUM7Z0JBQy9DLE9BQ0ssSUFBSVQsU0FBUzlDLElBQUksS0FBSytDLFNBQVMvQyxJQUFJLEVBQUU7b0JBQ3RDbUQsTUFBTSxDQUFDLHVCQUF1QixFQUFFTCxTQUFTOUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLHVCQUF1QixFQUFFK0MsU0FBUy9DLElBQUksQ0FBQyxDQUFDLEVBQUVzRCxNQUFNQztnQkFDdEcsT0FDSztvQkFDRCxLQUFLLE1BQU1TLEtBQUtqQixTQUFVO3dCQUN0QixJQUFJLENBQUNELFNBQVNXLEdBQUcsQ0FBQ08sSUFBSTs0QkFDbEJiLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRWEsRUFBRSxDQUFDLEVBQUUsQ0FBQywwQkFBMEIsRUFBRUEsRUFBRSxDQUFDLEVBQUVWLE1BQU1DO3dCQUN2RjtvQkFDSjtnQkFDSjtZQUNKLE9BQ0ssSUFBSVIsb0JBQW9CVCxLQUFLO2dCQUM5QmEsTUFBTSxlQUFlLENBQUMsWUFBWSxDQUFDLEVBQUVHLE1BQU1DO1lBQy9DLE9BQ0ssSUFBSU0sWUFBWUUsVUFBVTtnQkFDM0IsSUFBSUYsYUFBYUUsVUFBVTtvQkFDdkJaLE1BQU0sQ0FBQyxLQUFLLEVBQUVVLFdBQVcsVUFBVSxTQUFTLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRUUsV0FBVyxVQUFVLFNBQVMsQ0FBQyxFQUFFVCxNQUFNQztnQkFDbEcsT0FDSyxJQUFJVCxTQUFTeEIsTUFBTSxLQUFLeUIsU0FBU3pCLE1BQU0sRUFBRTtvQkFDMUM2QixNQUFNLENBQUMsa0JBQWtCLEVBQUVMLFNBQVN4QixNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUV5QixTQUFTekIsTUFBTSxDQUFDLENBQUMsRUFBRWdDLE1BQU1DO2dCQUNoRyxPQUNLO29CQUNELElBQUssSUFBSW5ELEtBQUssR0FBR0EsS0FBSzBDLFNBQVN4QixNQUFNLEVBQUVsQixLQUFNO3dCQUN6Q3dELE1BQU1kLFFBQVEsQ0FBQzFDLEdBQUcsRUFBRTJDLFFBQVEsQ0FBQzNDLEdBQUcsRUFBRSxDQUFDLEVBQUVrRCxLQUFLLENBQUMsRUFBRWxELEdBQUcsQ0FBQyxDQUFDLEVBQUVtRCxRQUFRO29CQUNoRTtnQkFDSjtZQUNKLE9BQ0ssSUFBSWhFLGVBQWV1RCxhQUFhdkQsZUFBZXdELFdBQVc7Z0JBQzNELElBQUl4RCxlQUFldUQsY0FBY3ZELGVBQWV3RCxXQUFXO29CQUN2REksTUFBTSxDQUFDLEtBQUssRUFBRTVELGVBQWV1RCxZQUFZLGtCQUFrQixTQUFTLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRXZELGVBQWV3RCxZQUFZLGtCQUFrQixTQUFTLENBQUMsRUFBRU8sTUFBTUM7Z0JBQ2xKLE9BQ0ssSUFBSVQsU0FBU21CLElBQUksS0FBS2xCLFNBQVNrQixJQUFJLEVBQUU7b0JBQ3RDZCxNQUFNLENBQUMsc0JBQXNCLEVBQUVMLFNBQVNtQixJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLEVBQUVsQixTQUFTa0IsSUFBSSxDQUFDLENBQUMsRUFBRVgsTUFBTUM7Z0JBQ3BHLE9BQ0s7b0JBQ0RLLE1BQU1kLFNBQVNvQixLQUFLLEVBQUVuQixTQUFTbUIsS0FBSyxFQUFFLENBQUMsVUFBVSxFQUFFWixLQUFLLENBQUMsQ0FBQyxFQUFFQyxRQUFRO2dCQUN4RTtZQUNKLE9BQ0s7Z0JBQ0QsSUFBSyxNQUFNWSxPQUFPcEIsU0FBVTtvQkFDeEIsSUFBSSxDQUFFb0IsQ0FBQUEsT0FBT3JCLFFBQU8sR0FBSTt3QkFDcEJLLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRWdCLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUVBLElBQUksQ0FBQyxFQUFFYixNQUFNQztvQkFDdkU7Z0JBQ0o7Z0JBQ0EsSUFBSyxNQUFNWSxPQUFPckIsU0FBVTtvQkFDeEIsSUFBSSxDQUFFcUIsQ0FBQUEsT0FBT3BCLFFBQU8sR0FBSTt3QkFDcEJJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRWdCLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUVBLElBQUksQ0FBQyxFQUFFYixNQUFNQztvQkFDdkUsT0FDSzt3QkFDREssTUFBTWQsUUFBUSxDQUFDcUIsSUFBSSxFQUFFcEIsUUFBUSxDQUFDb0IsSUFBSSxFQUFFLENBQUMsRUFBRWIsS0FBSyxDQUFDLEVBQUVhLElBQUksQ0FBQyxFQUFFWixRQUFRO29CQUNsRTtnQkFDSjtZQUNKO1FBQ0osT0FDSyxJQUFJLE9BQU9ULGFBQWEsWUFBWTtZQUNyQztRQUNKLE9BQ0ssSUFBSXNCLE1BQU10QixhQUFhc0IsTUFBTXJCLFdBQVc7WUFDekMsSUFBSXFCLE1BQU10QixjQUFjc0IsTUFBTXJCLFdBQVc7Z0JBQ3JDSSxNQUFNLENBQUMsRUFBRWlCLE1BQU10QixZQUFZLFFBQVEsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEVBQUVzQixNQUFNckIsWUFBWSxRQUFRLGdCQUFnQixDQUFDLEVBQUVPLE1BQU1DO1lBQ2hIO1FBQ0osT0FDSyxJQUFJVCxhQUFhQyxVQUFVO1lBQzVCSSxNQUFNTCxVQUFVQyxVQUFVTyxNQUFNQztRQUNwQztJQUNKO0lBQ0FLLE1BQU1kLFVBQVVDLFVBQVUsSUFBSTtBQUNsQztBQUVBc0Isd0JBQXdCLEdBQUdwRDtBQUMzQm9ELHFCQUFxQixHQUFHeEM7QUFDeEJ3QyxjQUFjLEdBQUd6QztBQUNqQnlDLHdCQUF3QixHQUFHeEI7QUFDM0J3QixTQUFTLEdBQUd2RTtBQUNadUUsa0NBQWtDLEdBQUdyQztBQUNyQ3FDLDZCQUE2QixHQUFHdkM7QUFDaEN1Qyx3QkFBd0IsR0FBRzFCLGtCQUMzQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaW1wbGUtYmxvZy1zdHlsZWQtdGVtcGxhdGUtZm9yLWhlYWRsZXNzLWNtcy8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9ub2RlX21vZHVsZXMvcmVhY3QtY29tcGlsZXItcnVudGltZS9kaXN0L2luZGV4LmpzPzJmNWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWdodFN5bnRheFRyYW5zZm9ybVxuICogQG5vZmxvd1xuICogQG5vbGludFxuICogQHByZXZlbnRNdW5nZVxuICogQHByZXNlcnZlLWludmFyaWFudC1tZXNzYWdlc1xuICovXG5cblwidXNlIG5vIG1lbW9cIjsndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdChlKSB7XG4gICAgdmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGlmIChlKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgIGlmIChrICE9PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIGssIGQuZ2V0ID8gZCA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlW2tdOyB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBuLmRlZmF1bHQgPSBlO1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKG4pO1xufVxuXG52YXIgUmVhY3RfX25hbWVzcGFjZSA9IC8qI19fUFVSRV9fKi9faW50ZXJvcE5hbWVzcGFjZURlZmF1bHQoUmVhY3QpO1xuXG52YXIgX2EsIF9iO1xuY29uc3QgeyB1c2VSZWYsIHVzZUVmZmVjdCwgaXNWYWxpZEVsZW1lbnQgfSA9IFJlYWN0X19uYW1lc3BhY2U7XG5jb25zdCBSZWFjdFNlY3JldEludGVybmFscyA9IChfYSA9IFJlYWN0X19uYW1lc3BhY2UuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBSZWFjdF9fbmFtZXNwYWNlLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuY29uc3QgJGVtcHR5ID0gU3ltYm9sLmZvcigncmVhY3QubWVtb19jYWNoZV9zZW50aW5lbCcpO1xuY29uc3QgYyA9IHR5cGVvZiAoKF9iID0gUmVhY3RfX25hbWVzcGFjZS5fX0NPTVBJTEVSX1JVTlRJTUUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jKSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID9cbiAgICAgICAgUmVhY3RfX25hbWVzcGFjZS5fX0NPTVBJTEVSX1JVTlRJTUUuY1xuICAgIDogZnVuY3Rpb24gYyhzaXplKSB7XG4gICAgICAgIHJldHVybiBSZWFjdF9fbmFtZXNwYWNlLnVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgJCA9IG5ldyBBcnJheShzaXplKTtcbiAgICAgICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBzaXplOyBpaSsrKSB7XG4gICAgICAgICAgICAgICAgJFtpaV0gPSAkZW1wdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkWyRlbXB0eV0gPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuICQ7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9O1xuY29uc3QgTGF6eUd1YXJkRGlzcGF0Y2hlciA9IHt9O1xuW1xuICAgICdyZWFkQ29udGV4dCcsXG4gICAgJ3VzZUNhbGxiYWNrJyxcbiAgICAndXNlQ29udGV4dCcsXG4gICAgJ3VzZUVmZmVjdCcsXG4gICAgJ3VzZUltcGVyYXRpdmVIYW5kbGUnLFxuICAgICd1c2VJbnNlcnRpb25FZmZlY3QnLFxuICAgICd1c2VMYXlvdXRFZmZlY3QnLFxuICAgICd1c2VNZW1vJyxcbiAgICAndXNlUmVkdWNlcicsXG4gICAgJ3VzZVJlZicsXG4gICAgJ3VzZVN0YXRlJyxcbiAgICAndXNlRGVidWdWYWx1ZScsXG4gICAgJ3VzZURlZmVycmVkVmFsdWUnLFxuICAgICd1c2VUcmFuc2l0aW9uJyxcbiAgICAndXNlTXV0YWJsZVNvdXJjZScsXG4gICAgJ3VzZVN5bmNFeHRlcm5hbFN0b3JlJyxcbiAgICAndXNlSWQnLFxuICAgICd1bnN0YWJsZV9pc05ld1JlY29uY2lsZXInLFxuICAgICdnZXRDYWNoZVNpZ25hbCcsXG4gICAgJ2dldENhY2hlRm9yVHlwZScsXG4gICAgJ3VzZUNhY2hlUmVmcmVzaCcsXG5dLmZvckVhY2gobmFtZSA9PiB7XG4gICAgTGF6eUd1YXJkRGlzcGF0Y2hlcltuYW1lXSA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbUmVhY3RdIFVuZXhwZWN0ZWQgUmVhY3QgaG9vayBjYWxsICgke25hbWV9KSBmcm9tIGEgUmVhY3QgY29tcGlsZWQgZnVuY3Rpb24uIGAgK1xuICAgICAgICAgICAgXCJDaGVjayB0aGF0IGFsbCBob29rcyBhcmUgY2FsbGVkIGRpcmVjdGx5IGFuZCBuYW1lZCBhY2NvcmRpbmcgdG8gY29udmVudGlvbiAoJ3VzZVtBLVpdJykgXCIpO1xuICAgIH07XG59KTtcbmxldCBvcmlnaW5hbERpc3BhdGNoZXIgPSBudWxsO1xuTGF6eUd1YXJkRGlzcGF0Y2hlclsndXNlTWVtb0NhY2hlJ10gPSAoY291bnQpID0+IHtcbiAgICBpZiAob3JpZ2luYWxEaXNwYXRjaGVyID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdCBDb21waWxlciBpbnRlcm5hbCBpbnZhcmlhbnQgdmlvbGF0aW9uOiB1bmV4cGVjdGVkIG51bGwgZGlzcGF0Y2hlcicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRGlzcGF0Y2hlci51c2VNZW1vQ2FjaGUoY291bnQpO1xuICAgIH1cbn07XG52YXIgR3VhcmRLaW5kO1xuKGZ1bmN0aW9uIChHdWFyZEtpbmQpIHtcbiAgICBHdWFyZEtpbmRbR3VhcmRLaW5kW1wiUHVzaEd1YXJkQ29udGV4dFwiXSA9IDBdID0gXCJQdXNoR3VhcmRDb250ZXh0XCI7XG4gICAgR3VhcmRLaW5kW0d1YXJkS2luZFtcIlBvcEd1YXJkQ29udGV4dFwiXSA9IDFdID0gXCJQb3BHdWFyZENvbnRleHRcIjtcbiAgICBHdWFyZEtpbmRbR3VhcmRLaW5kW1wiUHVzaEV4cGVjdEhvb2tcIl0gPSAyXSA9IFwiUHVzaEV4cGVjdEhvb2tcIjtcbiAgICBHdWFyZEtpbmRbR3VhcmRLaW5kW1wiUG9wRXhwZWN0SG9va1wiXSA9IDNdID0gXCJQb3BFeHBlY3RIb29rXCI7XG59KShHdWFyZEtpbmQgfHwgKEd1YXJkS2luZCA9IHt9KSk7XG5mdW5jdGlvbiBzZXRDdXJyZW50KG5ld0Rpc3BhdGNoZXIpIHtcbiAgICBSZWFjdFNlY3JldEludGVybmFscy5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBuZXdEaXNwYXRjaGVyO1xuICAgIHJldHVybiBSZWFjdFNlY3JldEludGVybmFscy5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQ7XG59XG5jb25zdCBndWFyZEZyYW1lcyA9IFtdO1xuZnVuY3Rpb24gJGRpc3BhdGNoZXJHdWFyZChraW5kKSB7XG4gICAgY29uc3QgY3VyciA9IFJlYWN0U2VjcmV0SW50ZXJuYWxzLlJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDtcbiAgICBpZiAoa2luZCA9PT0gR3VhcmRLaW5kLlB1c2hHdWFyZENvbnRleHQpIHtcbiAgICAgICAgZ3VhcmRGcmFtZXMucHVzaChjdXJyKTtcbiAgICAgICAgaWYgKGd1YXJkRnJhbWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgb3JpZ2luYWxEaXNwYXRjaGVyID0gY3VycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VyciA9PT0gTGF6eUd1YXJkRGlzcGF0Y2hlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbUmVhY3RdIFVuZXhwZWN0ZWQgY2FsbCB0byBjdXN0b20gaG9vayBvciBjb21wb25lbnQgZnJvbSBhIFJlYWN0IGNvbXBpbGVkIGZ1bmN0aW9uLiBgICtcbiAgICAgICAgICAgICAgICBcIkNoZWNrIHRoYXQgKDEpIGFsbCBob29rcyBhcmUgY2FsbGVkIGRpcmVjdGx5IGFuZCBuYW1lZCBhY2NvcmRpbmcgdG8gY29udmVudGlvbiAoJ3VzZVtBLVpdJykgXCIgK1xuICAgICAgICAgICAgICAgICdhbmQgKDIpIGNvbXBvbmVudHMgYXJlIHJldHVybmVkIGFzIEpTWCBpbnN0ZWFkIG9mIGJlaW5nIGRpcmVjdGx5IGludm9rZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Q3VycmVudChMYXp5R3VhcmREaXNwYXRjaGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2luZCA9PT0gR3VhcmRLaW5kLlBvcEd1YXJkQ29udGV4dCkge1xuICAgICAgICBjb25zdCBsYXN0RnJhbWUgPSBndWFyZEZyYW1lcy5wb3AoKTtcbiAgICAgICAgaWYgKGxhc3RGcmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0IENvbXBpbGVyIGludGVybmFsIGVycm9yOiB1bmV4cGVjdGVkIG51bGwgaW4gZ3VhcmQgc3RhY2snKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3VhcmRGcmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBvcmlnaW5hbERpc3BhdGNoZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHNldEN1cnJlbnQobGFzdEZyYW1lKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2luZCA9PT0gR3VhcmRLaW5kLlB1c2hFeHBlY3RIb29rKSB7XG4gICAgICAgIGd1YXJkRnJhbWVzLnB1c2goY3Vycik7XG4gICAgICAgIHNldEN1cnJlbnQob3JpZ2luYWxEaXNwYXRjaGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2luZCA9PT0gR3VhcmRLaW5kLlBvcEV4cGVjdEhvb2spIHtcbiAgICAgICAgY29uc3QgbGFzdEZyYW1lID0gZ3VhcmRGcmFtZXMucG9wKCk7XG4gICAgICAgIGlmIChsYXN0RnJhbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdCBDb21waWxlciBpbnRlcm5hbCBlcnJvcjogdW5leHBlY3RlZCBudWxsIGluIGd1YXJkIHN0YWNrJyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0Q3VycmVudChsYXN0RnJhbWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdCBDb21waWxlciBpbnRlcm5hbCBlcnJvcjogdW5yZWFjaGFibGUgYmxvY2snICsga2luZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gJHJlc2V0KCQpIHtcbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgJC5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgJFtpaV0gPSAkZW1wdHk7XG4gICAgfVxufVxuZnVuY3Rpb24gJG1ha2VSZWFkT25seSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RPRE86IGltcGxlbWVudCAkbWFrZVJlYWRPbmx5IGluIHJlYWN0LWNvbXBpbGVyLXJ1bnRpbWUnKTtcbn1cbmNvbnN0IHJlbmRlckNvdW50ZXJSZWdpc3RyeSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGNsZWFyUmVuZGVyQ291bnRlclJlZ2lzdHJ5KCkge1xuICAgIGZvciAoY29uc3QgY291bnRlcnMgb2YgcmVuZGVyQ291bnRlclJlZ2lzdHJ5LnZhbHVlcygpKSB7XG4gICAgICAgIGNvdW50ZXJzLmZvckVhY2goY291bnRlciA9PiB7XG4gICAgICAgICAgICBjb3VudGVyLmNvdW50ID0gMDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJSZW5kZXJDb3VudGVyKG5hbWUsIHZhbCkge1xuICAgIGxldCBjb3VudGVycyA9IHJlbmRlckNvdW50ZXJSZWdpc3RyeS5nZXQobmFtZSk7XG4gICAgaWYgKGNvdW50ZXJzID09IG51bGwpIHtcbiAgICAgICAgY291bnRlcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHJlbmRlckNvdW50ZXJSZWdpc3RyeS5zZXQobmFtZSwgY291bnRlcnMpO1xuICAgIH1cbiAgICBjb3VudGVycy5hZGQodmFsKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVJlbmRlckNvdW50ZXIobmFtZSwgdmFsKSB7XG4gICAgY29uc3QgY291bnRlcnMgPSByZW5kZXJDb3VudGVyUmVnaXN0cnkuZ2V0KG5hbWUpO1xuICAgIGlmIChjb3VudGVycyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY291bnRlcnMuZGVsZXRlKHZhbCk7XG59XG5mdW5jdGlvbiB1c2VSZW5kZXJDb3VudGVyKG5hbWUpIHtcbiAgICBjb25zdCB2YWwgPSB1c2VSZWYobnVsbCk7XG4gICAgaWYgKHZhbC5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgdmFsLmN1cnJlbnQuY291bnQgKz0gMTtcbiAgICB9XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHZhbC5jdXJyZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ZXIgPSB7IGNvdW50OiAwIH07XG4gICAgICAgICAgICByZWdpc3RlclJlbmRlckNvdW50ZXIobmFtZSwgY291bnRlcik7XG4gICAgICAgICAgICB2YWwuY3VycmVudCA9IGNvdW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWwuY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZVJlbmRlckNvdW50ZXIobmFtZSwgdmFsLmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuY29uc3Qgc2VlbkVycm9ycyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uICRzdHJ1Y3R1cmFsQ2hlY2sob2xkVmFsdWUsIG5ld1ZhbHVlLCB2YXJpYWJsZU5hbWUsIGZuTmFtZSwga2luZCwgbG9jKSB7XG4gICAgZnVuY3Rpb24gZXJyb3IobCwgciwgcGF0aCwgZGVwdGgpIHtcbiAgICAgICAgY29uc3Qgc3RyID0gYCR7Zm5OYW1lfToke2xvY30gWyR7a2luZH1dICR7dmFyaWFibGVOYW1lfSR7cGF0aH0gY2hhbmdlZCBmcm9tICR7bH0gdG8gJHtyfSBhdCBkZXB0aCAke2RlcHRofWA7XG4gICAgICAgIGlmIChzZWVuRXJyb3JzLmhhcyhzdHIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2VlbkVycm9ycy5hZGQoc3RyKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihzdHIpO1xuICAgIH1cbiAgICBjb25zdCBkZXB0aExpbWl0ID0gMjtcbiAgICBmdW5jdGlvbiByZWN1cihvbGRWYWx1ZSwgbmV3VmFsdWUsIHBhdGgsIGRlcHRoKSB7XG4gICAgICAgIGlmIChkZXB0aCA+IGRlcHRoTGltaXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb2xkVmFsdWUgIT09IHR5cGVvZiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZXJyb3IoYHR5cGUgJHt0eXBlb2Ygb2xkVmFsdWV9YCwgYHR5cGUgJHt0eXBlb2YgbmV3VmFsdWV9YCwgcGF0aCwgZGVwdGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvbGRWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZEFycmF5ID0gQXJyYXkuaXNBcnJheShvbGRWYWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IEFycmF5LmlzQXJyYXkobmV3VmFsdWUpO1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBudWxsICYmIG5ld1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoJ251bGwnLCBgdHlwZSAke3R5cGVvZiBuZXdWYWx1ZX1gLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXdWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVycm9yKGB0eXBlICR7dHlwZW9mIG9sZFZhbHVlfWAsICdudWxsJywgcGF0aCwgZGVwdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAob2xkVmFsdWUgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICBpZiAoIShuZXdWYWx1ZSBpbnN0YW5jZW9mIE1hcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoYE1hcCBpbnN0YW5jZWAsIGBvdGhlciB2YWx1ZWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2xkVmFsdWUuc2l6ZSAhPT0gbmV3VmFsdWUuc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihgTWFwIGluc3RhbmNlIHdpdGggc2l6ZSAke29sZFZhbHVlLnNpemV9YCwgYE1hcCBpbnN0YW5jZSB3aXRoIHNpemUgJHtuZXdWYWx1ZS5zaXplfWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1ZhbHVlLmhhcyhrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKGBNYXAgaW5zdGFuY2Ugd2l0aCBrZXkgJHtrfWAsIGBNYXAgaW5zdGFuY2Ugd2l0aG91dCBrZXkgJHtrfWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3VyKHYsIG5ld1ZhbHVlLmdldChrKSwgYCR7cGF0aH0uZ2V0KCR7a30pYCwgZGVwdGggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoJ290aGVyIHZhbHVlJywgYE1hcCBpbnN0YW5jZWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9sZFZhbHVlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEobmV3VmFsdWUgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKGBTZXQgaW5zdGFuY2VgLCBgb3RoZXIgdmFsdWVgLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9sZFZhbHVlLnNpemUgIT09IG5ld1ZhbHVlLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoYFNldCBpbnN0YW5jZSB3aXRoIHNpemUgJHtvbGRWYWx1ZS5zaXplfWAsIGBTZXQgaW5zdGFuY2Ugd2l0aCBzaXplICR7bmV3VmFsdWUuc2l6ZX1gLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2xkVmFsdWUuaGFzKHYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IoYFNldCBpbnN0YW5jZSB3aXRob3V0IGVsZW1lbnQgJHt2fWAsIGBTZXQgaW5zdGFuY2Ugd2l0aCBlbGVtZW50ICR7dn1gLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuZXdWYWx1ZSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgICAgIGVycm9yKCdvdGhlciB2YWx1ZScsIGBTZXQgaW5zdGFuY2VgLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbGRBcnJheSB8fCBuZXdBcnJheSkge1xuICAgICAgICAgICAgICAgIGlmIChvbGRBcnJheSAhPT0gbmV3QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoYHR5cGUgJHtvbGRBcnJheSA/ICdhcnJheScgOiAnb2JqZWN0J31gLCBgdHlwZSAke25ld0FycmF5ID8gJ2FycmF5JyA6ICdvYmplY3QnfWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2xkVmFsdWUubGVuZ3RoICE9PSBuZXdWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoYGFycmF5IHdpdGggbGVuZ3RoICR7b2xkVmFsdWUubGVuZ3RofWAsIGBhcnJheSB3aXRoIGxlbmd0aCAke25ld1ZhbHVlLmxlbmd0aH1gLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgb2xkVmFsdWUubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cihvbGRWYWx1ZVtpaV0sIG5ld1ZhbHVlW2lpXSwgYCR7cGF0aH1bJHtpaX1dYCwgZGVwdGggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzVmFsaWRFbGVtZW50KG9sZFZhbHVlKSB8fCBpc1ZhbGlkRWxlbWVudChuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQob2xkVmFsdWUpICE9PSBpc1ZhbGlkRWxlbWVudChuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoYHR5cGUgJHtpc1ZhbGlkRWxlbWVudChvbGRWYWx1ZSkgPyAnUmVhY3QgZWxlbWVudCcgOiAnb2JqZWN0J31gLCBgdHlwZSAke2lzVmFsaWRFbGVtZW50KG5ld1ZhbHVlKSA/ICdSZWFjdCBlbGVtZW50JyA6ICdvYmplY3QnfWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2xkVmFsdWUudHlwZSAhPT0gbmV3VmFsdWUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihgUmVhY3QgZWxlbWVudCBvZiB0eXBlICR7b2xkVmFsdWUudHlwZX1gLCBgUmVhY3QgZWxlbWVudCBvZiB0eXBlICR7bmV3VmFsdWUudHlwZX1gLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWN1cihvbGRWYWx1ZS5wcm9wcywgbmV3VmFsdWUucHJvcHMsIGBbcHJvcHMgb2YgJHtwYXRofV1gLCBkZXB0aCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBvbGRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKGBvYmplY3Qgd2l0aG91dCBrZXkgJHtrZXl9YCwgYG9iamVjdCB3aXRoIGtleSAke2tleX1gLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IoYG9iamVjdCB3aXRoIGtleSAke2tleX1gLCBgb2JqZWN0IHdpdGhvdXQga2V5ICR7a2V5fWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3VyKG9sZFZhbHVlW2tleV0sIG5ld1ZhbHVlW2tleV0sIGAke3BhdGh9LiR7a2V5fWAsIGRlcHRoICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9sZFZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNOYU4ob2xkVmFsdWUpIHx8IGlzTmFOKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKG9sZFZhbHVlKSAhPT0gaXNOYU4obmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoYCR7aXNOYU4ob2xkVmFsdWUpID8gJ05hTicgOiAnbm9uLU5hTiB2YWx1ZSd9YCwgYCR7aXNOYU4obmV3VmFsdWUpID8gJ05hTicgOiAnbm9uLU5hTiB2YWx1ZSd9YCwgcGF0aCwgZGVwdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZXJyb3Iob2xkVmFsdWUsIG5ld1ZhbHVlLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVjdXIob2xkVmFsdWUsIG5ld1ZhbHVlLCAnJywgMCk7XG59XG5cbmV4cG9ydHMuJGRpc3BhdGNoZXJHdWFyZCA9ICRkaXNwYXRjaGVyR3VhcmQ7XG5leHBvcnRzLiRtYWtlUmVhZE9ubHkgPSAkbWFrZVJlYWRPbmx5O1xuZXhwb3J0cy4kcmVzZXQgPSAkcmVzZXQ7XG5leHBvcnRzLiRzdHJ1Y3R1cmFsQ2hlY2sgPSAkc3RydWN0dXJhbENoZWNrO1xuZXhwb3J0cy5jID0gYztcbmV4cG9ydHMuY2xlYXJSZW5kZXJDb3VudGVyUmVnaXN0cnkgPSBjbGVhclJlbmRlckNvdW50ZXJSZWdpc3RyeTtcbmV4cG9ydHMucmVuZGVyQ291bnRlclJlZ2lzdHJ5ID0gcmVuZGVyQ291bnRlclJlZ2lzdHJ5O1xuZXhwb3J0cy51c2VSZW5kZXJDb3VudGVyID0gdXNlUmVuZGVyQ291bnRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIl9pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdCIsImUiLCJuIiwiT2JqZWN0IiwiY3JlYXRlIiwia2V5cyIsImZvckVhY2giLCJrIiwiZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImRlZmF1bHQiLCJmcmVlemUiLCJSZWFjdF9fbmFtZXNwYWNlIiwiX2EiLCJfYiIsInVzZVJlZiIsInVzZUVmZmVjdCIsImlzVmFsaWRFbGVtZW50IiwiUmVhY3RTZWNyZXRJbnRlcm5hbHMiLCJfX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIiRlbXB0eSIsIlN5bWJvbCIsImZvciIsImMiLCJfX0NPTVBJTEVSX1JVTlRJTUUiLCJzaXplIiwidXNlTWVtbyIsIiQiLCJBcnJheSIsImlpIiwiTGF6eUd1YXJkRGlzcGF0Y2hlciIsIm5hbWUiLCJFcnJvciIsIm9yaWdpbmFsRGlzcGF0Y2hlciIsImNvdW50IiwidXNlTWVtb0NhY2hlIiwiR3VhcmRLaW5kIiwic2V0Q3VycmVudCIsIm5ld0Rpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiY3VycmVudCIsImd1YXJkRnJhbWVzIiwiJGRpc3BhdGNoZXJHdWFyZCIsImtpbmQiLCJjdXJyIiwiUHVzaEd1YXJkQ29udGV4dCIsInB1c2giLCJsZW5ndGgiLCJQb3BHdWFyZENvbnRleHQiLCJsYXN0RnJhbWUiLCJwb3AiLCJQdXNoRXhwZWN0SG9vayIsIlBvcEV4cGVjdEhvb2siLCIkcmVzZXQiLCIkbWFrZVJlYWRPbmx5IiwicmVuZGVyQ291bnRlclJlZ2lzdHJ5IiwiTWFwIiwiY2xlYXJSZW5kZXJDb3VudGVyUmVnaXN0cnkiLCJjb3VudGVycyIsInZhbHVlcyIsImNvdW50ZXIiLCJyZWdpc3RlclJlbmRlckNvdW50ZXIiLCJ2YWwiLCJTZXQiLCJzZXQiLCJhZGQiLCJyZW1vdmVSZW5kZXJDb3VudGVyIiwiZGVsZXRlIiwidXNlUmVuZGVyQ291bnRlciIsInNlZW5FcnJvcnMiLCIkc3RydWN0dXJhbENoZWNrIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsInZhcmlhYmxlTmFtZSIsImZuTmFtZSIsImxvYyIsImVycm9yIiwibCIsInIiLCJwYXRoIiwiZGVwdGgiLCJzdHIiLCJoYXMiLCJjb25zb2xlIiwiZGVwdGhMaW1pdCIsInJlY3VyIiwib2xkQXJyYXkiLCJpc0FycmF5IiwibmV3QXJyYXkiLCJ2IiwidHlwZSIsInByb3BzIiwia2V5IiwiaXNOYU4iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultElement: () => (/* binding */ DefaultElement),\n/* harmony export */   DefaultLeaf: () => (/* binding */ DefaultLeaf),\n/* harmony export */   DefaultPlaceholder: () => (/* binding */ DefaultPlaceholder),\n/* harmony export */   Editable: () => (/* binding */ Editable),\n/* harmony export */   NODE_TO_INDEX: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX),\n/* harmony export */   NODE_TO_PARENT: () => (/* reexport safe */ slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT),\n/* harmony export */   ReactEditor: () => (/* binding */ ReactEditor),\n/* harmony export */   Slate: () => (/* binding */ Slate),\n/* harmony export */   useComposing: () => (/* binding */ useComposing),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useFocused: () => (/* binding */ useFocused),\n/* harmony export */   useReadOnly: () => (/* binding */ useReadOnly),\n/* harmony export */   useSelected: () => (/* binding */ useSelected),\n/* harmony export */   useSlate: () => (/* binding */ useSlate),\n/* harmony export */   useSlateSelection: () => (/* binding */ useSlateSelection),\n/* harmony export */   useSlateSelector: () => (/* binding */ useSlateSelector),\n/* harmony export */   useSlateStatic: () => (/* binding */ useSlateStatic),\n/* harmony export */   useSlateWithV: () => (/* binding */ useSlateWithV),\n/* harmony export */   withReact: () => (/* binding */ withReact)\n/* harmony export */ });\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! direction */ \"(ssr)/./node_modules/direction/index.js\");\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(direction__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/debounce */ \"(ssr)/./node_modules/lodash/debounce.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/throttle */ \"(ssr)/./node_modules/lodash/throttle.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! scroll-into-view-if-needed */ \"(ssr)/./node_modules/scroll-into-view-if-needed/dist/index.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! slate-dom */ \"(ssr)/./node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @juggle/resize-observer */ \"(ssr)/./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * A React context for sharing the editor object.\n */ var EditorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */ var useSlateStatic = ()=>{\n    var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n    if (!editor) {\n        throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n    }\n    return editor;\n};\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = slate_dom__WEBPACK_IMPORTED_MODULE_4__.DOMEditor;\nfunction ownKeys$5(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$5(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$5(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = (value)=>(value === null || value === void 0 ? void 0 : value.constructor.name) === \"DataTransfer\";\nfunction createAndroidInputManager(_ref) {\n    var { editor, scheduleOnDOMSelectionChange, onDOMSelectionChange } = _ref;\n    var flushing = false;\n    var compositionEndTimeoutId = null;\n    var flushTimeoutId = null;\n    var actionTimeoutId = null;\n    var idCounter = 0;\n    var insertPositionHint = false;\n    var applyPendingSelection = ()=>{\n        var pendingSelection = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n        if (pendingSelection) {\n            var { selection } = editor;\n            var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, pendingSelection);\n            if (normalized && (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(normalized, selection))) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, normalized);\n            }\n        }\n    };\n    var performAction = ()=>{\n        var action = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n        if (!action) {\n            return;\n        }\n        if (action.at) {\n            var target = slate__WEBPACK_IMPORTED_MODULE_7__.Point.isPoint(action.at) ? (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizePoint)(editor, action.at) : (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeRange)(editor, action.at);\n            if (!target) {\n                return;\n            }\n            var _targetRange = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, target);\n            if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, _targetRange)) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, target);\n            }\n        }\n        action.run();\n    };\n    var flush = ()=>{\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        if (actionTimeoutId) {\n            clearTimeout(actionTimeoutId);\n            actionTimeoutId = null;\n        }\n        if (!hasPendingDiffs() && !hasPendingAction()) {\n            applyPendingSelection();\n            return;\n        }\n        if (!flushing) {\n            flushing = true;\n            setTimeout(()=>flushing = false);\n        }\n        if (hasPendingAction()) {\n            flushing = \"action\";\n        }\n        var selectionRef = editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection, {\n            affinity: \"forward\"\n        });\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n        debug(\"flush\", slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor), slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor));\n        var scheduleSelectionChange = hasPendingDiffs();\n        var diff;\n        while(diff = (_EDITOR_TO_PENDING_DI = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]){\n            var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n            var pendingMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n            if (pendingMarks !== undefined) {\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n                editor.marks = pendingMarks;\n            }\n            if (pendingMarks && insertPositionHint === false) {\n                insertPositionHint = null;\n            }\n            var range = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.targetRange)(diff);\n            if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, range)) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n            }\n            if (diff.diff.text) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, diff.diff.text);\n            } else {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n            }\n            // Remove diff only after we have applied it to account for it when transforming\n            // pending ranges.\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter((_ref2)=>{\n                var { id } = _ref2;\n                return id !== diff.id;\n            }));\n            if (!(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.verifyDiffState)(editor, diff)) {\n                scheduleSelectionChange = false;\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.delete(editor);\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n                flushing = \"action\";\n                // Ensure we don't restore the pending user (dom) selection\n                // since the document and dom state do not match.\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n                scheduleOnDOMSelectionChange.cancel();\n                onDOMSelectionChange.cancel();\n                selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n            }\n        }\n        var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n        if (selection && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, editor.selection))) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, selection);\n        }\n        if (hasPendingAction()) {\n            performAction();\n            return;\n        }\n        // COMPAT: The selectionChange event is fired after the action is performed,\n        // so we have to manually schedule it to ensure we don't 'throw away' the selection\n        // while rendering if we have pending changes.\n        if (scheduleSelectionChange) {\n            scheduleOnDOMSelectionChange();\n        }\n        scheduleOnDOMSelectionChange.flush();\n        onDOMSelectionChange.flush();\n        applyPendingSelection();\n        var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n        if (userMarks !== undefined) {\n            editor.marks = userMarks;\n            editor.onChange();\n        }\n    };\n    var handleCompositionEnd = (_event)=>{\n        if (compositionEndTimeoutId) {\n            clearTimeout(compositionEndTimeoutId);\n        }\n        compositionEndTimeoutId = setTimeout(()=>{\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n            flush();\n        }, RESOLVE_DELAY);\n    };\n    var handleCompositionStart = (_event)=>{\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n        if (compositionEndTimeoutId) {\n            clearTimeout(compositionEndTimeoutId);\n            compositionEndTimeoutId = null;\n        }\n    };\n    var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n        var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var placeholderElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n        if (!placeholderElement) {\n            return;\n        }\n        if (hasPendingDiffs() || forceHide) {\n            placeholderElement.style.display = \"none\";\n            return;\n        }\n        placeholderElement.style.removeProperty(\"display\");\n    };\n    var storeDiff = (path, diff)=>{\n        var _EDITOR_TO_PENDING_DI3;\n        var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n        var target = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, path);\n        var idx = pendingDiffs.findIndex((change)=>slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n        if (idx < 0) {\n            var normalized = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.normalizeStringDiff)(target.text, diff);\n            if (normalized) {\n                pendingDiffs.push({\n                    path,\n                    diff,\n                    id: idCounter++\n                });\n            }\n            updatePlaceholderVisibility();\n            return;\n        }\n        var merged = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.mergeStringDiffs)(target.text, pendingDiffs[idx].diff, diff);\n        if (!merged) {\n            pendingDiffs.splice(idx, 1);\n            updatePlaceholderVisibility();\n            return;\n        }\n        pendingDiffs[idx] = _objectSpread$5(_objectSpread$5({}, pendingDiffs[idx]), {}, {\n            diff: merged\n        });\n    };\n    var scheduleAction = function scheduleAction(run) {\n        var { at } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        insertPositionHint = false;\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.delete(editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        if (hasPendingAction()) {\n            flush();\n        }\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.set(editor, {\n            at,\n            run\n        });\n        // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n        // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n        // in this case and thus never actually perform the action.\n        actionTimeoutId = setTimeout(flush);\n    };\n    var handleDOMBeforeInput = (event)=>{\n        var _targetRange2;\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n            return;\n        }\n        var { inputType: type } = event;\n        var targetRange = null;\n        var data = event.dataTransfer || event.data || undefined;\n        if (insertPositionHint !== false && type !== \"insertText\" && type !== \"insertCompositionText\") {\n            insertPositionHint = false;\n        }\n        var [nativeTargetRange] = event.getTargetRanges();\n        if (nativeTargetRange) {\n            targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n                exactMatch: false,\n                suppressThrow: true\n            });\n        }\n        // COMPAT: SelectionChange event is fired after the action is performed, so we\n        // have to manually get the selection here to ensure it's up-to-date.\n        var window1 = ReactEditor.getWindow(editor);\n        var domSelection = window1.getSelection();\n        if (!targetRange && domSelection) {\n            nativeTargetRange = domSelection;\n            targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n                exactMatch: false,\n                suppressThrow: true\n            });\n        }\n        targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n        if (!targetRange) {\n            return;\n        }\n        // By default, the input manager tries to store text diffs so that we can\n        // defer flushing them at a later point in time. We don't want to flush\n        // for every input event as this can be expensive. However, there are some\n        // scenarios where we cannot safely store the text diff and must instead\n        // schedule an action to let Slate normalize the editor state.\n        var canStoreDiff = true;\n        if (type.startsWith(\"delete\")) {\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n                var [_start, _end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n                var _leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _start.path);\n                if (_leaf.text.length === _start.offset && _end.offset === 0) {\n                    var next = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.next(editor, {\n                        at: _start.path,\n                        match: slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText\n                    });\n                    if (next && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(next[1], _end.path)) {\n                        targetRange = {\n                            anchor: _end,\n                            focus: _end\n                        };\n                    }\n                }\n            }\n            var direction = type.endsWith(\"Backward\") ? \"backward\" : \"forward\";\n            var [start, end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n            var [leaf, path] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.leaf(editor, start.path);\n            var diff = {\n                text: \"\",\n                start: start.offset,\n                end: end.offset\n            };\n            var pendingDiffs = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor);\n            var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((change)=>slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n            var diffs = relevantPendingDiffs ? [\n                relevantPendingDiffs.diff,\n                diff\n            ] : [\n                diff\n            ];\n            var text = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.applyStringDiff)(leaf.text, ...diffs);\n            if (text.length === 0) {\n                // Text leaf will be removed, so we need to schedule an\n                // action to remove it so that Slate can normalize instead\n                // of storing as a diff\n                canStoreDiff = false;\n            }\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n                if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n                    var point = {\n                        path: targetRange.anchor.path,\n                        offset: start.offset\n                    };\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, point, point);\n                    handleUserSelect(range);\n                    return storeDiff(targetRange.anchor.path, {\n                        text: \"\",\n                        end: end.offset,\n                        start: start.offset\n                    });\n                }\n                return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                        direction\n                    }), {\n                    at: targetRange\n                });\n            }\n        }\n        switch(type){\n            case \"deleteByComposition\":\n            case \"deleteByCut\":\n            case \"deleteByDrag\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteContent\":\n            case \"deleteContentForward\":\n                {\n                    var { anchor } = targetRange;\n                    if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange)) {\n                        var targetNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n                        if (anchor.offset < targetNode.text.length) {\n                            return storeDiff(anchor.path, {\n                                text: \"\",\n                                start: anchor.offset,\n                                end: anchor.offset + 1\n                            });\n                        }\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteContentBackward\":\n                {\n                    var _nativeTargetRange;\n                    var { anchor: _anchor } = targetRange;\n                    // If we have a mismatch between the native and slate selection being collapsed\n                    // we are most likely deleting a zero-width placeholder and thus should perform it\n                    // as an action to ensure correct behavior (mostly happens with mark placeholders)\n                    var nativeCollapsed = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMSelection)(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n                    if (canStoreDiff && nativeCollapsed && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n                        return storeDiff(_anchor.path, {\n                            text: \"\",\n                            start: _anchor.offset - 1,\n                            end: _anchor.offset\n                        });\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteEntireSoftLine\":\n                {\n                    return scheduleAction(()=>{\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                    }, {\n                        at: targetRange\n                    });\n                }\n            case \"deleteHardLineBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"block\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteSoftLineBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteHardLineForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"block\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteSoftLineForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteWordBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"word\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteWordForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"word\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"insertLineBreak\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"insertParagraph\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"insertCompositionText\":\n            case \"deleteCompositionText\":\n            case \"insertFromComposition\":\n            case \"insertFromDrop\":\n            case \"insertFromPaste\":\n            case \"insertFromYank\":\n            case \"insertReplacementText\":\n            case \"insertText\":\n                {\n                    if (isDataTransfer(data)) {\n                        return scheduleAction(()=>ReactEditor.insertData(editor, data), {\n                            at: targetRange\n                        });\n                    }\n                    var _text = data !== null && data !== void 0 ? data : \"\";\n                    // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n                    // the placeholder itself and thus includes the zero-width space inside edit events.\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n                        _text = _text.replace(\"\\uFEFF\", \"\");\n                    }\n                    // Pastes from the Android clipboard will generate `insertText` events.\n                    // If the copied text contains any newlines, Android will append an\n                    // extra newline to the end of the copied text.\n                    if (type === \"insertText\" && /.*\\n.*\\n$/.test(_text)) {\n                        _text = _text.slice(0, -1);\n                    }\n                    // If the text includes a newline, split it at newlines and paste each component\n                    // string, with soft breaks in between each.\n                    if (_text.includes(\"\\n\")) {\n                        return scheduleAction(()=>{\n                            var parts = _text.split(\"\\n\");\n                            parts.forEach((line, i)=>{\n                                if (line) {\n                                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, line);\n                                }\n                                if (i !== parts.length - 1) {\n                                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                                }\n                            });\n                        }, {\n                            at: targetRange\n                        });\n                    }\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n                        var [_start2, _end2] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n                        var _diff = {\n                            start: _start2.offset,\n                            end: _end2.offset,\n                            text: _text\n                        };\n                        // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n                        // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n                        // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n                        // text events are fired with the correct target ranges, only the final 'insertComposition'\n                        // isn't, so we can adjust the target range start offset if we are confident this is the\n                        // swiftkey insert causing the issue.\n                        if (_text && insertPositionHint && type === \"insertCompositionText\") {\n                            var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n                            var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n                            if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                                _diff.start -= 1;\n                                insertPositionHint = null;\n                                scheduleFlush();\n                            } else {\n                                insertPositionHint = false;\n                            }\n                        } else if (type === \"insertText\") {\n                            if (insertPositionHint === null) {\n                                insertPositionHint = _diff;\n                            } else if (insertPositionHint && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                                insertPositionHint = _objectSpread$5(_objectSpread$5({}, insertPositionHint), {}, {\n                                    text: insertPositionHint.text + _text\n                                });\n                            } else {\n                                insertPositionHint = false;\n                            }\n                        } else {\n                            insertPositionHint = false;\n                        }\n                        if (canStoreDiff) {\n                            storeDiff(_start2.path, _diff);\n                            return;\n                        }\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text), {\n                        at: targetRange\n                    });\n                }\n        }\n    };\n    var hasPendingAction = ()=>{\n        return !!slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_ACTION.get(editor);\n    };\n    var hasPendingDiffs = ()=>{\n        var _EDITOR_TO_PENDING_DI4;\n        return !!((_EDITOR_TO_PENDING_DI4 = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n    };\n    var hasPendingChanges = ()=>{\n        return hasPendingAction() || hasPendingDiffs();\n    };\n    var isFlushing = ()=>{\n        return flushing;\n    };\n    var handleUserSelect = (range)=>{\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_SELECTION.set(editor, range);\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        var { selection } = editor;\n        if (!range) {\n            return;\n        }\n        var pathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path, range.anchor.path);\n        var parentPathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n        if (pathChanged && insertPositionHint || parentPathChanged) {\n            insertPositionHint = false;\n        }\n        if (pathChanged || hasPendingDiffs()) {\n            flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n        }\n    };\n    var handleInput = ()=>{\n        if (hasPendingAction() || !hasPendingDiffs()) {\n            flush();\n        }\n    };\n    var handleKeyDown = (_)=>{\n        // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n        // directly next to a non-contenteditable element (= the placeholder).\n        // The only event fired soon enough for us to allow hiding the placeholder\n        // without swiftkey picking it up is the keydown event, so we have to hide it\n        // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n        if (!hasPendingDiffs()) {\n            updatePlaceholderVisibility(true);\n            setTimeout(updatePlaceholderVisibility);\n        }\n    };\n    var scheduleFlush = ()=>{\n        if (!hasPendingAction()) {\n            actionTimeoutId = setTimeout(flush);\n        }\n    };\n    var handleDomMutations = (mutations)=>{\n        if (hasPendingDiffs() || hasPendingAction()) {\n            return;\n        }\n        if (mutations.some((mutation)=>(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations))) {\n            var _EDITOR_TO_FORCE_REND;\n            // Cause a re-render to restore the dom state if we encounter tracked mutations without\n            // a corresponding pending action.\n            (_EDITOR_TO_FORCE_REND = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n        }\n    };\n    return {\n        flush,\n        scheduleFlush,\n        hasPendingDiffs,\n        hasPendingAction,\n        hasPendingChanges,\n        isFlushing,\n        handleUserSelect,\n        handleCompositionEnd,\n        handleCompositionStart,\n        handleDOMBeforeInput,\n        handleKeyDown,\n        handleDomMutations,\n        handleInput\n    };\n}\nfunction useIsMounted() {\n    var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        isMountedRef.current = true;\n        return ()=>{\n            isMountedRef.current = false;\n        };\n    }, []);\n    return isMountedRef.current;\n}\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */ var useIsomorphicLayoutEffect = slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_3__.useEffect;\nfunction useMutationObserver(node, callback, options) {\n    var [mutationObserver] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>new MutationObserver(callback));\n    useIsomorphicLayoutEffect(()=>{\n        // Discard mutations caused during render phase. This works due to react calling\n        // useLayoutEffect synchronously after the render phase before the next tick.\n        mutationObserver.takeRecords();\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (!node.current) {\n            throw new Error(\"Failed to attach MutationObserver, `node` is undefined\");\n        }\n        mutationObserver.observe(node.current, options);\n        return ()=>mutationObserver.disconnect();\n    }, [\n        mutationObserver,\n        node,\n        options\n    ]);\n}\nvar _excluded$2 = [\n    \"node\"\n];\nfunction ownKeys$4(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$4(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$4(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar MUTATION_OBSERVER_CONFIG$1 = {\n    subtree: true,\n    childList: true,\n    characterData: true\n};\nvar useAndroidInputManager = !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? ()=>null : (_ref)=>{\n    var { node } = _ref, options = _objectWithoutProperties(_ref, _excluded$2);\n    if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n        return null;\n    }\n    var editor = useSlateStatic();\n    var isMounted = useIsMounted();\n    var [inputManager] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>createAndroidInputManager(_objectSpread$4({\n            editor\n        }, options)));\n    useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n    if (isMounted) {\n        inputManager.flush();\n    }\n    return inputManager;\n};\nfunction ownKeys$3(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$3(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$3(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n/**\n * Leaf content strings.\n */ var String$1 = (props)=>{\n    var { isLast, leaf, parent, text } = props;\n    var editor = useSlateStatic();\n    var path = ReactEditor.findPath(editor, text);\n    var parentPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(path);\n    var isMarkPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]);\n    // COMPAT: Render text inside void nodes with a zero-width space.\n    // So the node can contain selection but the text is not visible.\n    if (editor.isVoid(parent)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            length: slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(parent).length\n        });\n    }\n    // COMPAT: If this is the last text node in an empty block, render a zero-\n    // width space that will convert into a line break when copying and pasting\n    // to support expected plain text.\n    if (leaf.text === \"\" && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.string(editor, parentPath) === \"\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            isLineBreak: true,\n            isMarkPlaceholder: isMarkPlaceholder\n        });\n    }\n    // COMPAT: If the text is empty, it's because it's on the edge of an inline\n    // node, so we render a zero-width space so that the selection can be\n    // inserted next to it still.\n    if (leaf.text === \"\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            isMarkPlaceholder: isMarkPlaceholder\n        });\n    }\n    // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n    // so we need to add an extra trailing new lines to prevent that.\n    if (isLast && leaf.text.slice(-1) === \"\\n\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n            isTrailing: true,\n            text: leaf.text\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n        text: leaf.text\n    });\n};\n/**\n * Leaf strings with text in them.\n */ var TextString = (props)=>{\n    var { text, isTrailing = false } = props;\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var getTextContent = ()=>{\n        return \"\".concat(text !== null && text !== void 0 ? text : \"\").concat(isTrailing ? \"\\n\" : \"\");\n    };\n    var [initialText] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(getTextContent);\n    // This is the actual text rendering boundary where we interface with the DOM\n    // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n    // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n    // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n    // exactly if and only if its current content does not match our current virtual DOM.\n    // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n    // eg makes native spellcheck opt out from checking the text node.\n    // useLayoutEffect: updating our span before browser paint\n    useIsomorphicLayoutEffect(()=>{\n        // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n        var textWithTrailing = getTextContent();\n        if (ref.current && ref.current.textContent !== textWithTrailing) {\n            ref.current.textContent = textWithTrailing;\n        }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n    });\n    // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n    // We defer to the layout effect above to update the `textContent` of the span element when needed.\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText$1, {\n        ref: ref\n    }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, ref)=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n        \"data-slate-string\": true,\n        ref: ref\n    }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */ var ZeroWidthString = (props)=>{\n    var { length = 0, isLineBreak = false, isMarkPlaceholder = false } = props;\n    var attributes = {\n        \"data-slate-zero-width\": isLineBreak ? \"n\" : \"z\",\n        \"data-slate-length\": length\n    };\n    if (isMarkPlaceholder) {\n        attributes[\"data-slate-mark-placeholder\"] = true;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$3({}, attributes), !(slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_IOS) || !isLineBreak ? \"\\uFEFF\" : null, isLineBreak ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null) : null);\n};\nfunction ownKeys$2(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$2(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n// Delay the placeholder on Android to prevent the keyboard from closing.\n// (https://github.com/ianstormtaylor/slate/pull/5368)\nvar PLACEHOLDER_DELAY = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? 300 : 0;\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n    if (placeholderResizeObserver.current) {\n        placeholderResizeObserver.current.disconnect();\n        if (releaseObserver) {\n            placeholderResizeObserver.current = null;\n        }\n    }\n}\nfunction clearTimeoutRef(timeoutRef) {\n    if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n    }\n}\n/**\n * Individual leaves in a text node with unique formatting.\n */ var Leaf = (props)=>{\n    var { leaf, isLast, text, parent, renderPlaceholder, renderLeaf = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultLeaf, _objectSpread$2({}, props)) } = props;\n    var editor = useSlateStatic();\n    var placeholderResizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var placeholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var [showPlaceholder, setShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    var showPlaceholderTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var callbackPlaceholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((placeholderEl)=>{\n        disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n        if (placeholderEl == null) {\n            var _leaf$onPlaceholderRe;\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n            (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n        } else {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n            if (!placeholderResizeObserver.current) {\n                // Create a new observer and observe the placeholder element.\n                var ResizeObserver$1 = window.ResizeObserver || _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_5__.ResizeObserver;\n                placeholderResizeObserver.current = new ResizeObserver$1(()=>{\n                    var _leaf$onPlaceholderRe2;\n                    (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n                });\n            }\n            placeholderResizeObserver.current.observe(placeholderEl);\n            placeholderRef.current = placeholderEl;\n        }\n    }, [\n        placeholderRef,\n        leaf,\n        editor\n    ]);\n    var children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(String$1, {\n        isLast: isLast,\n        leaf: leaf,\n        parent: parent,\n        text: text\n    });\n    var leafIsPlaceholder = Boolean(leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (leafIsPlaceholder) {\n            if (!showPlaceholderTimeoutRef.current) {\n                // Delay the placeholder, so it will not render in a selection\n                showPlaceholderTimeoutRef.current = setTimeout(()=>{\n                    setShowPlaceholder(true);\n                    showPlaceholderTimeoutRef.current = null;\n                }, PLACEHOLDER_DELAY);\n            }\n        } else {\n            clearTimeoutRef(showPlaceholderTimeoutRef);\n            setShowPlaceholder(false);\n        }\n        return ()=>clearTimeoutRef(showPlaceholderTimeoutRef);\n    }, [\n        leafIsPlaceholder,\n        setShowPlaceholder\n    ]);\n    if (leafIsPlaceholder && showPlaceholder) {\n        var placeholderProps = {\n            children: leaf.placeholder,\n            attributes: {\n                \"data-slate-placeholder\": true,\n                style: {\n                    position: \"absolute\",\n                    top: 0,\n                    pointerEvents: \"none\",\n                    width: \"100%\",\n                    maxWidth: \"100%\",\n                    display: \"block\",\n                    opacity: \"0.333\",\n                    userSelect: \"none\",\n                    textDecoration: \"none\",\n                    // Fixes https://github.com/udecode/plate/issues/2315\n                    WebkitUserModify: slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT ? \"inherit\" : undefined\n                },\n                contentEditable: false,\n                ref: callbackPlaceholderRef\n            }\n        };\n        children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, renderPlaceholder(placeholderProps), children);\n    }\n    // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n    // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n    // contenteditable behaviors. (2019/05/08)\n    var attributes = {\n        \"data-slate-leaf\": true\n    };\n    return renderLeaf({\n        attributes,\n        children,\n        leaf,\n        text\n    });\n};\nvar MemoizedLeaf = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Leaf, (prev, next)=>{\n    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(next.leaf, prev.leaf) && next.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL] === prev.leaf[slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = (props)=>{\n    var { attributes, children } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$2({}, attributes), children);\n};\n/**\n * Text.\n */ var Text = (props)=>{\n    var { decorations, isLast, parent, renderPlaceholder, renderLeaf, text } = props;\n    var editor = useSlateStatic();\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var leaves = slate__WEBPACK_IMPORTED_MODULE_7__.Text.decorations(text, decorations);\n    var key = ReactEditor.findKey(editor, text);\n    var children = [];\n    for(var i = 0; i < leaves.length; i++){\n        var leaf = leaves[i];\n        children.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedLeaf, {\n            isLast: isLast && i === leaves.length - 1,\n            key: \"\".concat(key.id, \"-\").concat(i),\n            renderPlaceholder: renderPlaceholder,\n            leaf: leaf,\n            text: text,\n            parent: parent,\n            renderLeaf: renderLeaf\n        }));\n    }\n    // Update element-related weak maps with the DOM element ref.\n    var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((span)=>{\n        var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n        if (span) {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(text, span);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(span, text);\n        } else {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(text);\n            if (ref.current) {\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.delete(ref.current);\n            }\n        }\n        ref.current = span;\n    }, [\n        ref,\n        editor,\n        key,\n        text\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n        \"data-slate-node\": \"text\",\n        ref: callbackRef\n    }, children);\n};\nvar MemoizedText = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Text, (prev, next)=>{\n    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTextDecorationsEqual)(next.decorations, prev.decorations);\n});\nfunction ownKeys$1(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$1(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$1(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n/**\n * Element.\n */ var Element = (props)=>{\n    var { decorations, element, renderElement = (p)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultElement, _objectSpread$1({}, p)), renderPlaceholder, renderLeaf, selection } = props;\n    var editor = useSlateStatic();\n    var readOnly = useReadOnly();\n    var isInline = editor.isInline(element);\n    var key = ReactEditor.findKey(editor, element);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((ref)=>{\n        // Update element-related weak maps with the DOM element ref.\n        var KEY_TO_ELEMENT = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n        if (ref) {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(element, ref);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref, element);\n        } else {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(element);\n        }\n    }, [\n        editor,\n        key,\n        element\n    ]);\n    var children = useChildren({\n        decorations,\n        node: element,\n        renderElement,\n        renderPlaceholder,\n        renderLeaf,\n        selection\n    });\n    // Attributes that the developer must mix into the element in their\n    // custom node renderer component.\n    var attributes = {\n        \"data-slate-node\": \"element\",\n        ref\n    };\n    if (isInline) {\n        attributes[\"data-slate-inline\"] = true;\n    }\n    // If it's a block node with inline children, add the proper `dir` attribute\n    // for text direction.\n    if (!isInline && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, element)) {\n        var text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element);\n        var dir = direction__WEBPACK_IMPORTED_MODULE_0___default()(text);\n        if (dir === \"rtl\") {\n            attributes.dir = dir;\n        }\n    }\n    // If it's a void node, wrap the children in extra void-specific elements.\n    if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, element)) {\n        attributes[\"data-slate-void\"] = true;\n        if (!readOnly && isInline) {\n            attributes.contentEditable = false;\n        }\n        var Tag = isInline ? \"span\" : \"div\";\n        var [[_text]] = slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(element);\n        children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, {\n            \"data-slate-spacer\": true,\n            style: {\n                height: \"0\",\n                color: \"transparent\",\n                outline: \"none\",\n                position: \"absolute\"\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n            renderPlaceholder: renderPlaceholder,\n            decorations: [],\n            isLast: false,\n            parent: element,\n            text: _text\n        }));\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(_text, 0);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(_text, element);\n    }\n    return renderElement({\n        attributes,\n        children,\n        element\n    });\n};\nvar MemoizedElement = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Element, (prev, next)=>{\n    return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isElementDecorationsEqual)(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(prev.selection, next.selection));\n});\n/**\n * The default element renderer.\n */ var DefaultElement = (props)=>{\n    var { attributes, children, element } = props;\n    var editor = useSlateStatic();\n    var Tag = editor.isInline(element) ? \"span\" : \"div\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, _objectSpread$1(_objectSpread$1({}, attributes), {}, {\n        style: {\n            position: \"relative\"\n        }\n    }), children);\n};\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */ var DecorateContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(()=>[]);\n/**\n * Get the current `decorate` prop of the editable.\n */ var useDecorate = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(DecorateContext);\n};\n/**\n * A React context for sharing the `selected` state of an element.\n */ var SelectedContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `selected` state of an element.\n */ var useSelected = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectedContext);\n};\n/**\n * Children.\n */ var useChildren = (props)=>{\n    var { decorations, node, renderElement, renderPlaceholder, renderLeaf, selection } = props;\n    var decorate = useDecorate();\n    var editor = useSlateStatic();\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.set(editor, false);\n    var path = ReactEditor.findPath(editor, node);\n    var children = [];\n    var isLeafBlock = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isInline(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, node);\n    for(var i = 0; i < node.children.length; i++){\n        var p = path.concat(i);\n        var n = node.children[i];\n        var key = ReactEditor.findKey(editor, n);\n        var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, p);\n        var sel = selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(range, selection);\n        var ds = decorate([\n            n,\n            p\n        ]);\n        for (var dec of decorations){\n            var d = slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(dec, range);\n            if (d) {\n                ds.push(d);\n            }\n        }\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n)) {\n            children.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SelectedContext.Provider, {\n                key: \"provider-\".concat(key.id),\n                value: !!sel\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedElement, {\n                decorations: ds,\n                element: n,\n                key: key.id,\n                renderElement: renderElement,\n                renderPlaceholder: renderPlaceholder,\n                renderLeaf: renderLeaf,\n                selection: sel\n            })));\n        } else {\n            children.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n                decorations: ds,\n                key: key.id,\n                isLast: isLeafBlock && i === node.children.length - 1,\n                parent: node,\n                renderPlaceholder: renderPlaceholder,\n                renderLeaf: renderLeaf,\n                text: n\n            }));\n        }\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_INDEX.set(n, i);\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_PARENT.set(n, node);\n    }\n    return children;\n};\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */ var ReadOnlyContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `readOnly` state of the editor.\n */ var useReadOnly = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ReadOnlyContext);\n};\nvar SlateContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */ var useSlate = ()=>{\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateContext);\n    if (!context) {\n        throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n    }\n    var { editor } = context;\n    return editor;\n};\nvar useSlateWithV = ()=>{\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateContext);\n    if (!context) {\n        throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n    }\n    return context;\n};\nfunction useTrackUserInput() {\n    var editor = useSlateStatic();\n    var receivedUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    var animationFrameIdRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    var onUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        if (receivedUserInput.current) {\n            return;\n        }\n        receivedUserInput.current = true;\n        var window1 = ReactEditor.getWindow(editor);\n        window1.cancelAnimationFrame(animationFrameIdRef.current);\n        animationFrameIdRef.current = window1.requestAnimationFrame(()=>{\n            receivedUserInput.current = false;\n        });\n    }, [\n        editor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>()=>cancelAnimationFrame(animationFrameIdRef.current), []);\n    return {\n        receivedUserInput,\n        onUserInput\n    };\n}\nvar createRestoreDomManager = (editor, receivedUserInput)=>{\n    var bufferedMutations = [];\n    var clear = ()=>{\n        bufferedMutations = [];\n    };\n    var registerMutations = (mutations)=>{\n        if (!receivedUserInput.current) {\n            return;\n        }\n        var trackedMutations = mutations.filter((mutation)=>(0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isTrackedMutation)(editor, mutation, mutations));\n        bufferedMutations.push(...trackedMutations);\n    };\n    function restoreDOM() {\n        if (bufferedMutations.length > 0) {\n            bufferedMutations.reverse().forEach((mutation)=>{\n                if (mutation.type === \"characterData\") {\n                    // We don't want to restore the DOM for characterData mutations\n                    // because this interrupts the composition.\n                    return;\n                }\n                mutation.removedNodes.forEach((node)=>{\n                    mutation.target.insertBefore(node, mutation.nextSibling);\n                });\n                mutation.addedNodes.forEach((node)=>{\n                    mutation.target.removeChild(node);\n                });\n            });\n            // Clear buffered mutations to ensure we don't undo them twice\n            clear();\n        }\n    }\n    return {\n        registerMutations,\n        restoreDOM,\n        clear\n    };\n};\nvar MUTATION_OBSERVER_CONFIG = {\n    subtree: true,\n    childList: true,\n    characterData: true,\n    characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nclass RestoreDOMComponent extends react__WEBPACK_IMPORTED_MODULE_3__.Component {\n    constructor(){\n        super(...arguments);\n        _defineProperty(this, \"context\", null);\n        _defineProperty(this, \"manager\", null);\n        _defineProperty(this, \"mutationObserver\", null);\n    }\n    observe() {\n        var _this$mutationObserve;\n        var { node } = this.props;\n        if (!node.current) {\n            throw new Error(\"Failed to attach MutationObserver, `node` is undefined\");\n        }\n        (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n    }\n    componentDidMount() {\n        var { receivedUserInput } = this.props;\n        var editor = this.context;\n        this.manager = createRestoreDomManager(editor, receivedUserInput);\n        this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n        this.observe();\n    }\n    getSnapshotBeforeUpdate() {\n        var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n        var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n        if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n            var _this$manager;\n            (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n        }\n        (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n        (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n        return null;\n    }\n    componentDidUpdate() {\n        var _this$manager3;\n        (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n        this.observe();\n    }\n    componentWillUnmount() {\n        var _this$mutationObserve4;\n        (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n    }\n    render() {\n        return this.props.children;\n    }\n}\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID ? RestoreDOMComponent : (_ref)=>{\n    var { children } = _ref;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, children);\n};\n/**\n * A React context for sharing the `composing` state of the editor.\n */ var ComposingContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `composing` state of the editor.\n */ var useComposing = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ComposingContext);\n};\nvar _excluded$1 = [\n    \"autoFocus\",\n    \"decorate\",\n    \"onDOMBeforeInput\",\n    \"placeholder\",\n    \"readOnly\",\n    \"renderElement\",\n    \"renderLeaf\",\n    \"renderPlaceholder\",\n    \"scrollSelectionIntoView\",\n    \"style\",\n    \"as\",\n    \"disableDefaultStyles\"\n], _excluded2 = [\n    \"text\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar Children = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, useChildren(props));\n/**\n * Editable.\n */ var Editable = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, forwardedRef)=>{\n    var defaultRenderPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultPlaceholder, _objectSpread({}, props)), []);\n    var { autoFocus, decorate = defaultDecorate, onDOMBeforeInput: propsOnDOMBeforeInput, placeholder, readOnly = false, renderElement, renderLeaf, renderPlaceholder = defaultRenderPlaceholder, scrollSelectionIntoView = defaultScrollSelectionIntoView, style: userStyle = {}, as: Component = \"div\", disableDefaultStyles = false } = props, attributes = _objectWithoutProperties(props, _excluded$1);\n    var editor = useSlate();\n    // Rerender editor when composition status changed\n    var [isComposing, setIsComposing] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var deferredOperations = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    var [placeholderHeight, setPlaceholderHeight] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    var processing = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    var { onUserInput, receivedUserInput } = useTrackUserInput();\n    var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)((s)=>s + 1, 0);\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n    // Update internal state on each render.\n    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_READ_ONLY.set(editor, readOnly);\n    // Keep track of some state for the event handler logic.\n    var state = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({\n            isDraggingInternally: false,\n            isUpdatingSelection: false,\n            latestElement: null,\n            hasMarkPlaceholder: false\n        }), []);\n    // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n    // needs to be manually focused.\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (ref.current && autoFocus) {\n            ref.current.focus();\n        }\n    }, [\n        autoFocus\n    ]);\n    /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */ var androidInputManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    // Listen on the native `selectionchange` event to be able to update any time\n    // the selection changes. This is required because React's `onSelect` is leaky\n    // and non-standard so it doesn't fire until after a selection has been\n    // released. This causes issues in situations where another change happens\n    // while a selection is being dragged.\n    var onDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default()(()=>{\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n                onDOMSelectionChange();\n                return;\n            }\n            var el = ReactEditor.toDOMNode(editor, editor);\n            var root = el.getRootNode();\n            if (!processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n                processing.current = true;\n                var active = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getActiveElement)();\n                if (active) {\n                    document.execCommand(\"indent\");\n                } else {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n                processing.current = false;\n                return;\n            }\n            var androidInputManager = androidInputManagerRef.current;\n            if ((slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n                var _root = ReactEditor.findDocumentOrShadowRoot(editor);\n                var { activeElement } = _root;\n                var _el = ReactEditor.toDOMNode(editor, editor);\n                var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(_root);\n                if (activeElement === _el) {\n                    state.latestElement = activeElement;\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n                } else {\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n                }\n                if (!domSelection) {\n                    return slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n                var { anchorNode, focusNode } = domSelection;\n                var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n                var focusNodeInEditor = ReactEditor.hasTarget(editor, focusNode);\n                if (anchorNodeSelectable && focusNodeInEditor) {\n                    var range = ReactEditor.toSlateRange(editor, domSelection, {\n                        exactMatch: false,\n                        suppressThrow: true\n                    });\n                    if (range) {\n                        if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                        } else {\n                            androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n                        }\n                    }\n                }\n                // Deselect the editor if the dom selection is not selectable in readonly mode\n                if (readOnly && (!anchorNodeSelectable || !focusNodeInEditor)) {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n            }\n        }, 100), [\n        editor,\n        readOnly,\n        state\n    ]);\n    var scheduleOnDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(onDOMSelectionChange, 0), [\n        onDOMSelectionChange\n    ]);\n    androidInputManagerRef.current = useAndroidInputManager({\n        node: ref,\n        onDOMSelectionChange,\n        scheduleOnDOMSelectionChange\n    });\n    useIsomorphicLayoutEffect(()=>{\n        var _androidInputManagerR, _androidInputManagerR2;\n        // Update element-related weak maps with the DOM element ref.\n        var window1;\n        if (ref.current && (window1 = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getDefaultView)(ref.current))) {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_WINDOW.set(editor, window1);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.set(editor, ref.current);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.set(editor, ref.current);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.ELEMENT_TO_NODE.set(ref.current, editor);\n        } else {\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n        }\n        // Make sure the DOM selection state is in sync.\n        var { selection } = editor;\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n        if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n            return;\n        }\n        var setDomSelection = (forceChange)=>{\n            var hasDomSelection = domSelection.type !== \"None\";\n            // If the DOM selection is properly unset, we're done.\n            if (!selection && !hasDomSelection) {\n                return;\n            }\n            // Get anchorNode and focusNode\n            var focusNode = domSelection.focusNode;\n            var anchorNode;\n            // COMPAT: In firefox the normal selection way does not work\n            // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && domSelection.rangeCount > 1) {\n                var firstRange = domSelection.getRangeAt(0);\n                var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n                // Right to left\n                if (firstRange.startContainer === focusNode) {\n                    anchorNode = lastRange.endContainer;\n                } else {\n                    // Left to right\n                    anchorNode = firstRange.startContainer;\n                }\n            } else {\n                anchorNode = domSelection.anchorNode;\n            }\n            // verify that the dom selection is in the editor\n            var editorElement = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.get(editor);\n            var hasDomSelectionInEditor = false;\n            if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n                hasDomSelectionInEditor = true;\n            }\n            // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n            if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n                var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n                    exactMatch: true,\n                    // domSelection is not necessarily a valid Slate range\n                    // (e.g. when clicking on contentEditable:false element)\n                    suppressThrow: true\n                });\n                if (slateRange && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(slateRange, selection)) {\n                    var _anchorNode;\n                    if (!state.hasMarkPlaceholder) {\n                        return;\n                    }\n                    // Ensure selection is inside the mark placeholder\n                    if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute(\"data-slate-mark-placeholder\")) {\n                        return;\n                    }\n                }\n            }\n            // when <Editable/> is being controlled through external value\n            // then its children might just change - DOM responds to it on its own\n            // but Slate's value is not being updated through any operation\n            // and thus it doesn't transform selection on its own\n            if (selection && !ReactEditor.hasRange(editor, selection)) {\n                editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n                    exactMatch: false,\n                    suppressThrow: true\n                });\n                return;\n            }\n            // Otherwise the DOM selection is out of sync, so update it.\n            state.isUpdatingSelection = true;\n            var newDomRange = null;\n            try {\n                newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n            } catch (e) {\n            // Ignore, dom and state might be out of sync\n            }\n            if (newDomRange) {\n                if (ReactEditor.isComposing(editor) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n                    domSelection.collapseToEnd();\n                } else if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isBackward(selection)) {\n                    domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n                } else {\n                    domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n                }\n                scrollSelectionIntoView(editor, newDomRange);\n            } else {\n                domSelection.removeAllRanges();\n            }\n            return newDomRange;\n        };\n        // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n        if (domSelection.rangeCount <= 1) {\n            setDomSelection();\n        }\n        var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === \"action\";\n        if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID || !ensureSelection) {\n            setTimeout(()=>{\n                state.isUpdatingSelection = false;\n            });\n            return;\n        }\n        var timeoutId = null;\n        var animationFrameId = requestAnimationFrame(()=>{\n            if (ensureSelection) {\n                var ensureDomSelection = (forceChange)=>{\n                    try {\n                        var el = ReactEditor.toDOMNode(editor, editor);\n                        el.focus();\n                        setDomSelection(forceChange);\n                    } catch (e) {\n                    // Ignore, dom and state might be out of sync\n                    }\n                };\n                // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n                // This essentially would make setting the slate selection during an update meaningless, so we force it\n                // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n                // visible flicker.\n                ensureDomSelection();\n                timeoutId = setTimeout(()=>{\n                    // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n                    // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n                    // the animation frame to ensure it displays the correct state.\n                    ensureDomSelection(true);\n                    state.isUpdatingSelection = false;\n                });\n            }\n        });\n        return ()=>{\n            cancelAnimationFrame(animationFrameId);\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n        };\n    });\n    // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n    // is required because React's `beforeinput` is fake and never really attaches\n    // to the real event sadly. (2019/11/01)\n    // https://github.com/facebook/react/issues/11211\n    var onDOMBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = el.getRootNode();\n        if (processing !== null && processing !== void 0 && processing.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && root instanceof ShadowRoot) {\n            var ranges = event.getTargetRanges();\n            var range = ranges[0];\n            var newRange = new window.Range();\n            newRange.setStart(range.startContainer, range.startOffset);\n            newRange.setEnd(range.endContainer, range.endOffset);\n            // Translate the DOM Range into a Slate Range\n            var slateRange = ReactEditor.toSlateRange(editor, newRange, {\n                exactMatch: false,\n                suppressThrow: false\n            });\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, slateRange);\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            return;\n        }\n        onUserInput();\n        if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n            var _EDITOR_TO_USER_SELEC;\n            // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n            if (androidInputManagerRef.current) {\n                return androidInputManagerRef.current.handleDOMBeforeInput(event);\n            }\n            // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n            // triggering a `beforeinput` expecting the change to be applied to the immediately before\n            // set selection.\n            scheduleOnDOMSelectionChange.flush();\n            onDOMSelectionChange.flush();\n            var { selection } = editor;\n            var { inputType: type } = event;\n            var data = event.dataTransfer || event.data || undefined;\n            var isCompositionChange = type === \"insertCompositionText\" || type === \"deleteCompositionText\";\n            // COMPAT: use composition change events as a hint to where we should insert\n            // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n            if (isCompositionChange && ReactEditor.isComposing(editor)) {\n                return;\n            }\n            var native = false;\n            if (type === \"insertText\" && selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.\n            // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n            // causes duplicate inserts.\n            event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n            // When there is an inline element, e.g. a link, and you select\n            // right after it (the start of the next node).\n            selection.anchor.offset !== 0) {\n                native = true;\n                // Skip native if there are marks, as\n                // `insertText` will insert a node, not just text.\n                if (editor.marks) {\n                    native = false;\n                }\n                // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint)\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n                    var _node$parentElement, _window$getComputedSt;\n                    // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n                    // Therefore we don't allow native events to insert text at the end of anchor nodes.\n                    var { anchor } = selection;\n                    var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);\n                    var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest(\"a\");\n                    var _window = ReactEditor.getWindow(editor);\n                    if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n                        var _lastText$textContent;\n                        // Find the last text node inside the anchor.\n                        var lastText = _window === null || _window === void 0 ? void 0 : _window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n                        if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n                            native = false;\n                        }\n                    }\n                    // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n                    // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n                    if (native && node.parentElement && (_window === null || _window === void 0 || (_window$getComputedSt = _window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === \"pre\") {\n                        var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n                            at: anchor.path,\n                            match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n)\n                        });\n                        if (block && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(block[0]).includes(\"\t\")) {\n                            native = false;\n                        }\n                    }\n                }\n            }\n            // COMPAT: For the deleting forward/backward input types we don't want\n            // to change the selection because it is the range that will be deleted,\n            // and those commands determine that for themselves.\n            // If the NODE_MAP is dirty, we can't trust the selection anchor (eg ReactEditor.toDOMPoint via ReactEditor.toSlateRange)\n            if ((!type.startsWith(\"delete\") || type.startsWith(\"deleteBy\")) && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_NODE_MAP_DIRTY.get(editor)) {\n                var [targetRange] = event.getTargetRanges();\n                if (targetRange) {\n                    var _range = ReactEditor.toSlateRange(editor, targetRange, {\n                        exactMatch: false,\n                        suppressThrow: false\n                    });\n                    if (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, _range)) {\n                        native = false;\n                        var selectionRef = !isCompositionChange && editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection);\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range);\n                        if (selectionRef) {\n                            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n                        }\n                    }\n                }\n            }\n            // Composition change types occur while a user is composing text and can't be\n            // cancelled. Let them through and wait for the composition to end.\n            if (isCompositionChange) {\n                return;\n            }\n            if (!native) {\n                event.preventDefault();\n            }\n            // COMPAT: If the selection is expanded, even if the command seems like\n            // a delete forward/backward command it should delete the selection.\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection) && type.startsWith(\"delete\")) {\n                var direction = type.endsWith(\"Backward\") ? \"backward\" : \"forward\";\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                    direction\n                });\n                return;\n            }\n            switch(type){\n                case \"deleteByComposition\":\n                case \"deleteByCut\":\n                case \"deleteByDrag\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                        break;\n                    }\n                case \"deleteContent\":\n                case \"deleteContentForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n                        break;\n                    }\n                case \"deleteContentBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n                        break;\n                    }\n                case \"deleteEntireSoftLine\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteHardLineBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"block\"\n                        });\n                        break;\n                    }\n                case \"deleteSoftLineBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteHardLineForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"block\"\n                        });\n                        break;\n                    }\n                case \"deleteSoftLineForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteWordBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"word\"\n                        });\n                        break;\n                    }\n                case \"deleteWordForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"word\"\n                        });\n                        break;\n                    }\n                case \"insertLineBreak\":\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                    break;\n                case \"insertParagraph\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n                        break;\n                    }\n                case \"insertFromComposition\":\n                case \"insertFromDrop\":\n                case \"insertFromPaste\":\n                case \"insertFromYank\":\n                case \"insertReplacementText\":\n                case \"insertText\":\n                    {\n                        if (type === \"insertFromComposition\") {\n                            // COMPAT: in Safari, `compositionend` is dispatched after the\n                            // `beforeinput` for \"insertFromComposition\". But if we wait for it\n                            // then we will abort because we're still composing and the selection\n                            // won't be updated properly.\n                            // https://www.w3.org/TR/input-events-2/\n                            if (ReactEditor.isComposing(editor)) {\n                                setIsComposing(false);\n                                slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n                            }\n                        }\n                        // use a weak comparison instead of 'instanceof' to allow\n                        // programmatic access of paste events coming from external windows\n                        // like cypress where cy.window does not work realibly\n                        if ((data === null || data === void 0 ? void 0 : data.constructor.name) === \"DataTransfer\") {\n                            ReactEditor.insertData(editor, data);\n                        } else if (typeof data === \"string\") {\n                            // Only insertText operations use the native functionality, for now.\n                            // Potentially expand to single character deletes, as well.\n                            if (native) {\n                                deferredOperations.current.push(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data));\n                            } else {\n                                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data);\n                            }\n                        }\n                        break;\n                    }\n            }\n            // Restore the actual user section if nothing manually set it.\n            var toRestore = (_EDITOR_TO_USER_SELEC = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_SELECTION.delete(editor);\n            if (toRestore && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, toRestore))) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, toRestore);\n            }\n        }\n    }, [\n        editor,\n        onDOMSelectionChange,\n        onUserInput,\n        propsOnDOMBeforeInput,\n        readOnly,\n        scheduleOnDOMSelectionChange\n    ]);\n    var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((node)=>{\n        if (node == null) {\n            onDOMSelectionChange.cancel();\n            scheduleOnDOMSelectionChange.cancel();\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ELEMENT.delete(editor);\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.NODE_TO_ELEMENT.delete(editor);\n            if (ref.current && slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n                // @ts-ignore The `beforeinput` event isn't recognized.\n                ref.current.removeEventListener(\"beforeinput\", onDOMBeforeInput);\n            }\n        } else {\n            // Attach a native DOM event handler for `beforeinput` events, because React's\n            // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n            // real `beforeinput` events sadly... (2019/11/04)\n            // https://github.com/facebook/react/issues/11211\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n                // @ts-ignore The `beforeinput` event isn't recognized.\n                node.addEventListener(\"beforeinput\", onDOMBeforeInput);\n            }\n        }\n        ref.current = node;\n        if (typeof forwardedRef === \"function\") {\n            forwardedRef(node);\n        } else if (forwardedRef) {\n            forwardedRef.current = node;\n        }\n    }, [\n        onDOMSelectionChange,\n        scheduleOnDOMSelectionChange,\n        editor,\n        onDOMBeforeInput,\n        forwardedRef\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        var window1 = ReactEditor.getWindow(editor);\n        // Attach a native DOM event handler for `selectionchange`, because React's\n        // built-in `onSelect` handler doesn't fire for all selection changes. It's\n        // a leaky polyfill that only fires on keypresses or clicks. Instead, we\n        // want to fire for any change to the selection inside the editor.\n        // (2019/11/04) https://github.com/facebook/react/issues/5785\n        window1.document.addEventListener(\"selectionchange\", scheduleOnDOMSelectionChange);\n        // Listen for dragend and drop globally. In Firefox, if a drop handler\n        // initiates an operation that causes the originally dragged element to\n        // unmount, that element will not emit a dragend event. (2024/06/21)\n        var stoppedDragging = ()=>{\n            state.isDraggingInternally = false;\n        };\n        window1.document.addEventListener(\"dragend\", stoppedDragging);\n        window1.document.addEventListener(\"drop\", stoppedDragging);\n        return ()=>{\n            window1.document.removeEventListener(\"selectionchange\", scheduleOnDOMSelectionChange);\n            window1.document.removeEventListener(\"dragend\", stoppedDragging);\n            window1.document.removeEventListener(\"drop\", stoppedDragging);\n        };\n    }, [\n        scheduleOnDOMSelectionChange,\n        state\n    ]);\n    var decorations = decorate([\n        editor,\n        []\n    ]);\n    var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(editor)).length === 1 && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(editor) === \"\" && !isComposing;\n    var placeHolderResizeHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((placeholderEl)=>{\n        if (placeholderEl && showPlaceholder) {\n            var _placeholderEl$getBou;\n            setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n        } else {\n            setPlaceholderHeight(undefined);\n        }\n    }, [\n        showPlaceholder\n    ]);\n    if (showPlaceholder) {\n        var start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, []);\n        decorations.push({\n            [slate_dom__WEBPACK_IMPORTED_MODULE_4__.PLACEHOLDER_SYMBOL]: true,\n            placeholder,\n            onPlaceholderResize: placeHolderResizeHandler,\n            anchor: start,\n            focus: start\n        });\n    }\n    var { marks } = editor;\n    state.hasMarkPlaceholder = false;\n    if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection) && marks) {\n        var { anchor } = editor.selection;\n        var leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n        var rest = _objectWithoutProperties(leaf, _excluded2);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(leaf, marks, {\n            loose: true\n        })) {\n            state.hasMarkPlaceholder = true;\n            var unset = Object.fromEntries(Object.keys(rest).map((mark)=>[\n                    mark,\n                    null\n                ]));\n            decorations.push(_objectSpread(_objectSpread(_objectSpread({\n                [slate_dom__WEBPACK_IMPORTED_MODULE_4__.MARK_PLACEHOLDER_SYMBOL]: true\n            }, unset), marks), {}, {\n                anchor,\n                focus: anchor\n            }));\n        }\n    }\n    // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n    // before we receive the composition end event.\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        setTimeout(()=>{\n            var { selection } = editor;\n            if (selection) {\n                var { anchor: _anchor } = selection;\n                var _text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _anchor.path);\n                // While marks isn't a 'complete' text, we can still use loose Text.equals\n                // here which only compares marks anyway.\n                if (marks && !slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(_text, marks, {\n                    loose: true\n                })) {\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n                    return;\n                }\n            }\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n        });\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ReadOnlyContext.Provider, {\n        value: readOnly\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ComposingContext.Provider, {\n        value: isComposing\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DecorateContext.Provider, {\n        value: decorate\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(RestoreDOM, {\n        node: ref,\n        receivedUserInput: receivedUserInput\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Component, _objectSpread(_objectSpread({\n        role: readOnly ? undefined : \"textbox\",\n        \"aria-multiline\": readOnly ? undefined : true\n    }, attributes), {}, {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n        // have to use hacks to make these replacement-based features work.\n        // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n        // mismatch warning app moves to browser. Pass-through consumer props when\n        // not CAN_USE_DOM (SSR) and default to falsy value\n        spellCheck: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.spellCheck : false,\n        autoCorrect: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCorrect : \"false\",\n        autoCapitalize: slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || !slate_dom__WEBPACK_IMPORTED_MODULE_4__.CAN_USE_DOM ? attributes.autoCapitalize : \"false\",\n        \"data-slate-editor\": true,\n        \"data-slate-node\": \"value\",\n        // explicitly set this\n        contentEditable: !readOnly,\n        // in some cases, a decoration needs access to the range / selection to decorate a text node,\n        // then you will select the whole text node when you select part the of text\n        // this magic zIndex=\"-1\" will fix it\n        zindex: -1,\n        suppressContentEditableWarning: true,\n        ref: callbackRef,\n        style: _objectSpread(_objectSpread({}, disableDefaultStyles ? {} : _objectSpread({\n            // Allow positioning relative to the editable element.\n            position: \"relative\",\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: \"pre-wrap\",\n            // Allow words to break if they are too long.\n            wordWrap: \"break-word\"\n        }, placeholderHeight ? {\n            minHeight: placeholderHeight\n        } : {})), userStyle),\n        onBeforeInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n            // fall back to React's leaky polyfill instead just for it. It\n            // only works for the `insertText` input type.\n            if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n                event.preventDefault();\n                if (!ReactEditor.isComposing(editor)) {\n                    var _text2 = event.data;\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text2);\n                }\n            }\n        }, [\n            attributes.onBeforeInput,\n            editor,\n            readOnly\n        ]),\n        onInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (isEventHandled(event, attributes.onInput)) {\n                return;\n            }\n            if (androidInputManagerRef.current) {\n                androidInputManagerRef.current.handleInput();\n                return;\n            }\n            // Flush native operations, as native events will have propogated\n            // and we can correctly compare DOM text values in components\n            // to stop rendering, so that browser functions like autocorrect\n            // and spellcheck work as expected.\n            for (var op of deferredOperations.current){\n                op();\n            }\n            deferredOperations.current = [];\n            // COMPAT: Since `beforeinput` doesn't fully `preventDefault`,\n            // there's a chance that content might be placed in the browser's undo stack.\n            // This means undo can be triggered even when the div is not focused,\n            // and it only triggers the input event for the node. (2024/10/09)\n            if (!ReactEditor.isFocused(editor)) {\n                var native = event.nativeEvent;\n                var maybeHistoryEditor = editor;\n                if (native.inputType === \"historyUndo\" && typeof maybeHistoryEditor.undo === \"function\") {\n                    maybeHistoryEditor.undo();\n                    return;\n                }\n                if (native.inputType === \"historyRedo\" && typeof maybeHistoryEditor.redo === \"function\") {\n                    maybeHistoryEditor.redo();\n                    return;\n                }\n            }\n        }, [\n            attributes.onInput,\n            editor\n        ]),\n        onBlur: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n                return;\n            }\n            // COMPAT: If the current `activeElement` is still the previous\n            // one, this is due to the window being blurred when the tab\n            // itself becomes unfocused, so we want to abort early to allow to\n            // editor to stay focused when the tab becomes focused again.\n            var root = ReactEditor.findDocumentOrShadowRoot(editor);\n            if (state.latestElement === root.activeElement) {\n                return;\n            }\n            var { relatedTarget } = event;\n            var el = ReactEditor.toDOMNode(editor, editor);\n            // COMPAT: The event should be ignored if the focus is returning\n            // to the editor from an embedded editable element (eg. an <input>\n            // element inside a void node).\n            if (relatedTarget === el) {\n                return;\n            }\n            // COMPAT: The event should be ignored if the focus is moving from\n            // the editor to inside a void node's spacer element.\n            if ((0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMElement)(relatedTarget) && relatedTarget.hasAttribute(\"data-slate-spacer\")) {\n                return;\n            }\n            // COMPAT: The event should be ignored if the focus is moving to a\n            // non- editable section of an element that isn't a void node (eg.\n            // a list item of the check list example).\n            if (relatedTarget != null && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n                var node = ReactEditor.toSlateNode(editor, relatedTarget);\n                if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isVoid(node)) {\n                    return;\n                }\n            }\n            // COMPAT: Safari doesn't always remove the selection even if the content-\n            // editable element no longer has focus. Refer to:\n            // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n            if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n                var domSelection = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.getSelection)(root);\n                domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n            }\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.delete(editor);\n        }, [\n            readOnly,\n            state.isUpdatingSelection,\n            state.latestElement,\n            editor,\n            attributes.onBlur\n        ]),\n        onClick: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target)) {\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                var path = ReactEditor.findPath(editor, node);\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, path) || slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, path) !== node) {\n                    return;\n                }\n                if (event.detail === slate_dom__WEBPACK_IMPORTED_MODULE_4__.TRIPLE_CLICK && path.length >= 1) {\n                    var blockPath = path;\n                    if (!(slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, node))) {\n                        var _block$;\n                        var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n                            match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n),\n                            at: path\n                        });\n                        blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n                    }\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, blockPath);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                    return;\n                }\n                if (readOnly) {\n                    return;\n                }\n                var _start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, path);\n                var end = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, path);\n                var startVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: _start\n                });\n                var endVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: end\n                });\n                if (startVoid && endVoid && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(startVoid[1], endVoid[1])) {\n                    var _range2 = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, _start);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range2);\n                }\n            }\n        }, [\n            editor,\n            attributes.onClick,\n            readOnly\n        ]),\n        onCompositionEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                var _androidInputManagerR3;\n                if (ReactEditor.isComposing(editor)) {\n                    Promise.resolve().then(()=>{\n                        setIsComposing(false);\n                        slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n                    });\n                }\n                (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n                if (isEventHandled(event, attributes.onCompositionEnd) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n                    return;\n                }\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX_LEGACY && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_IOS && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WECHATBROWSER && !slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_UC_MOBILE && event.data) {\n                    var placeholderMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n                    // Ensure we insert text with the marks the user was actually seeing\n                    if (placeholderMarks !== undefined) {\n                        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n                        editor.marks = placeholderMarks;\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, event.data);\n                    var userMarks = slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.get(editor);\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_USER_MARKS.delete(editor);\n                    if (userMarks !== undefined) {\n                        editor.marks = userMarks;\n                    }\n                }\n            }\n        }, [\n            attributes.onCompositionEnd,\n            editor\n        ]),\n        onCompositionUpdate: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n                if (!ReactEditor.isComposing(editor)) {\n                    setIsComposing(true);\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, true);\n                }\n            }\n        }, [\n            attributes.onCompositionUpdate,\n            editor\n        ]),\n        onCompositionStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                var _androidInputManagerR4;\n                (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n                if (isEventHandled(event, attributes.onCompositionStart) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID) {\n                    return;\n                }\n                setIsComposing(true);\n                var { selection } = editor;\n                if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                    return;\n                }\n            }\n        }, [\n            attributes.onCompositionStart,\n            editor\n        ]),\n        onCopy: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n                event.preventDefault();\n                ReactEditor.setFragmentData(editor, event.clipboardData, \"copy\");\n            }\n        }, [\n            attributes.onCopy,\n            editor\n        ]),\n        onCut: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n                event.preventDefault();\n                ReactEditor.setFragmentData(editor, event.clipboardData, \"cut\");\n                var { selection } = editor;\n                if (selection) {\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                    } else {\n                        var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n                        if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor);\n                        }\n                    }\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onCut\n        ]),\n        onDragOver: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n                    event.preventDefault();\n                }\n            }\n        }, [\n            attributes.onDragOver,\n            editor\n        ]),\n        onDragStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                var path = ReactEditor.findPath(editor, node);\n                var voidMatch = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: path,\n                    voids: true\n                });\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, path);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                }\n                state.isDraggingInternally = true;\n                ReactEditor.setFragmentData(editor, event.dataTransfer, \"drag\");\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onDragStart,\n            state\n        ]),\n        onDrop: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n                event.preventDefault();\n                // Keep a reference to the dragged range before updating selection\n                var draggedRange = editor.selection;\n                // Find the range where the drop happened\n                var range = ReactEditor.findEventRange(editor, event);\n                var data = event.dataTransfer;\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                if (state.isDraggingInternally) {\n                    if (draggedRange && !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(draggedRange, range) && !slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                        at: range,\n                        voids: true\n                    })) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor, {\n                            at: draggedRange\n                        });\n                    }\n                }\n                ReactEditor.insertData(editor, data);\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                    ReactEditor.focus(editor);\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onDrop,\n            state\n        ]),\n        onDragEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n                attributes.onDragEnd(event);\n            }\n        }, [\n            readOnly,\n            state,\n            attributes,\n            editor\n        ]),\n        onFocus: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n                var el = ReactEditor.toDOMNode(editor, editor);\n                var root = ReactEditor.findDocumentOrShadowRoot(editor);\n                state.latestElement = root.activeElement;\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FIREFOX && event.target !== el) {\n                    el.focus();\n                    return;\n                }\n                slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_FOCUSED.set(editor, true);\n            }\n        }, [\n            readOnly,\n            state,\n            editor,\n            attributes.onFocus\n        ]),\n        onKeyDown: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n                var _androidInputManagerR5;\n                (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n                var { nativeEvent } = event;\n                // COMPAT: The composition end event isn't fired reliably in all browsers,\n                // so we sometimes might end up stuck in a composition state even though we\n                // aren't composing any more.\n                if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n                    slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_COMPOSING.set(editor, false);\n                    setIsComposing(false);\n                }\n                if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n                    return;\n                }\n                var { selection } = editor;\n                var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n                var isRTL = direction__WEBPACK_IMPORTED_MODULE_0___default()(slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element)) === \"rtl\";\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isRedo(nativeEvent)) {\n                    event.preventDefault();\n                    var maybeHistoryEditor = editor;\n                    if (typeof maybeHistoryEditor.redo === \"function\") {\n                        maybeHistoryEditor.redo();\n                    }\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isUndo(nativeEvent)) {\n                    event.preventDefault();\n                    var _maybeHistoryEditor = editor;\n                    if (typeof _maybeHistoryEditor.undo === \"function\") {\n                        _maybeHistoryEditor.undo();\n                    }\n                    return;\n                }\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineBackward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        reverse: true\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveLineForward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\"\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineBackward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        edge: \"focus\",\n                        reverse: true\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isExtendLineForward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        edge: \"focus\"\n                    });\n                    return;\n                }\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveBackward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                            reverse: !isRTL\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: isRTL ? \"end\" : \"start\"\n                        });\n                    }\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveForward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                            reverse: isRTL\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: isRTL ? \"start\" : \"end\"\n                        });\n                    }\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordBackward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"focus\"\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"word\",\n                        reverse: !isRTL\n                    });\n                    return;\n                }\n                if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isMoveWordForward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"focus\"\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"word\",\n                        reverse: isRTL\n                    });\n                    return;\n                }\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT) {\n                    // We don't have a core behavior for these, but they change the\n                    // DOM if we don't prevent them, so we have to.\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isBold(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isItalic(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isTransposeCharacter(nativeEvent)) {\n                        event.preventDefault();\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSoftBreak(nativeEvent)) {\n                        event.preventDefault();\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isSplitBlock(nativeEvent)) {\n                        event.preventDefault();\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                unit: \"line\"\n                            });\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteLineForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                                unit: \"line\"\n                            });\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                unit: \"word\"\n                            });\n                        }\n                        return;\n                    }\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteWordForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                                unit: \"word\"\n                            });\n                        }\n                        return;\n                    }\n                } else {\n                    if (slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_CHROME || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n                        // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                        // an event when deleting backwards in a selected void inline node\n                        if (selection && (slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteBackward(nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.Hotkeys.isDeleteForward(nativeEvent)) && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                            var currentNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n                            if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(currentNode) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, currentNode) && (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isInline(editor, currentNode) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, currentNode))) {\n                                event.preventDefault();\n                                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                    unit: \"block\"\n                                });\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onKeyDown\n        ]),\n        onPaste: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                // COMPAT: Safari InputEvents generated by pasting won't include\n                // application/x-slate-fragment items, so use the\n                // ClipboardEvent here. (2023/03/15)\n                if (!slate_dom__WEBPACK_IMPORTED_MODULE_4__.HAS_BEFORE_INPUT_SUPPORT || (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isPlainTextOnlyPaste)(event.nativeEvent) || slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_WEBKIT) {\n                    event.preventDefault();\n                    ReactEditor.insertData(editor, event.clipboardData);\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onPaste\n        ])\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Children, {\n        decorations: decorations,\n        node: editor,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: editor.selection\n    }))))));\n});\n/**\n * The default placeholder element\n */ var DefaultPlaceholder = (_ref)=>{\n    var { attributes, children } = _ref;\n    return(/*#__PURE__*/ // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread({}, attributes), children, slate_dom__WEBPACK_IMPORTED_MODULE_4__.IS_ANDROID && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null)));\n};\n/**\n * A default memoized decorate function.\n */ var defaultDecorate = ()=>[];\n/**\n * A default implement to scroll dom range into view.\n */ var defaultScrollSelectionIntoView = (editor, domRange)=>{\n    // This was affecting the selection of multiple blocks and dragging behavior,\n    // so enabled only if the selection has been collapsed.\n    if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection))) {\n        var leafEl = domRange.startContainer.parentElement;\n        leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n        (0,scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(leafEl, {\n            scrollMode: \"if-needed\"\n        });\n        // @ts-expect-error an unorthodox delete D:\n        delete leafEl.getBoundingClientRect;\n    }\n};\n/**\n * Check if an event is overrided by a handler.\n */ var isEventHandled = (event, handler)=>{\n    if (!handler) {\n        return false;\n    }\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    var shouldTreatEventAsHandled = handler(event);\n    if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n    }\n    return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */ var isDOMEventTargetInput = (event)=>{\n    return (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.isDOMNode)(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */ var isDOMEventHandled = (event, handler)=>{\n    if (!handler) {\n        return false;\n    }\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    var shouldTreatEventAsHandled = handler(event);\n    if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n    }\n    return event.defaultPrevented;\n};\n/**\n * A React context for sharing the `focused` state of the editor.\n */ var FocusedContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `focused` state of the editor.\n */ var useFocused = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(FocusedContext);\n};\nfunction isError(error) {\n    return error instanceof Error;\n}\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */ var SlateSelectorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nvar refEquality = (a, b)=>a === b;\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */ function useSlateSelector(selector) {\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n    var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)((s)=>s + 1, 0);\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n    if (!context) {\n        throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n    }\n    var { getSlate, addEventListener } = context;\n    var latestSubscriptionCallbackError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    var latestSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(()=>null);\n    var latestSelectedState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var selectedState;\n    try {\n        if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n            selectedState = selector(getSlate());\n        } else {\n            selectedState = latestSelectedState.current;\n        }\n    } catch (err) {\n        if (latestSubscriptionCallbackError.current && isError(err)) {\n            err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n        }\n        throw err;\n    }\n    useIsomorphicLayoutEffect(()=>{\n        latestSelector.current = selector;\n        latestSelectedState.current = selectedState;\n        latestSubscriptionCallbackError.current = undefined;\n    });\n    useIsomorphicLayoutEffect(()=>{\n        function checkForUpdates() {\n            try {\n                var newSelectedState = latestSelector.current(getSlate());\n                if (equalityFn(newSelectedState, latestSelectedState.current)) {\n                    return;\n                }\n                latestSelectedState.current = newSelectedState;\n            } catch (err) {\n                // we ignore all errors here, since when the component\n                // is re-rendered, the selectors are called again, and\n                // will throw again, if neither props nor store state\n                // changed\n                if (err instanceof Error) {\n                    latestSubscriptionCallbackError.current = err;\n                } else {\n                    latestSubscriptionCallbackError.current = new Error(String(err));\n                }\n            }\n            forceRender();\n        }\n        var unsubscribe = addEventListener(checkForUpdates);\n        checkForUpdates();\n        return ()=>unsubscribe();\n    }, // don't rerender on equalityFn change since we want to be able to define it inline\n    [\n        addEventListener,\n        getSlate\n    ]);\n    return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */ function useSelectorContext(editor) {\n    var eventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]).current;\n    var slateRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)({\n        editor\n    }).current;\n    var onChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((editor)=>{\n        slateRef.editor = editor;\n        eventListeners.forEach((listener)=>listener(editor));\n    }, [\n        eventListeners,\n        slateRef\n    ]);\n    var selectorContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n        return {\n            getSlate: ()=>slateRef.editor,\n            addEventListener: (callback)=>{\n                eventListeners.push(callback);\n                return ()=>{\n                    eventListeners.splice(eventListeners.indexOf(callback), 1);\n                };\n            }\n        };\n    }, [\n        eventListeners,\n        slateRef\n    ]);\n    return {\n        selectorContext,\n        onChange\n    };\n}\nvar REACT_MAJOR_VERSION = parseInt(react__WEBPACK_IMPORTED_MODULE_3___default().version.split(\".\")[0], 10);\nvar _excluded = [\n    \"editor\",\n    \"children\",\n    \"onChange\",\n    \"onSelectionChange\",\n    \"onValueChange\",\n    \"initialValue\"\n];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */ var Slate = (props)=>{\n    var { editor, children, onChange, onSelectionChange, onValueChange, initialValue } = props, rest = _objectWithoutProperties(props, _excluded);\n    var [context, setContext] = react__WEBPACK_IMPORTED_MODULE_3___default().useState(()=>{\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Node.isNodeList(initialValue)) {\n            throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(initialValue)));\n        }\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(editor)) {\n            throw new Error(\"[Slate] editor is invalid! You passed: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(editor)));\n        }\n        editor.children = initialValue;\n        Object.assign(editor, rest);\n        return {\n            v: 0,\n            editor\n        };\n    });\n    var { selectorContext, onChange: handleSelectorChange } = useSelectorContext(editor);\n    var onContextChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((options)=>{\n        var _options$operation;\n        if (onChange) {\n            onChange(editor.children);\n        }\n        switch(options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type){\n            case \"set_selection\":\n                onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n                break;\n            default:\n                onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n        }\n        setContext((prevContext)=>({\n                v: prevContext.v + 1,\n                editor\n            }));\n        handleSelectorChange(editor);\n    }, [\n        editor,\n        handleSelectorChange,\n        onChange,\n        onSelectionChange,\n        onValueChange\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n        return ()=>{\n            slate_dom__WEBPACK_IMPORTED_MODULE_4__.EDITOR_TO_ON_CHANGE.set(editor, ()=>{});\n        };\n    }, [\n        editor,\n        onContextChange\n    ]);\n    var [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(ReactEditor.isFocused(editor));\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        setIsFocused(ReactEditor.isFocused(editor));\n    }, [\n        editor\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        var fn = ()=>setIsFocused(ReactEditor.isFocused(editor));\n        if (REACT_MAJOR_VERSION >= 17) {\n            // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n            // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n            // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n            document.addEventListener(\"focusin\", fn);\n            document.addEventListener(\"focusout\", fn);\n            return ()=>{\n                document.removeEventListener(\"focusin\", fn);\n                document.removeEventListener(\"focusout\", fn);\n            };\n        } else {\n            document.addEventListener(\"focus\", fn, true);\n            document.addEventListener(\"blur\", fn, true);\n            return ()=>{\n                document.removeEventListener(\"focus\", fn, true);\n                document.removeEventListener(\"blur\", fn, true);\n            };\n        }\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateSelectorContext.Provider, {\n        value: selectorContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateContext.Provider, {\n        value: context\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(EditorContext.Provider, {\n        value: context.editor\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FocusedContext.Provider, {\n        value: isFocused\n    }, children))));\n};\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */ var useEditor = ()=>{\n    var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n    if (!editor) {\n        throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n    }\n    return editor;\n};\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */ var useSlateSelection = ()=>{\n    return useSlateSelector((editor)=>editor.selection, isSelectionEqual);\n};\nvar isSelectionEqual = (a, b)=>{\n    if (!a && !b) return true;\n    if (!a || !b) return false;\n    return slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(a, b);\n};\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */ var withReact = function withReact(editor) {\n    var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"x-slate-fragment\";\n    var e = editor;\n    e = (0,slate_dom__WEBPACK_IMPORTED_MODULE_4__.withDOM)(e, clipboardFormatKey);\n    var { onChange } = e;\n    e.onChange = (options)=>{\n        // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n        // that the children and selection can get out of sync for one render\n        // pass. So we have to use this unstable API to ensure it batches them.\n        // (2019/12/03)\n        // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n        var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? (react_dom__WEBPACK_IMPORTED_MODULE_6___default().unstable_batchedUpdates) : (callback)=>callback();\n        maybeBatchUpdates(()=>{\n            onChange(options);\n        });\n    };\n    return e;\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   coreBehavior: () => (/* binding */ coreBehavior),\n/* harmony export */   coreBehaviors: () => (/* binding */ coreBehaviors),\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isHotkey: () => (/* binding */ isHotkey),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n\n\nfunction blockOffsetToSpanSelectionPoint({ value, blockOffset }) {\n    let offsetLeft = blockOffset.offset, selectionPoint;\n    for (const block of value)if (block._key === blockOffset.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        for (const child of block.children)if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (offsetLeft === 0) {\n                selectionPoint = {\n                    path: [\n                        ...blockOffset.path,\n                        \"children\",\n                        {\n                            _key: child._key\n                        }\n                    ],\n                    offset: 0\n                };\n                break;\n            }\n            if (offsetLeft <= child.text.length) {\n                selectionPoint = {\n                    path: [\n                        ...blockOffset.path,\n                        \"children\",\n                        {\n                            _key: child._key\n                        }\n                    ],\n                    offset: offsetLeft\n                };\n                break;\n            }\n            offsetLeft -= child.text.length;\n        }\n    }\n    return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({ value, selectionPoint }) {\n    let offset = 0;\n    for (const block of value)if (block._key === selectionPoint.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        for (const child of block.children)if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (child._key === selectionPoint.path[2]._key) return {\n                path: [\n                    {\n                        _key: block._key\n                    }\n                ],\n                offset: offset + selectionPoint.offset\n            };\n            offset += child.text.length;\n        }\n    }\n}\nfunction isEmptyTextBlock(block) {\n    if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) return !1;\n    const onlyText = block.children.every(_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan), blockText = getTextBlockText(block);\n    return onlyText && blockText === \"\";\n}\nfunction getTextBlockText(block) {\n    return block.children.map((child)=>child.text ?? \"\").join(\"\");\n}\nconst IS_MAC =  false && 0, modifiers = {\n    alt: \"altKey\",\n    control: \"ctrlKey\",\n    meta: \"metaKey\",\n    shift: \"shiftKey\"\n}, aliases = {\n    add: \"+\",\n    break: \"pause\",\n    cmd: \"meta\",\n    command: \"meta\",\n    ctl: \"control\",\n    ctrl: \"control\",\n    del: \"delete\",\n    down: \"arrowdown\",\n    esc: \"escape\",\n    ins: \"insert\",\n    left: \"arrowleft\",\n    mod: IS_MAC ? \"meta\" : \"control\",\n    opt: \"alt\",\n    option: \"alt\",\n    return: \"enter\",\n    right: \"arrowright\",\n    space: \" \",\n    spacebar: \" \",\n    up: \"arrowup\",\n    win: \"meta\",\n    windows: \"meta\"\n}, keyCodes = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    shift: 16,\n    control: 17,\n    alt: 18,\n    pause: 19,\n    capslock: 20,\n    escape: 27,\n    \" \": 32,\n    pageup: 33,\n    pagedown: 34,\n    end: 35,\n    home: 36,\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    insert: 45,\n    delete: 46,\n    meta: 91,\n    numlock: 144,\n    scrolllock: 145,\n    \";\": 186,\n    \"=\": 187,\n    \",\": 188,\n    \"-\": 189,\n    \".\": 190,\n    \"/\": 191,\n    \"`\": 192,\n    \"[\": 219,\n    \"\\\\\": 220,\n    \"]\": 221,\n    \"'\": 222,\n    f1: 112,\n    f2: 113,\n    f3: 114,\n    f4: 115,\n    f5: 116,\n    f6: 117,\n    f7: 118,\n    f8: 119,\n    f9: 120,\n    f10: 121,\n    f11: 122,\n    f12: 123,\n    f13: 124,\n    f14: 125,\n    f15: 126,\n    f16: 127,\n    f17: 128,\n    f18: 129,\n    f19: 130,\n    f20: 131\n};\nfunction isHotkey(hotkey, event) {\n    return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n    const parsedHotkey = {\n        altKey: !1,\n        ctrlKey: !1,\n        metaKey: !1,\n        shiftKey: !1\n    }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n    for (const rawHotkeySegment of hotkeySegments){\n        const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code = keyCodes[keyName];\n        if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code === void 0) throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n        (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n    }\n    return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n    return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n    const keyName = toKeyName(name);\n    return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n    const keyName = name.toLowerCase();\n    return aliases[keyName] ?? keyName;\n}\nfunction defineBehavior(behavior) {\n    return behavior;\n}\nconst arrowDownOnLonelyBlockObject = {\n    on: \"key.down\",\n    guard: ({ context, event })=>{\n        const isArrowDown = isHotkey(\"ArrowDown\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlockObject)({\n            context\n        }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getNextBlock)({\n            context\n        });\n        return isArrowDown && focusBlockObject && !nextBlock;\n    },\n    actions: [\n        ()=>[\n                {\n                    type: \"insert.text block\",\n                    placement: \"after\"\n                }\n            ]\n    ]\n}, arrowUpOnLonelyBlockObject = {\n    on: \"key.down\",\n    guard: ({ context, event })=>{\n        const isArrowUp = isHotkey(\"ArrowUp\", event.keyboardEvent), focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlockObject)({\n            context\n        }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousBlock)({\n            context\n        });\n        return isArrowUp && focusBlockObject && !previousBlock;\n    },\n    actions: [\n        ()=>[\n                {\n                    type: \"insert.text block\",\n                    placement: \"before\"\n                },\n                {\n                    type: \"select.previous block\"\n                }\n            ]\n    ]\n}, breakingBlockObject = {\n    on: \"insert.break\",\n    guard: ({ context })=>{\n        const focusBlockObject = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlockObject)({\n            context\n        });\n        return (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n            context\n        }) && focusBlockObject !== void 0;\n    },\n    actions: [\n        ()=>[\n                {\n                    type: \"insert.text block\",\n                    placement: \"after\"\n                }\n            ]\n    ]\n}, deletingEmptyTextBlockAfterBlockObject = {\n    on: \"delete.backward\",\n    guard: ({ context })=>{\n        const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n            context\n        }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n            context\n        }), previousBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousBlock)({\n            context\n        });\n        return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : isEmptyTextBlock(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(previousBlock.node) ? {\n            focusTextBlock,\n            previousBlock\n        } : !1;\n    },\n    actions: [\n        (_, { focusTextBlock, previousBlock })=>[\n                {\n                    type: \"delete.block\",\n                    blockPath: focusTextBlock.path\n                },\n                {\n                    type: \"select\",\n                    selection: {\n                        anchor: {\n                            path: previousBlock.path,\n                            offset: 0\n                        },\n                        focus: {\n                            path: previousBlock.path,\n                            offset: 0\n                        }\n                    }\n                }\n            ]\n    ]\n}, deletingEmptyTextBlockBeforeBlockObject = {\n    on: \"delete.forward\",\n    guard: ({ context })=>{\n        const focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n            context\n        }), selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n            context\n        }), nextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getNextBlock)({\n            context\n        });\n        return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : isEmptyTextBlock(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(nextBlock.node) ? {\n            focusTextBlock,\n            nextBlock\n        } : !1;\n    },\n    actions: [\n        (_, { focusTextBlock, nextBlock })=>[\n                {\n                    type: \"delete.block\",\n                    blockPath: focusTextBlock.path\n                },\n                {\n                    type: \"select\",\n                    selection: {\n                        anchor: {\n                            path: nextBlock.path,\n                            offset: 0\n                        },\n                        focus: {\n                            path: nextBlock.path,\n                            offset: 0\n                        }\n                    }\n                }\n            ]\n    ]\n}, coreBlockObjectBehaviors = {\n    arrowDownOnLonelyBlockObject,\n    arrowUpOnLonelyBlockObject,\n    breakingBlockObject,\n    deletingEmptyTextBlockAfterBlockObject,\n    deletingEmptyTextBlockBeforeBlockObject\n}, decoratorAdd = {\n    on: \"decorator.add\",\n    actions: [\n        ({ event })=>[\n                event,\n                {\n                    type: \"reselect\"\n                }\n            ]\n    ]\n}, decoratorRemove = {\n    on: \"decorator.remove\",\n    guard: ({ event })=>({\n            decorator: event.decorator\n        }),\n    actions: [\n        ({ event })=>[\n                event,\n                {\n                    type: \"reselect\"\n                }\n            ]\n    ]\n}, decoratorToggle = {\n    on: \"decorator.toggle\",\n    guard: ({ event })=>({\n            decorator: event.decorator\n        }),\n    actions: [\n        ({ event })=>[\n                event,\n                {\n                    type: \"reselect\"\n                }\n            ]\n    ]\n}, coreDecoratorBehaviors = {\n    decoratorAdd,\n    decoratorRemove,\n    decoratorToggle\n}, MAX_LIST_LEVEL = 10, clearListOnBackspace = {\n    on: \"delete.backward\",\n    guard: ({ context })=>{\n        const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n            context\n        }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n            context\n        }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n            context\n        });\n        return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {\n            focusTextBlock\n        } : !1;\n    },\n    actions: [\n        (_, { focusTextBlock })=>[\n                {\n                    type: \"text block.unset\",\n                    props: [\n                        \"listItem\",\n                        \"level\"\n                    ],\n                    at: focusTextBlock.path\n                }\n            ]\n    ]\n}, unindentListOnBackspace = {\n    on: \"delete.backward\",\n    guard: ({ context })=>{\n        const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n            context\n        }), focusTextBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n            context\n        }), focusSpan = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)({\n            context\n        });\n        return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n            focusTextBlock,\n            level: focusTextBlock.node.level - 1\n        } : !1;\n    },\n    actions: [\n        (_, { focusTextBlock, level })=>[\n                {\n                    type: \"text block.set\",\n                    level,\n                    at: focusTextBlock.path\n                }\n            ]\n    ]\n}, clearListOnEnter = {\n    on: \"insert.break\",\n    guard: ({ context })=>{\n        const selectionCollapsed = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n            context\n        }), focusListBlock = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getFocusListBlock)({\n            context\n        });\n        return !selectionCollapsed || !focusListBlock || !isEmptyTextBlock(focusListBlock.node) ? !1 : {\n            focusListBlock\n        };\n    },\n    actions: [\n        (_, { focusListBlock })=>[\n                {\n                    type: \"text block.unset\",\n                    props: [\n                        \"listItem\",\n                        \"level\"\n                    ],\n                    at: focusListBlock.path\n                }\n            ]\n    ]\n}, indentListOnTab = {\n    on: \"key.down\",\n    guard: ({ context, event })=>{\n        if (!isHotkey(\"Tab\", event.keyboardEvent)) return !1;\n        const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n            context\n        }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block)=>guards.isListBlock(block.node) ? [\n                {\n                    node: block.node,\n                    path: block.path\n                }\n            ] : []);\n        return selectedListBlocks.length === selectedBlocks.length ? {\n            selectedListBlocks\n        } : !1;\n    },\n    actions: [\n        (_, { selectedListBlocks })=>selectedListBlocks.map((selectedListBlock)=>({\n                    type: \"text block.set\",\n                    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1)),\n                    at: selectedListBlock.path\n                }))\n    ]\n}, unindentListOnShiftTab = {\n    on: \"key.down\",\n    guard: ({ context, event })=>{\n        if (!isHotkey(\"Shift+Tab\", event.keyboardEvent)) return !1;\n        const selectedBlocks = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)({\n            context\n        }), guards = (0,_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_1__.createGuards)(context), selectedListBlocks = selectedBlocks.flatMap((block)=>guards.isListBlock(block.node) ? [\n                {\n                    node: block.node,\n                    path: block.path\n                }\n            ] : []);\n        return selectedListBlocks.length === selectedBlocks.length ? {\n            selectedListBlocks\n        } : !1;\n    },\n    actions: [\n        (_, { selectedListBlocks })=>selectedListBlocks.map((selectedListBlock)=>({\n                    type: \"text block.set\",\n                    level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1)),\n                    at: selectedListBlock.path\n                }))\n    ]\n}, coreListBehaviors = {\n    clearListOnBackspace,\n    unindentListOnBackspace,\n    clearListOnEnter,\n    indentListOnTab,\n    unindentListOnShiftTab\n}, softReturn = {\n    on: \"insert.soft break\",\n    actions: [\n        ()=>[\n                {\n                    type: \"insert.text\",\n                    text: `\n`\n                }\n            ]\n    ]\n}, coreBehaviors = [\n    softReturn,\n    coreDecoratorBehaviors.decoratorAdd,\n    coreDecoratorBehaviors.decoratorRemove,\n    coreDecoratorBehaviors.decoratorToggle,\n    coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n    coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n    coreBlockObjectBehaviors.breakingBlockObject,\n    coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n    coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n    coreListBehaviors.clearListOnBackspace,\n    coreListBehaviors.unindentListOnBackspace,\n    coreListBehaviors.clearListOnEnter,\n    coreListBehaviors.indentListOnTab,\n    coreListBehaviors.unindentListOnShiftTab\n], coreBehavior = {\n    softReturn,\n    decorators: coreDecoratorBehaviors,\n    blockObjects: coreBlockObjectBehaviors,\n    lists: coreListBehaviors\n};\n //# sourceMappingURL=behavior.core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGuards: () => (/* binding */ createGuards),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction createGuards({ schema }) {\n    function isListBlock(block) {\n        return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListBlock)(block) && block._type === schema.block.name;\n    }\n    function isTextBlock(block) {\n        return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._type === schema.block.name;\n    }\n    return {\n        isListBlock,\n        isTextBlock\n    };\n}\nconst getFocusBlock = ({ context })=>{\n    const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block)=>block._key === key) : void 0;\n    return node && key ? {\n        node,\n        path: [\n            {\n                _key: key\n            }\n        ]\n    } : void 0;\n}, getFocusListBlock = ({ context })=>{\n    const guards = createGuards(context), focusBlock = getFocusBlock({\n        context\n    });\n    return focusBlock && guards.isListBlock(focusBlock.node) ? {\n        node: focusBlock.node,\n        path: focusBlock.path\n    } : void 0;\n}, getFocusTextBlock = ({ context })=>{\n    const focusBlock = getFocusBlock({\n        context\n    });\n    return focusBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n        node: focusBlock.node,\n        path: focusBlock.path\n    } : void 0;\n}, getFocusBlockObject = ({ context })=>{\n    const focusBlock = getFocusBlock({\n        context\n    });\n    return focusBlock && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n        node: focusBlock.node,\n        path: focusBlock.path\n    } : void 0;\n}, getFocusChild = ({ context })=>{\n    const focusBlock = getFocusTextBlock({\n        context\n    });\n    if (!focusBlock) return;\n    const key = context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[2]) ? context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span)=>span._key === key) : void 0;\n    return node && key ? {\n        node,\n        path: [\n            ...focusBlock.path,\n            \"children\",\n            {\n                _key: key\n            }\n        ]\n    } : void 0;\n}, getFocusSpan = ({ context })=>{\n    const focusChild = getFocusChild({\n        context\n    });\n    return focusChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(focusChild.node) ? {\n        node: focusChild.node,\n        path: focusChild.path\n    } : void 0;\n}, getFirstBlock = ({ context })=>{\n    const node = context.value[0];\n    return node ? {\n        node,\n        path: [\n            {\n                _key: node._key\n            }\n        ]\n    } : void 0;\n}, getLastBlock = ({ context })=>{\n    const node = context.value[context.value.length - 1] ? context.value[context.value.length - 1] : void 0;\n    return node ? {\n        node,\n        path: [\n            {\n                _key: node._key\n            }\n        ]\n    } : void 0;\n}, getSelectedBlocks = ({ context })=>{\n    if (!context.selection) return [];\n    const selectedBlocks = [], startKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, endKey = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0;\n    if (!startKey || !endKey) return selectedBlocks;\n    for (const block of context.value){\n        if (block._key === startKey) {\n            if (selectedBlocks.push({\n                node: block,\n                path: [\n                    {\n                        _key: block._key\n                    }\n                ]\n            }), startKey === endKey) break;\n            continue;\n        }\n        if (block._key === endKey) {\n            selectedBlocks.push({\n                node: block,\n                path: [\n                    {\n                        _key: block._key\n                    }\n                ]\n            });\n            break;\n        }\n        selectedBlocks.length > 0 && selectedBlocks.push({\n            node: block,\n            path: [\n                {\n                    _key: block._key\n                }\n            ]\n        });\n    }\n    return selectedBlocks;\n}, getSelectionStartBlock = ({ context })=>{\n    if (!context.selection) return;\n    const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0, node = key ? context.value.find((block)=>block._key === key) : void 0;\n    return node && key ? {\n        node,\n        path: [\n            {\n                _key: key\n            }\n        ]\n    } : void 0;\n}, getSelectionEndBlock = ({ context })=>{\n    if (!context.selection) return;\n    const key = context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.anchor.path[0]) ? context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(context.selection.focus.path[0]) ? context.selection.focus.path[0]._key : void 0, node = key ? context.value.find((block)=>block._key === key) : void 0;\n    return node && key ? {\n        node,\n        path: [\n            {\n                _key: key\n            }\n        ]\n    } : void 0;\n}, getPreviousBlock = ({ context })=>{\n    let previousBlock;\n    const selectionStartBlock = getSelectionStartBlock({\n        context\n    });\n    if (!selectionStartBlock) return;\n    let foundSelectionStartBlock = !1;\n    for (const block of context.value){\n        if (block._key === selectionStartBlock.node._key) {\n            foundSelectionStartBlock = !0;\n            break;\n        }\n        previousBlock = {\n            node: block,\n            path: [\n                {\n                    _key: block._key\n                }\n            ]\n        };\n    }\n    if (foundSelectionStartBlock && previousBlock) return previousBlock;\n}, getNextBlock = ({ context })=>{\n    let nextBlock;\n    const selectionEndBlock = getSelectionEndBlock({\n        context\n    });\n    if (!selectionEndBlock) return;\n    let foundSelectionEndBlock = !1;\n    for (const block of context.value){\n        if (block._key === selectionEndBlock.node._key) {\n            foundSelectionEndBlock = !0;\n            continue;\n        }\n        if (foundSelectionEndBlock) {\n            nextBlock = {\n                node: block,\n                path: [\n                    {\n                        _key: block._key\n                    }\n                ]\n            };\n            break;\n        }\n    }\n    if (foundSelectionEndBlock && nextBlock) return nextBlock;\n}, isSelectionCollapsed = ({ context })=>JSON.stringify(context.selection?.anchor.path) === JSON.stringify(context.selection?.focus.path) && context.selection?.anchor.offset === context.selection?.focus.offset;\n //# sourceMappingURL=selector.is-selection-collapsed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1IO0FBQ25ILFNBQVNJLGFBQWEsRUFDcEJDLE1BQU0sRUFDUDtJQUNDLFNBQVNDLFlBQVlDLEtBQUs7UUFDeEIsT0FBT1Asc0VBQXVCQSxDQUFDTyxVQUFVQSxNQUFNQyxLQUFLLEtBQUtILE9BQU9FLEtBQUssQ0FBQ0UsSUFBSTtJQUM1RTtJQUNBLFNBQVNDLFlBQVlILEtBQUs7UUFDeEIsT0FBT04sc0VBQXVCQSxDQUFDTSxVQUFVQSxNQUFNQyxLQUFLLEtBQUtILE9BQU9FLEtBQUssQ0FBQ0UsSUFBSTtJQUM1RTtJQUNBLE9BQU87UUFDTEg7UUFDQUk7SUFDRjtBQUNGO0FBQ0EsTUFBTUMsZ0JBQWdCLENBQUMsRUFDckJDLE9BQU8sRUFDUjtJQUNDLE1BQU1DLE1BQU1ELFFBQVFFLFNBQVMsSUFBSVosMkRBQVlBLENBQUNVLFFBQVFFLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsRUFBRSxJQUFJSixRQUFRRSxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLEVBQUUsQ0FBQ0MsSUFBSSxHQUFHLEtBQUssR0FBR0MsT0FBT0wsTUFBTUQsUUFBUU8sS0FBSyxDQUFDQyxJQUFJLENBQUMsQ0FBQ2IsUUFBVUEsTUFBTVUsSUFBSSxLQUFLSixPQUFPLEtBQUs7SUFDdE0sT0FBT0ssUUFBUUwsTUFBTTtRQUNuQks7UUFDQUYsTUFBTTtZQUFDO2dCQUNMQyxNQUFNSjtZQUNSO1NBQUU7SUFDSixJQUFJLEtBQUs7QUFDWCxHQUFHUSxvQkFBb0IsQ0FBQyxFQUN0QlQsT0FBTyxFQUNSO0lBQ0MsTUFBTVUsU0FBU2xCLGFBQWFRLFVBQVVXLGFBQWFaLGNBQWM7UUFDL0RDO0lBQ0Y7SUFDQSxPQUFPVyxjQUFjRCxPQUFPaEIsV0FBVyxDQUFDaUIsV0FBV0wsSUFBSSxJQUFJO1FBQ3pEQSxNQUFNSyxXQUFXTCxJQUFJO1FBQ3JCRixNQUFNTyxXQUFXUCxJQUFJO0lBQ3ZCLElBQUksS0FBSztBQUNYLEdBQUdRLG9CQUFvQixDQUFDLEVBQ3RCWixPQUFPLEVBQ1I7SUFDQyxNQUFNVyxhQUFhWixjQUFjO1FBQy9CQztJQUNGO0lBQ0EsT0FBT1csY0FBY3RCLHNFQUF1QkEsQ0FBQ3NCLFdBQVdMLElBQUksSUFBSTtRQUM5REEsTUFBTUssV0FBV0wsSUFBSTtRQUNyQkYsTUFBTU8sV0FBV1AsSUFBSTtJQUN2QixJQUFJLEtBQUs7QUFDWCxHQUFHUyxzQkFBc0IsQ0FBQyxFQUN4QmIsT0FBTyxFQUNSO0lBQ0MsTUFBTVcsYUFBYVosY0FBYztRQUMvQkM7SUFDRjtJQUNBLE9BQU9XLGNBQWMsQ0FBQ3RCLHNFQUF1QkEsQ0FBQ3NCLFdBQVdMLElBQUksSUFBSTtRQUMvREEsTUFBTUssV0FBV0wsSUFBSTtRQUNyQkYsTUFBTU8sV0FBV1AsSUFBSTtJQUN2QixJQUFJLEtBQUs7QUFDWCxHQUFHVSxnQkFBZ0IsQ0FBQyxFQUNsQmQsT0FBTyxFQUNSO0lBQ0MsTUFBTVcsYUFBYUMsa0JBQWtCO1FBQ25DWjtJQUNGO0lBQ0EsSUFBSSxDQUFDVyxZQUNIO0lBQ0YsTUFBTVYsTUFBTUQsUUFBUUUsU0FBUyxJQUFJWiwyREFBWUEsQ0FBQ1UsUUFBUUUsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQyxFQUFFLElBQUlKLFFBQVFFLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxHQUFHQyxPQUFPTCxNQUFNVSxXQUFXTCxJQUFJLENBQUNTLFFBQVEsQ0FBQ1AsSUFBSSxDQUFDLENBQUNRLE9BQVNBLEtBQUtYLElBQUksS0FBS0osT0FBTyxLQUFLO0lBQy9NLE9BQU9LLFFBQVFMLE1BQU07UUFDbkJLO1FBQ0FGLE1BQU07ZUFBSU8sV0FBV1AsSUFBSTtZQUFFO1lBQVk7Z0JBQ3JDQyxNQUFNSjtZQUNSO1NBQUU7SUFDSixJQUFJLEtBQUs7QUFDWCxHQUFHZ0IsZUFBZSxDQUFDLEVBQ2pCakIsT0FBTyxFQUNSO0lBQ0MsTUFBTWtCLGFBQWFKLGNBQWM7UUFDL0JkO0lBQ0Y7SUFDQSxPQUFPa0IsY0FBYzNCLGlFQUFrQkEsQ0FBQzJCLFdBQVdaLElBQUksSUFBSTtRQUN6REEsTUFBTVksV0FBV1osSUFBSTtRQUNyQkYsTUFBTWMsV0FBV2QsSUFBSTtJQUN2QixJQUFJLEtBQUs7QUFDWCxHQUFHZSxnQkFBZ0IsQ0FBQyxFQUNsQm5CLE9BQU8sRUFDUjtJQUNDLE1BQU1NLE9BQU9OLFFBQVFPLEtBQUssQ0FBQyxFQUFFO0lBQzdCLE9BQU9ELE9BQU87UUFDWkE7UUFDQUYsTUFBTTtZQUFDO2dCQUNMQyxNQUFNQyxLQUFLRCxJQUFJO1lBQ2pCO1NBQUU7SUFDSixJQUFJLEtBQUs7QUFDWCxHQUFHZSxlQUFlLENBQUMsRUFDakJwQixPQUFPLEVBQ1I7SUFDQyxNQUFNTSxPQUFPTixRQUFRTyxLQUFLLENBQUNQLFFBQVFPLEtBQUssQ0FBQ2MsTUFBTSxHQUFHLEVBQUUsR0FBR3JCLFFBQVFPLEtBQUssQ0FBQ1AsUUFBUU8sS0FBSyxDQUFDYyxNQUFNLEdBQUcsRUFBRSxHQUFHLEtBQUs7SUFDdEcsT0FBT2YsT0FBTztRQUNaQTtRQUNBRixNQUFNO1lBQUM7Z0JBQ0xDLE1BQU1DLEtBQUtELElBQUk7WUFDakI7U0FBRTtJQUNKLElBQUksS0FBSztBQUNYLEdBQUdpQixvQkFBb0IsQ0FBQyxFQUN0QnRCLE9BQU8sRUFDUjtJQUNDLElBQUksQ0FBQ0EsUUFBUUUsU0FBUyxFQUNwQixPQUFPLEVBQUU7SUFDWCxNQUFNcUIsaUJBQWlCLEVBQUUsRUFBRUMsV0FBV3hCLFFBQVFFLFNBQVMsQ0FBQ3VCLFFBQVEsR0FBR25DLDJEQUFZQSxDQUFDVSxRQUFRRSxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLEVBQUUsSUFBSUosUUFBUUUsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQyxFQUFFLENBQUNDLElBQUksR0FBRyxLQUFLLElBQUlmLDJEQUFZQSxDQUFDVSxRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxJQUFJSixRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxHQUFHc0IsU0FBUzNCLFFBQVFFLFNBQVMsQ0FBQ3VCLFFBQVEsR0FBR25DLDJEQUFZQSxDQUFDVSxRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxJQUFJSixRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxJQUFJZiwyREFBWUEsQ0FBQ1UsUUFBUUUsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQyxFQUFFLElBQUlKLFFBQVFFLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUcsS0FBSztJQUN4ZSxJQUFJLENBQUNtQixZQUFZLENBQUNHLFFBQ2hCLE9BQU9KO0lBQ1QsS0FBSyxNQUFNNUIsU0FBU0ssUUFBUU8sS0FBSyxDQUFFO1FBQ2pDLElBQUlaLE1BQU1VLElBQUksS0FBS21CLFVBQVU7WUFDM0IsSUFBSUQsZUFBZUssSUFBSSxDQUFDO2dCQUN0QnRCLE1BQU1YO2dCQUNOUyxNQUFNO29CQUFDO3dCQUNMQyxNQUFNVixNQUFNVSxJQUFJO29CQUNsQjtpQkFBRTtZQUNKLElBQUltQixhQUFhRyxRQUNmO1lBQ0Y7UUFDRjtRQUNBLElBQUloQyxNQUFNVSxJQUFJLEtBQUtzQixRQUFRO1lBQ3pCSixlQUFlSyxJQUFJLENBQUM7Z0JBQ2xCdEIsTUFBTVg7Z0JBQ05TLE1BQU07b0JBQUM7d0JBQ0xDLE1BQU1WLE1BQU1VLElBQUk7b0JBQ2xCO2lCQUFFO1lBQ0o7WUFDQTtRQUNGO1FBQ0FrQixlQUFlRixNQUFNLEdBQUcsS0FBS0UsZUFBZUssSUFBSSxDQUFDO1lBQy9DdEIsTUFBTVg7WUFDTlMsTUFBTTtnQkFBQztvQkFDTEMsTUFBTVYsTUFBTVUsSUFBSTtnQkFDbEI7YUFBRTtRQUNKO0lBQ0Y7SUFDQSxPQUFPa0I7QUFDVCxHQUFHTSx5QkFBeUIsQ0FBQyxFQUMzQjdCLE9BQU8sRUFDUjtJQUNDLElBQUksQ0FBQ0EsUUFBUUUsU0FBUyxFQUNwQjtJQUNGLE1BQU1ELE1BQU1ELFFBQVFFLFNBQVMsQ0FBQ3VCLFFBQVEsR0FBR25DLDJEQUFZQSxDQUFDVSxRQUFRRSxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLEVBQUUsSUFBSUosUUFBUUUsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQyxFQUFFLENBQUNDLElBQUksR0FBRyxLQUFLLElBQUlmLDJEQUFZQSxDQUFDVSxRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxJQUFJSixRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxHQUFHQyxPQUFPTCxNQUFNRCxRQUFRTyxLQUFLLENBQUNDLElBQUksQ0FBQyxDQUFDYixRQUFVQSxNQUFNVSxJQUFJLEtBQUtKLE9BQU8sS0FBSztJQUNoVCxPQUFPSyxRQUFRTCxNQUFNO1FBQ25CSztRQUNBRixNQUFNO1lBQUM7Z0JBQ0xDLE1BQU1KO1lBQ1I7U0FBRTtJQUNKLElBQUksS0FBSztBQUNYLEdBQUc2Qix1QkFBdUIsQ0FBQyxFQUN6QjlCLE9BQU8sRUFDUjtJQUNDLElBQUksQ0FBQ0EsUUFBUUUsU0FBUyxFQUNwQjtJQUNGLE1BQU1ELE1BQU1ELFFBQVFFLFNBQVMsQ0FBQ3VCLFFBQVEsR0FBR25DLDJEQUFZQSxDQUFDVSxRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxJQUFJSixRQUFRRSxTQUFTLENBQUN3QixNQUFNLENBQUN0QixJQUFJLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxJQUFJZiwyREFBWUEsQ0FBQ1UsUUFBUUUsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQyxFQUFFLElBQUlKLFFBQVFFLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUMsRUFBRSxDQUFDQyxJQUFJLEdBQUcsS0FBSyxHQUFHQyxPQUFPTCxNQUFNRCxRQUFRTyxLQUFLLENBQUNDLElBQUksQ0FBQyxDQUFDYixRQUFVQSxNQUFNVSxJQUFJLEtBQUtKLE9BQU8sS0FBSztJQUNoVCxPQUFPSyxRQUFRTCxNQUFNO1FBQ25CSztRQUNBRixNQUFNO1lBQUM7Z0JBQ0xDLE1BQU1KO1lBQ1I7U0FBRTtJQUNKLElBQUksS0FBSztBQUNYLEdBQUc4QixtQkFBbUIsQ0FBQyxFQUNyQi9CLE9BQU8sRUFDUjtJQUNDLElBQUlnQztJQUNKLE1BQU1DLHNCQUFzQkosdUJBQXVCO1FBQ2pEN0I7SUFDRjtJQUNBLElBQUksQ0FBQ2lDLHFCQUNIO0lBQ0YsSUFBSUMsMkJBQTJCLENBQUM7SUFDaEMsS0FBSyxNQUFNdkMsU0FBU0ssUUFBUU8sS0FBSyxDQUFFO1FBQ2pDLElBQUlaLE1BQU1VLElBQUksS0FBSzRCLG9CQUFvQjNCLElBQUksQ0FBQ0QsSUFBSSxFQUFFO1lBQ2hENkIsMkJBQTJCLENBQUM7WUFDNUI7UUFDRjtRQUNBRixnQkFBZ0I7WUFDZDFCLE1BQU1YO1lBQ05TLE1BQU07Z0JBQUM7b0JBQ0xDLE1BQU1WLE1BQU1VLElBQUk7Z0JBQ2xCO2FBQUU7UUFDSjtJQUNGO0lBQ0EsSUFBSTZCLDRCQUE0QkYsZUFDOUIsT0FBT0E7QUFDWCxHQUFHRyxlQUFlLENBQUMsRUFDakJuQyxPQUFPLEVBQ1I7SUFDQyxJQUFJb0M7SUFDSixNQUFNQyxvQkFBb0JQLHFCQUFxQjtRQUM3QzlCO0lBQ0Y7SUFDQSxJQUFJLENBQUNxQyxtQkFDSDtJQUNGLElBQUlDLHlCQUF5QixDQUFDO0lBQzlCLEtBQUssTUFBTTNDLFNBQVNLLFFBQVFPLEtBQUssQ0FBRTtRQUNqQyxJQUFJWixNQUFNVSxJQUFJLEtBQUtnQyxrQkFBa0IvQixJQUFJLENBQUNELElBQUksRUFBRTtZQUM5Q2lDLHlCQUF5QixDQUFDO1lBQzFCO1FBQ0Y7UUFDQSxJQUFJQSx3QkFBd0I7WUFDMUJGLFlBQVk7Z0JBQ1Y5QixNQUFNWDtnQkFDTlMsTUFBTTtvQkFBQzt3QkFDTEMsTUFBTVYsTUFBTVUsSUFBSTtvQkFDbEI7aUJBQUU7WUFDSjtZQUNBO1FBQ0Y7SUFDRjtJQUNBLElBQUlpQywwQkFBMEJGLFdBQzVCLE9BQU9BO0FBQ1gsR0FBR0csdUJBQXVCLENBQUMsRUFDekJ2QyxPQUFPLEVBQ1IsR0FBS3dDLEtBQUtDLFNBQVMsQ0FBQ3pDLFFBQVFFLFNBQVMsRUFBRXdCLE9BQU90QixVQUFVb0MsS0FBS0MsU0FBUyxDQUFDekMsUUFBUUUsU0FBUyxFQUFFQyxNQUFNQyxTQUFTSixRQUFRRSxTQUFTLEVBQUV3QixPQUFPZ0IsV0FBVzFDLFFBQVFFLFNBQVMsRUFBRUMsTUFBTXVDO0FBaUJ0SyxDQUNGLDJEQUEyRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXBsZS1ibG9nLXN0eWxlZC10ZW1wbGF0ZS1mb3ItaGVhZGxlc3MtY21zLy4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3NlbGVjdG9yLmlzLXNlbGVjdGlvbi1jb2xsYXBzZWQuanM/MzQ1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BvcnRhYmxlVGV4dExpc3RCbG9jaywgaXNQb3J0YWJsZVRleHRUZXh0QmxvY2ssIGlzS2V5U2VnbWVudCwgaXNQb3J0YWJsZVRleHRTcGFuIH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmZ1bmN0aW9uIGNyZWF0ZUd1YXJkcyh7XG4gIHNjaGVtYVxufSkge1xuICBmdW5jdGlvbiBpc0xpc3RCbG9jayhibG9jaykge1xuICAgIHJldHVybiBpc1BvcnRhYmxlVGV4dExpc3RCbG9jayhibG9jaykgJiYgYmxvY2suX3R5cGUgPT09IHNjaGVtYS5ibG9jay5uYW1lO1xuICB9XG4gIGZ1bmN0aW9uIGlzVGV4dEJsb2NrKGJsb2NrKSB7XG4gICAgcmV0dXJuIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSAmJiBibG9jay5fdHlwZSA9PT0gc2NoZW1hLmJsb2NrLm5hbWU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpc0xpc3RCbG9jayxcbiAgICBpc1RleHRCbG9ja1xuICB9O1xufVxuY29uc3QgZ2V0Rm9jdXNCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3Qga2V5ID0gY29udGV4dC5zZWxlY3Rpb24gJiYgaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXS5fa2V5IDogdm9pZCAwLCBub2RlID0ga2V5ID8gY29udGV4dC52YWx1ZS5maW5kKChibG9jaykgPT4gYmxvY2suX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGtleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c0xpc3RCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3QgZ3VhcmRzID0gY3JlYXRlR3VhcmRzKGNvbnRleHQpLCBmb2N1c0Jsb2NrID0gZ2V0Rm9jdXNCbG9jayh7XG4gICAgY29udGV4dFxuICB9KTtcbiAgcmV0dXJuIGZvY3VzQmxvY2sgJiYgZ3VhcmRzLmlzTGlzdEJsb2NrKGZvY3VzQmxvY2subm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNCbG9jay5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQmxvY2sucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNUZXh0QmxvY2sgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGNvbnN0IGZvY3VzQmxvY2sgPSBnZXRGb2N1c0Jsb2NrKHtcbiAgICBjb250ZXh0XG4gIH0pO1xuICByZXR1cm4gZm9jdXNCbG9jayAmJiBpc1BvcnRhYmxlVGV4dFRleHRCbG9jayhmb2N1c0Jsb2NrLm5vZGUpID8ge1xuICAgIG5vZGU6IGZvY3VzQmxvY2subm9kZSxcbiAgICBwYXRoOiBmb2N1c0Jsb2NrLnBhdGhcbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZvY3VzQmxvY2tPYmplY3QgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGNvbnN0IGZvY3VzQmxvY2sgPSBnZXRGb2N1c0Jsb2NrKHtcbiAgICBjb250ZXh0XG4gIH0pO1xuICByZXR1cm4gZm9jdXNCbG9jayAmJiAhaXNQb3J0YWJsZVRleHRUZXh0QmxvY2soZm9jdXNCbG9jay5ub2RlKSA/IHtcbiAgICBub2RlOiBmb2N1c0Jsb2NrLm5vZGUsXG4gICAgcGF0aDogZm9jdXNCbG9jay5wYXRoXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c0NoaWxkID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBmb2N1c0Jsb2NrID0gZ2V0Rm9jdXNUZXh0QmxvY2soe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIGlmICghZm9jdXNCbG9jaylcbiAgICByZXR1cm47XG4gIGNvbnN0IGtleSA9IGNvbnRleHQuc2VsZWN0aW9uICYmIGlzS2V5U2VnbWVudChjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzJdKSA/IGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMl0uX2tleSA6IHZvaWQgMCwgbm9kZSA9IGtleSA/IGZvY3VzQmxvY2subm9kZS5jaGlsZHJlbi5maW5kKChzcGFuKSA9PiBzcGFuLl9rZXkgPT09IGtleSkgOiB2b2lkIDA7XG4gIHJldHVybiBub2RlICYmIGtleSA/IHtcbiAgICBub2RlLFxuICAgIHBhdGg6IFsuLi5mb2N1c0Jsb2NrLnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgX2tleToga2V5XG4gICAgfV1cbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZvY3VzU3BhbiA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgY29uc3QgZm9jdXNDaGlsZCA9IGdldEZvY3VzQ2hpbGQoe1xuICAgIGNvbnRleHRcbiAgfSk7XG4gIHJldHVybiBmb2N1c0NoaWxkICYmIGlzUG9ydGFibGVUZXh0U3Bhbihmb2N1c0NoaWxkLm5vZGUpID8ge1xuICAgIG5vZGU6IGZvY3VzQ2hpbGQubm9kZSxcbiAgICBwYXRoOiBmb2N1c0NoaWxkLnBhdGhcbiAgfSA6IHZvaWQgMDtcbn0sIGdldEZpcnN0QmxvY2sgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBjb250ZXh0LnZhbHVlWzBdO1xuICByZXR1cm4gbm9kZSA/IHtcbiAgICBub2RlLFxuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBub2RlLl9rZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0TGFzdEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBjb25zdCBub2RlID0gY29udGV4dC52YWx1ZVtjb250ZXh0LnZhbHVlLmxlbmd0aCAtIDFdID8gY29udGV4dC52YWx1ZVtjb250ZXh0LnZhbHVlLmxlbmd0aCAtIDFdIDogdm9pZCAwO1xuICByZXR1cm4gbm9kZSA/IHtcbiAgICBub2RlLFxuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBub2RlLl9rZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0U2VsZWN0ZWRCbG9ja3MgPSAoe1xuICBjb250ZXh0XG59KSA9PiB7XG4gIGlmICghY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCBzZWxlY3RlZEJsb2NrcyA9IFtdLCBzdGFydEtleSA9IGNvbnRleHQuc2VsZWN0aW9uLmJhY2t3YXJkID8gaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXS5fa2V5IDogdm9pZCAwIDogaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdKSA/IGNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdLl9rZXkgOiB2b2lkIDAsIGVuZEtleSA9IGNvbnRleHQuc2VsZWN0aW9uLmJhY2t3YXJkID8gaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdKSA/IGNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdLl9rZXkgOiB2b2lkIDAgOiBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXSkgPyBjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdLl9rZXkgOiB2b2lkIDA7XG4gIGlmICghc3RhcnRLZXkgfHwgIWVuZEtleSlcbiAgICByZXR1cm4gc2VsZWN0ZWRCbG9ja3M7XG4gIGZvciAoY29uc3QgYmxvY2sgb2YgY29udGV4dC52YWx1ZSkge1xuICAgIGlmIChibG9jay5fa2V5ID09PSBzdGFydEtleSkge1xuICAgICAgaWYgKHNlbGVjdGVkQmxvY2tzLnB1c2goe1xuICAgICAgICBub2RlOiBibG9jayxcbiAgICAgICAgcGF0aDogW3tcbiAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgIH1dXG4gICAgICB9KSwgc3RhcnRLZXkgPT09IGVuZEtleSlcbiAgICAgICAgYnJlYWs7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGVuZEtleSkge1xuICAgICAgc2VsZWN0ZWRCbG9ja3MucHVzaCh7XG4gICAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgfV1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNlbGVjdGVkQmxvY2tzLmxlbmd0aCA+IDAgJiYgc2VsZWN0ZWRCbG9ja3MucHVzaCh7XG4gICAgICBub2RlOiBibG9jayxcbiAgICAgIHBhdGg6IFt7XG4gICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgIH1dXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNlbGVjdGVkQmxvY2tzO1xufSwgZ2V0U2VsZWN0aW9uU3RhcnRCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgaWYgKCFjb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm47XG4gIGNvbnN0IGtleSA9IGNvbnRleHQuc2VsZWN0aW9uLmJhY2t3YXJkID8gaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aFswXS5fa2V5IDogdm9pZCAwIDogaXNLZXlTZWdtZW50KGNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdKSA/IGNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoWzBdLl9rZXkgOiB2b2lkIDAsIG5vZGUgPSBrZXkgPyBjb250ZXh0LnZhbHVlLmZpbmQoKGJsb2NrKSA9PiBibG9jay5fa2V5ID09PSBrZXkpIDogdm9pZCAwO1xuICByZXR1cm4gbm9kZSAmJiBrZXkgPyB7XG4gICAgbm9kZSxcbiAgICBwYXRoOiBbe1xuICAgICAgX2tleToga2V5XG4gICAgfV1cbiAgfSA6IHZvaWQgMDtcbn0sIGdldFNlbGVjdGlvbkVuZEJsb2NrID0gKHtcbiAgY29udGV4dFxufSkgPT4ge1xuICBpZiAoIWNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3Qga2V5ID0gY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyBpc0tleVNlZ21lbnQoY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0pID8gY29udGV4dC5zZWxlY3Rpb24uYW5jaG9yLnBhdGhbMF0uX2tleSA6IHZvaWQgMCA6IGlzS2V5U2VnbWVudChjb250ZXh0LnNlbGVjdGlvbi5mb2N1cy5wYXRoWzBdKSA/IGNvbnRleHQuc2VsZWN0aW9uLmZvY3VzLnBhdGhbMF0uX2tleSA6IHZvaWQgMCwgbm9kZSA9IGtleSA/IGNvbnRleHQudmFsdWUuZmluZCgoYmxvY2spID0+IGJsb2NrLl9rZXkgPT09IGtleSkgOiB2b2lkIDA7XG4gIHJldHVybiBub2RlICYmIGtleSA/IHtcbiAgICBub2RlLFxuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBrZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0UHJldmlvdXNCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgbGV0IHByZXZpb3VzQmxvY2s7XG4gIGNvbnN0IHNlbGVjdGlvblN0YXJ0QmxvY2sgPSBnZXRTZWxlY3Rpb25TdGFydEJsb2NrKHtcbiAgICBjb250ZXh0XG4gIH0pO1xuICBpZiAoIXNlbGVjdGlvblN0YXJ0QmxvY2spXG4gICAgcmV0dXJuO1xuICBsZXQgZm91bmRTZWxlY3Rpb25TdGFydEJsb2NrID0gITE7XG4gIGZvciAoY29uc3QgYmxvY2sgb2YgY29udGV4dC52YWx1ZSkge1xuICAgIGlmIChibG9jay5fa2V5ID09PSBzZWxlY3Rpb25TdGFydEJsb2NrLm5vZGUuX2tleSkge1xuICAgICAgZm91bmRTZWxlY3Rpb25TdGFydEJsb2NrID0gITA7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldmlvdXNCbG9jayA9IHtcbiAgICAgIG5vZGU6IGJsb2NrLFxuICAgICAgcGF0aDogW3tcbiAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgfV1cbiAgICB9O1xuICB9XG4gIGlmIChmb3VuZFNlbGVjdGlvblN0YXJ0QmxvY2sgJiYgcHJldmlvdXNCbG9jaylcbiAgICByZXR1cm4gcHJldmlvdXNCbG9jaztcbn0sIGdldE5leHRCbG9jayA9ICh7XG4gIGNvbnRleHRcbn0pID0+IHtcbiAgbGV0IG5leHRCbG9jaztcbiAgY29uc3Qgc2VsZWN0aW9uRW5kQmxvY2sgPSBnZXRTZWxlY3Rpb25FbmRCbG9jayh7XG4gICAgY29udGV4dFxuICB9KTtcbiAgaWYgKCFzZWxlY3Rpb25FbmRCbG9jaylcbiAgICByZXR1cm47XG4gIGxldCBmb3VuZFNlbGVjdGlvbkVuZEJsb2NrID0gITE7XG4gIGZvciAoY29uc3QgYmxvY2sgb2YgY29udGV4dC52YWx1ZSkge1xuICAgIGlmIChibG9jay5fa2V5ID09PSBzZWxlY3Rpb25FbmRCbG9jay5ub2RlLl9rZXkpIHtcbiAgICAgIGZvdW5kU2VsZWN0aW9uRW5kQmxvY2sgPSAhMDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZm91bmRTZWxlY3Rpb25FbmRCbG9jaykge1xuICAgICAgbmV4dEJsb2NrID0ge1xuICAgICAgICBub2RlOiBibG9jayxcbiAgICAgICAgcGF0aDogW3tcbiAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgIH1dXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChmb3VuZFNlbGVjdGlvbkVuZEJsb2NrICYmIG5leHRCbG9jaylcbiAgICByZXR1cm4gbmV4dEJsb2NrO1xufSwgaXNTZWxlY3Rpb25Db2xsYXBzZWQgPSAoe1xuICBjb250ZXh0XG59KSA9PiBKU09OLnN0cmluZ2lmeShjb250ZXh0LnNlbGVjdGlvbj8uYW5jaG9yLnBhdGgpID09PSBKU09OLnN0cmluZ2lmeShjb250ZXh0LnNlbGVjdGlvbj8uZm9jdXMucGF0aCkgJiYgY29udGV4dC5zZWxlY3Rpb24/LmFuY2hvci5vZmZzZXQgPT09IGNvbnRleHQuc2VsZWN0aW9uPy5mb2N1cy5vZmZzZXQ7XG5leHBvcnQge1xuICBjcmVhdGVHdWFyZHMsXG4gIGdldEZpcnN0QmxvY2ssXG4gIGdldEZvY3VzQmxvY2ssXG4gIGdldEZvY3VzQmxvY2tPYmplY3QsXG4gIGdldEZvY3VzQ2hpbGQsXG4gIGdldEZvY3VzTGlzdEJsb2NrLFxuICBnZXRGb2N1c1NwYW4sXG4gIGdldEZvY3VzVGV4dEJsb2NrLFxuICBnZXRMYXN0QmxvY2ssXG4gIGdldE5leHRCbG9jayxcbiAgZ2V0UHJldmlvdXNCbG9jayxcbiAgZ2V0U2VsZWN0ZWRCbG9ja3MsXG4gIGdldFNlbGVjdGlvbkVuZEJsb2NrLFxuICBnZXRTZWxlY3Rpb25TdGFydEJsb2NrLFxuICBpc1NlbGVjdGlvbkNvbGxhcHNlZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9yLmlzLXNlbGVjdGlvbi1jb2xsYXBzZWQuanMubWFwXG4iXSwibmFtZXMiOlsiaXNQb3J0YWJsZVRleHRMaXN0QmxvY2siLCJpc1BvcnRhYmxlVGV4dFRleHRCbG9jayIsImlzS2V5U2VnbWVudCIsImlzUG9ydGFibGVUZXh0U3BhbiIsImNyZWF0ZUd1YXJkcyIsInNjaGVtYSIsImlzTGlzdEJsb2NrIiwiYmxvY2siLCJfdHlwZSIsIm5hbWUiLCJpc1RleHRCbG9jayIsImdldEZvY3VzQmxvY2siLCJjb250ZXh0Iiwia2V5Iiwic2VsZWN0aW9uIiwiZm9jdXMiLCJwYXRoIiwiX2tleSIsIm5vZGUiLCJ2YWx1ZSIsImZpbmQiLCJnZXRGb2N1c0xpc3RCbG9jayIsImd1YXJkcyIsImZvY3VzQmxvY2siLCJnZXRGb2N1c1RleHRCbG9jayIsImdldEZvY3VzQmxvY2tPYmplY3QiLCJnZXRGb2N1c0NoaWxkIiwiY2hpbGRyZW4iLCJzcGFuIiwiZ2V0Rm9jdXNTcGFuIiwiZm9jdXNDaGlsZCIsImdldEZpcnN0QmxvY2siLCJnZXRMYXN0QmxvY2siLCJsZW5ndGgiLCJnZXRTZWxlY3RlZEJsb2NrcyIsInNlbGVjdGVkQmxvY2tzIiwic3RhcnRLZXkiLCJiYWNrd2FyZCIsImFuY2hvciIsImVuZEtleSIsInB1c2giLCJnZXRTZWxlY3Rpb25TdGFydEJsb2NrIiwiZ2V0U2VsZWN0aW9uRW5kQmxvY2siLCJnZXRQcmV2aW91c0Jsb2NrIiwicHJldmlvdXNCbG9jayIsInNlbGVjdGlvblN0YXJ0QmxvY2siLCJmb3VuZFNlbGVjdGlvblN0YXJ0QmxvY2siLCJnZXROZXh0QmxvY2siLCJuZXh0QmxvY2siLCJzZWxlY3Rpb25FbmRCbG9jayIsImZvdW5kU2VsZWN0aW9uRW5kQmxvY2siLCJpc1NlbGVjdGlvbkNvbGxhcHNlZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJvZmZzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   editorMachine: () => (/* binding */ editorMachine),\n/* harmony export */   keyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/./node_modules/lodash.startcase/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/./node_modules/lodash/noop.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.esm.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var _barrel_optimize_names_Subject_rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=Subject!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/./node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/./node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/./node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./_chunks-es/selector.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-collapsed.js\");\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @sanity/block-tools */ \"(ssr)/./node_modules/@sanity/block-tools/lib/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createEditorSchema(portableTextType) {\n    if (!portableTextType) throw new Error(\"Parameter 'portabletextType' missing (required)\");\n    const blockType = portableTextType.of?.find(findBlockType);\n    if (!blockType) throw new Error(\"Block type is not defined in this schema (required)\");\n    const childrenField = blockType.fields?.find((field)=>field.name === \"children\");\n    if (!childrenField) throw new Error(\"Children field for block type found in schema (required)\");\n    const ofType = childrenField.type.of;\n    if (!ofType) throw new Error(\"Valid types for block children not found in schema (required)\");\n    const spanType = ofType.find((memberType)=>memberType.name === \"span\");\n    if (!spanType) throw new Error(\"Span type not found in schema (required)\");\n    const inlineObjectTypes = ofType.filter((memberType)=>memberType.name !== \"span\") || [], blockObjectTypes = portableTextType.of?.filter((field)=>field.name !== blockType.name) || [];\n    return {\n        styles: resolveEnabledStyles(blockType),\n        decorators: resolveEnabledDecorators(spanType),\n        lists: resolveEnabledListItems(blockType),\n        block: blockType,\n        span: spanType,\n        portableText: portableTextType,\n        inlineObjects: inlineObjectTypes,\n        blockObjects: blockObjectTypes,\n        annotations: spanType.annotations\n    };\n}\nfunction resolveEnabledStyles(blockType) {\n    const styleField = blockType.fields?.find((btField)=>btField.name === \"style\");\n    if (!styleField) throw new Error(\"A field with name 'style' is not defined in the block type (required).\");\n    const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style)=>style.value);\n    if (!textStyles || textStyles.length === 0) throw new Error(\"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\");\n    return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n    return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n    const listField = blockType.fields?.find((btField)=>btField.name === \"listItem\");\n    if (!listField) throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\");\n    const listItems = listField.type.options?.list && listField.type.options.list.filter((list)=>list.value);\n    if (!listItems) throw new Error(\"The list field need at least to be an empty array\");\n    return listItems;\n}\nfunction findBlockType(type) {\n    return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction defineSchema(definition) {\n    return definition;\n}\nfunction compileSchemaDefinition(definition) {\n    const blockObjects = definition?.blockObjects?.map((blockObject)=>(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n            type: \"object\",\n            // Very naive way to work around `SanitySchema.compile` adding default\n            // fields to objects with the name `image`\n            name: blockObject.name === \"image\" ? \"tmp-image\" : blockObject.name,\n            title: blockObject.title,\n            fields: []\n        })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject)=>(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineType)({\n            type: \"object\",\n            name: inlineObject.name,\n            title: inlineObject.title,\n            fields: []\n        })) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.defineField)({\n        type: \"array\",\n        name: \"portable-text\",\n        of: [\n            ...blockObjects.map((blockObject)=>({\n                    type: blockObject.name\n                })),\n            {\n                type: \"block\",\n                name: \"block\",\n                of: inlineObjects.map((inlineObject)=>({\n                        type: inlineObject.name\n                    })),\n                marks: {\n                    decorators: definition?.decorators?.map((decorator)=>({\n                            title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(decorator.name),\n                            value: decorator.name\n                        })) ?? [],\n                    annotations: definition?.annotations?.map((annotation)=>({\n                            name: annotation.name,\n                            type: \"object\",\n                            title: annotation.title\n                        })) ?? []\n                },\n                lists: definition?.lists?.map((list)=>({\n                        value: list.name,\n                        title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(list.name)\n                    })) ?? [],\n                styles: definition?.styles?.map((style)=>({\n                        value: style.name,\n                        title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_0__(style.name)\n                    })) ?? []\n            }\n        ]\n    }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n        types: [\n            portableTextSchema,\n            ...blockObjects,\n            ...inlineObjects\n        ]\n    }).get(\"portable-text\"), pteSchema = createEditorSchema(schema);\n    return {\n        ...pteSchema,\n        blockObjects: pteSchema.blockObjects.map((blockObject)=>blockObject.name === \"tmp-image\" ? {\n                ...blockObject,\n                name: \"image\",\n                type: {\n                    ...blockObject.type,\n                    name: \"image\"\n                }\n            } : blockObject)\n    };\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_5__(rootName);\nfunction debugWithName(name) {\n    const namespace = `${rootName}${name}`;\n    return debug__WEBPACK_IMPORTED_MODULE_5__ && debug__WEBPACK_IMPORTED_MODULE_5__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_5__(namespace) : debug__WEBPACK_IMPORTED_MODULE_5__(rootName);\n}\nfunction createKeyedPath(point, value, types) {\n    const blockPath = [\n        point.path[0]\n    ];\n    if (!value) return null;\n    const block = value[blockPath[0]];\n    if (!block) return null;\n    const keyedBlockPath = [\n        {\n            _key: block._key\n        }\n    ];\n    if (block._type !== types.block.name) return keyedBlockPath;\n    let keyedChildPath;\n    const childPath = point.path.slice(0, 2), child = Array.isArray(block.children) && block.children[childPath[1]];\n    return child && (keyedChildPath = [\n        \"children\",\n        {\n            _key: child._key\n        }\n    ]), keyedChildPath ? [\n        ...keyedBlockPath,\n        ...keyedChildPath\n    ] : keyedBlockPath;\n}\nfunction toSlatePath(path, editor) {\n    if (!editor) return [];\n    const [block, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        at: [],\n        match: (n)=>(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isKeySegment)(path[0]) && n._key === path[0]._key\n    }))[0] || [\n        void 0,\n        void 0\n    ];\n    if (!block || !slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block)) return [];\n    if (editor.isVoid(block)) return [\n        blockPath[0],\n        0\n    ];\n    const childPath = [\n        path[2]\n    ], childIndex = block.children.findIndex((child)=>lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__([\n            {\n                _key: child._key\n            }\n        ], childPath));\n    if (childIndex >= 0 && block.children[childIndex]) {\n        const child = block.children[childIndex];\n        return slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);\n    }\n    return [\n        blockPath[0],\n        0\n    ];\n}\nfunction toPortableTextRange(value, range, types) {\n    if (!range) return null;\n    let anchor = null, focus = null;\n    const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types);\n    anchorPath && range.anchor && (anchor = {\n        path: anchorPath,\n        offset: range.anchor.offset\n    });\n    const focusPath = range.focus && createKeyedPath(range.focus, value, types);\n    focusPath && range.focus && (focus = {\n        path: focusPath,\n        offset: range.focus.offset\n    });\n    const backward = !!(slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(range) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(range));\n    return anchor && focus ? {\n        anchor,\n        focus,\n        backward\n    } : null;\n}\nfunction toSlateRange(selection, editor) {\n    if (!selection || !editor) return null;\n    const anchor = {\n        path: toSlatePath(selection.anchor.path, editor),\n        offset: selection.anchor.offset\n    }, focus = {\n        path: toSlatePath(selection.focus.path, editor),\n        offset: selection.focus.offset\n    };\n    return focus.path.length === 0 || anchor.path.length === 0 ? null : anchor && focus ? {\n        anchor,\n        focus\n    } : null;\n}\nfunction moveRangeByOperation(range, operation) {\n    const anchor = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_15__.Point.transform(range.focus, operation);\n    return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_15__.Point.equals(focus, range.focus) ? range : {\n        anchor,\n        focus\n    };\n}\nfunction normalizePoint(point, value) {\n    if (!point || !value) return null;\n    const newPath = [];\n    let newOffset = point.offset || 0;\n    const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk)=>blk._key === blockKey);\n    if (block) newPath.push({\n        _key: block._key\n    });\n    else return null;\n    if (block && point.path[1] === \"children\") {\n        if (!block.children || Array.isArray(block.children) && block.children.length === 0) return null;\n        const child = Array.isArray(block.children) && block.children.find((cld)=>cld._key === childKey);\n        if (child) newPath.push(\"children\"), newPath.push({\n            _key: child._key\n        }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n        else return null;\n    }\n    return {\n        path: newPath,\n        offset: newOffset\n    };\n}\nfunction normalizeSelection(selection, value) {\n    if (!selection || !value || value.length === 0) return null;\n    let newAnchor = null, newFocus = null;\n    const { anchor, focus } = selection;\n    return anchor && value.find((blk)=>lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n            _key: blk._key\n        }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk)=>lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n            _key: blk._key\n        }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n        anchor: newAnchor,\n        focus: newFocus,\n        backward: selection.backward\n    } : null;\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n    const value = keyMap[object._key];\n    return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, { schemaTypes }, keyMap = {}) {\n    return value && Array.isArray(value) ? value.map((block)=>{\n        const { _type, _key, ...rest } = block, voidChildren = [\n            {\n                _key: VOID_CHILD_KEY,\n                _type: \"span\",\n                text: \"\",\n                marks: []\n            }\n        ];\n        if (block && block._type === schemaTypes.block.name) {\n            const textBlock = block;\n            let hasInlines = !1;\n            const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child)=>{\n                const { _type: cType, _key: cKey, ...cRest } = child;\n                return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n                    _type: cType,\n                    _key: cKey,\n                    children: voidChildren,\n                    value: cRest,\n                    __inline: !0\n                }, keyMap)) : child;\n            });\n            return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].value), keepObjectEquality({\n                _type,\n                _key,\n                ...rest,\n                children\n            }, keyMap));\n        }\n        return keepObjectEquality({\n            _type,\n            _key,\n            children: voidChildren,\n            value: rest\n        }, keyMap);\n    }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n    return value.map((block)=>{\n        const { _key, _type } = block;\n        if (!_key || !_type) throw new Error(\"Not a valid block\");\n        if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n            let hasInlines = !1;\n            const children = block.children.map((child)=>{\n                const { _type: _cType } = child;\n                if (\"value\" in child && _cType !== \"span\") {\n                    hasInlines = !0;\n                    const { value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest } = child;\n                    return keepObjectEquality({\n                        ...rest,\n                        ...v,\n                        _key: k,\n                        _type: t\n                    }, keyMap);\n                }\n                return child;\n            });\n            return hasInlines ? keepObjectEquality({\n                ...block,\n                children,\n                _key,\n                _type\n            }, keyMap) : block;\n        }\n        const blockValue = \"value\" in block && block.value;\n        return keepObjectEquality({\n            _key,\n            _type,\n            ...typeof blockValue == \"object\" ? blockValue : {}\n        }, keyMap);\n    });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n    return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].value && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), IS_DRAGGING = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_ELEMENT = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_ELEMENT_TARGET = /* @__PURE__ */ new WeakMap(), IS_DRAGGING_BLOCK_TARGET_POSITION = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), DefaultObject = (props)=>{\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n    let t0;\n    $[0] !== props.value ? (t0 = JSON.stringify(props.value, null, 2), $[0] = props.value, $[1] = t0) : t0 = $[1];\n    let t1;\n    return $[2] !== t0 ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pre\", {\n            children: t0\n        })\n    }), $[2] = t0, $[3] = t1) : t1 = $[3], t1;\n};\nDefaultObject.displayName = \"DefaultObject\";\nconst DefaultBlockObject = styled_components__WEBPACK_IMPORTED_MODULE_16__.styled.div`\n  user-select: none;\n  border: ${(props)=>props.selected ? \"1px solid blue\" : \"1px solid transparent\"};\n`;\nstyled_components__WEBPACK_IMPORTED_MODULE_16__.styled.span`\n  background: #999;\n  border: ${(props)=>props.selected ? \"1px solid blue\" : \"1px solid transparent\"};\n`;\nconst DefaultListItem = styled_components__WEBPACK_IMPORTED_MODULE_16__.styled.div`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props)=>getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props)=>getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props)=>getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props)=>getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props)=>getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`, DefaultListItemInner = styled_components__WEBPACK_IMPORTED_MODULE_16__.styled.div``;\nfunction getLeftPositionForListLevel(level) {\n    switch(Number(level)){\n        case 1:\n            return \"1.5em\";\n        case 2:\n            return \"3em\";\n        case 3:\n            return \"4.5em\";\n        case 4:\n            return \"6em\";\n        case 5:\n            return \"7.5em\";\n        case 6:\n            return \"9em\";\n        case 7:\n            return \"10.5em\";\n        case 8:\n            return \"12em\";\n        case 9:\n            return \"13.5em\";\n        case 10:\n            return \"15em\";\n        default:\n            return \"0em\";\n    }\n}\nconst bullets = [\n    \"●\",\n    \"○\",\n    \"■\"\n];\nfunction getContentForListLevelAndStyle(level, style) {\n    const normalizedLevel = (level - 1) % 3;\n    return style === \"bullet\" ? bullets[normalizedLevel] : \"*\";\n}\nfunction getCounterIncrementForListLevel(level) {\n    switch(level){\n        case 1:\n            return \"listItemNumber\";\n        case 2:\n            return \"listItemAlpha\";\n        case 3:\n            return \"listItemRoman\";\n        case 4:\n            return \"listItemNumberNext\";\n        case 5:\n            return \"listItemLetterNext\";\n        case 6:\n            return \"listItemRomanNext\";\n        case 7:\n            return \"listItemNumberNextNext\";\n        case 8:\n            return \"listItemAlphaNextNext\";\n        case 9:\n            return \"listItemRomanNextNext\";\n        default:\n            return \"listItemNumberNextNextNext\";\n    }\n}\nfunction getCounterResetForListLevel(level) {\n    switch(level){\n        case 1:\n            return \"listItemAlpha\";\n        case 2:\n            return \"listItemRoman\";\n        case 3:\n            return \"listItemNumberNext\";\n        case 4:\n            return \"listItemLetterNext\";\n        case 5:\n            return \"listItemRomanNext\";\n        case 6:\n            return \"listItemNumberNextNext\";\n        case 7:\n            return \"listItemAlphaNextNext\";\n        case 8:\n            return \"listItemRomanNextNext\";\n        case 9:\n            return \"listItemNumberNextNextNext\";\n        default:\n            return \"listItemNumberNextNextNext\";\n    }\n}\nfunction getCounterContentForListLevel(level) {\n    switch(level){\n        case 1:\n            return \"counter(listItemNumber) '. '\";\n        case 2:\n            return \"counter(listItemAlpha, lower-alpha) '. '\";\n        case 3:\n            return \"counter(listItemRoman, lower-roman) '. '\";\n        case 4:\n            return \"counter(listItemNumberNext) '. '\";\n        case 5:\n            return \"counter(listItemLetterNext, lower-alpha) '. '\";\n        case 6:\n            return \"counter(listItemRomanNext, lower-roman) '. '\";\n        case 7:\n            return \"counter(listItemNumberNextNext) '. '\";\n        case 8:\n            return \"counter(listItemAlphaNextNext, lower-alpha) '. '\";\n        case 9:\n            return \"counter(listItemRomanNextNext, lower-roman) '. '\";\n        default:\n            return \"counter(listItemNumberNextNextNext) '. '\";\n    }\n}\nconst debug$k = debugWithName(\"components:DraggableBlock\"), DraggableBlock = (t0)=>{\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(51), { children, element, readOnly, blockRef } = t0, editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSlateStatic)(), dragGhostRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(void 0), [isDragOver, setIsDragOver] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n    let t1, t2;\n    $[0] !== editor || $[1] !== element ? (t2 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, element), $[0] = editor, $[1] = element, $[2] = t2) : t2 = $[2], t1 = t2;\n    const isVoid = t1;\n    let t3, t4;\n    $[3] !== editor || $[4] !== element ? (t4 = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isInline(editor, element), $[3] = editor, $[4] = element, $[5] = t4) : t4 = $[5], t3 = t4;\n    const isInline = t3, [blockElement, setBlockElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n    let t5, t6;\n    $[6] !== blockRef || $[7] !== editor || $[8] !== element ? (t5 = ()=>setBlockElement(blockRef ? blockRef.current : slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(editor, element)), t6 = [\n        editor,\n        element,\n        blockRef\n    ], $[6] = blockRef, $[7] = editor, $[8] = element, $[9] = t5, $[10] = t6) : (t5 = $[9], t6 = $[10]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t5, t6);\n    let t7;\n    $[11] !== blockElement || $[12] !== editor || $[13] !== element ? (t7 = (event)=>{\n        const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor);\n        if (!isMyDragOver || !blockElement) return;\n        event.preventDefault(), event.dataTransfer.dropEffect = \"move\", IS_DRAGGING_ELEMENT_TARGET.set(editor, element);\n        const elementRect = blockElement.getBoundingClientRect(), offset = elementRect.top, height = elementRect.height, Y = event.pageY, loc = Math.abs(offset - Y);\n        if (element === editor.children[0] || (loc < height / 2 ? IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"top\") : IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, \"bottom\")), isMyDragOver === element) {\n            event.dataTransfer.dropEffect = \"none\";\n            return;\n        }\n        setIsDragOver(!0);\n    }, $[11] = blockElement, $[12] = editor, $[13] = element, $[14] = t7) : t7 = $[14];\n    const handleDragOver = t7;\n    let t8;\n    $[15] === Symbol.for(\"react.memo_cache_sentinel\") ? (t8 = ()=>{\n        setIsDragOver(!1);\n    }, $[15] = t8) : t8 = $[15];\n    const handleDragLeave = t8;\n    let t9;\n    $[16] !== editor || $[17] !== element ? (t9 = (event_0)=>{\n        const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor);\n        if (targetBlock) {\n            IS_DRAGGING.set(editor, !1), event_0.preventDefault(), event_0.stopPropagation(), IS_DRAGGING_ELEMENT_TARGET.delete(editor), dragGhostRef.current && (debug$k(\"Removing drag ghost\"), document.body.removeChild(dragGhostRef.current));\n            const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor);\n            IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor);\n            let targetPath = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findPath(editor, targetBlock);\n            const myPath = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findPath(editor, element), isBefore = slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(myPath, targetPath);\n            if (dragPosition === \"bottom\" && !isBefore) {\n                if (targetPath[0] >= editor.children.length - 1) {\n                    debug$k(\"target is already at the bottom, not moving\");\n                    return;\n                }\n                const originalPath = targetPath;\n                targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(targetPath), debug$k(`Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(targetPath)}`);\n            }\n            if (dragPosition === \"top\" && isBefore && targetPath[0] !== editor.children.length - 1) {\n                const originalPath_0 = targetPath;\n                targetPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(targetPath), debug$k(`Adjusting targetPath from ${JSON.stringify(originalPath_0)} to ${JSON.stringify(targetPath)}`);\n            }\n            if (slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(targetPath, myPath)) {\n                event_0.preventDefault(), debug$k(\"targetPath and myPath is the same, not moving\");\n                return;\n            }\n            debug$k(`Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(targetPath)} (${dragPosition})`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(editor, {\n                at: myPath,\n                to: targetPath\n            }), editor.onChange();\n            return;\n        }\n        debug$k(\"No target element, not doing anything\");\n    }, $[16] = editor, $[17] = element, $[18] = t9) : t9 = $[18];\n    const handleDragEnd = t9;\n    let t10;\n    $[19] !== editor || $[20] !== element ? (t10 = (event_1)=>{\n        IS_DRAGGING_BLOCK_ELEMENT.get(editor) && (debug$k(\"On drop (prevented)\", element), event_1.preventDefault(), event_1.stopPropagation(), setIsDragOver(!1));\n    }, $[19] = editor, $[20] = element, $[21] = t10) : t10 = $[21];\n    const handleDrop = t10;\n    let t11;\n    $[22] !== editor || $[23] !== element || $[24] !== isVoid ? (t11 = (event_2)=>{\n        if (!isVoid) {\n            IS_DRAGGING_BLOCK_ELEMENT.delete(editor);\n            return;\n        }\n        IS_DRAGGING.set(editor, !0), IS_DRAGGING_BLOCK_ELEMENT.set(editor, element), event_2.stopPropagation();\n        const target = event_2.target;\n        target instanceof HTMLElement && (target.style.opacity = \"1\");\n    }, $[22] = editor, $[23] = element, $[24] = isVoid, $[25] = t11) : t11 = $[25];\n    const handleDrag = t11;\n    let t12;\n    $[26] !== blockElement || $[27] !== editor || $[28] !== handleDrag || $[29] !== isInline || $[30] !== isVoid ? (t12 = (event_3)=>{\n        if (!isVoid || isInline) {\n            debug$k(\"Not dragging block\"), IS_DRAGGING_BLOCK_ELEMENT.delete(editor), IS_DRAGGING.set(editor, !1);\n            return;\n        }\n        if (debug$k(\"Drag start\"), IS_DRAGGING.set(editor, !0), event_3.dataTransfer && (event_3.dataTransfer.setData(\"application/portable-text\", \"something\"), event_3.dataTransfer.effectAllowed = \"move\"), blockElement && blockElement instanceof HTMLElement) {\n            let dragGhost = blockElement.cloneNode(!0);\n            const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n            if (customGhost && (dragGhost = customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), document.body) {\n                dragGhostRef.current = dragGhost, dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n                const rect = blockElement.getBoundingClientRect(), x = event_3.clientX - rect.left, y = event_3.clientY - rect.top;\n                dragGhost.style.width = `${rect.width}px`, dragGhost.style.height = `${rect.height}px`, event_3.dataTransfer.setDragImage(dragGhost, x, y);\n            }\n        }\n        handleDrag(event_3);\n    }, $[26] = blockElement, $[27] = editor, $[28] = handleDrag, $[29] = isInline, $[30] = isVoid, $[31] = t12) : t12 = $[31];\n    const handleDragStart = t12;\n    let t13;\n    $[32] !== editor || $[33] !== isDragOver ? (t13 = isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[32] = editor, $[33] = isDragOver, $[34] = t13) : t13 = $[34];\n    const isDraggingOverFirstBlock = t13;\n    let t14;\n    $[35] !== editor || $[36] !== isDragOver ? (t14 = isDragOver && editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor), $[35] = editor, $[36] = isDragOver, $[37] = t14) : t14 = $[37];\n    const isDraggingOverLastBlock = t14, dragPosition_0 = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor), isDraggingOverTop = isDraggingOverFirstBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"top\", isDraggingOverBottom = isDraggingOverLastBlock || isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition_0 === \"bottom\";\n    let t15, t16;\n    $[38] === Symbol.for(\"react.memo_cache_sentinel\") ? (t16 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        className: \"pt-drop-indicator\",\n        style: {\n            position: \"absolute\",\n            width: \"100%\",\n            height: 1,\n            borderBottom: \"1px solid currentColor\",\n            zIndex: 5\n        }\n    }), $[38] = t16) : t16 = $[38], t15 = t16;\n    const dropIndicator = t15;\n    if (readOnly) {\n        let t172;\n        return $[39] !== children ? (t172 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n            children\n        }), $[39] = children, $[40] = t172) : t172 = $[40], t172;\n    }\n    const t17 = isDraggingOverTop && dropIndicator, t18 = isDraggingOverBottom && dropIndicator;\n    let t19;\n    return $[41] !== children || $[42] !== handleDrag || $[43] !== handleDragEnd || $[44] !== handleDragOver || $[45] !== handleDragStart || $[46] !== handleDrop || $[47] !== isVoid || $[48] !== t17 || $[49] !== t18 ? (t19 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        draggable: isVoid,\n        onDragStart: handleDragStart,\n        onDrag: handleDrag,\n        onDragOver: handleDragOver,\n        onDragLeave: handleDragLeave,\n        onDragEnd: handleDragEnd,\n        onDrop: handleDrop,\n        children: [\n            t17,\n            children,\n            t18\n        ]\n    }), $[41] = children, $[42] = handleDrag, $[43] = handleDragEnd, $[44] = handleDragOver, $[45] = handleDragStart, $[46] = handleDrop, $[47] = isVoid, $[48] = t17, $[49] = t18, $[50] = t19) : t19 = $[50], t19;\n};\nDraggableBlock.displayName = \"DraggableBlock\";\ndebugWithName(\"components:Element\");\nconst EMPTY_ANNOTATIONS = [], inlineBlockStyle = {\n    display: \"inline-block\"\n}, Element = ({ attributes, children, element, schemaTypes, readOnly, renderBlock, renderChild, renderListItem, renderStyle, spellCheck })=>{\n    const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSelected)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), inlineBlockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), focused = selected && editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection) || !1, value = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>fromSlateValue([\n            element\n        ], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0], [\n        editor,\n        element,\n        schemaTypes.block.name\n    ]);\n    let renderedBlock = children, className;\n    const blockPath = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>[\n            {\n                _key: element._key\n            }\n        ], [\n        element\n    ]);\n    if (typeof element._type != \"string\") throw new Error(\"Expected element to have a _type property\");\n    if (typeof element._key != \"string\") throw new Error(\"Expected element to have a _key property\");\n    if (editor.isInline(element)) {\n        const path = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findPath(editor, element), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n            depth: 1\n        }), schemaType = schemaTypes.inlineObjects.find((_type)=>_type.name === element._type);\n        if (!schemaType) throw new Error(\"Could not find type for inline block element\");\n        if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block)) {\n            const elmPath = [\n                {\n                    _key: block._key\n                },\n                \"children\",\n                {\n                    _key: element._key\n                }\n            ];\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", {\n                ...attributes,\n                children: [\n                    children,\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"span\", {\n                        draggable: !readOnly,\n                        className: \"pt-inline-object\",\n                        \"data-testid\": \"pt-inline-object\",\n                        ref: inlineBlockObjectRef,\n                        style: inlineBlockStyle,\n                        contentEditable: !1,\n                        children: [\n                            renderChild && renderChild({\n                                annotations: EMPTY_ANNOTATIONS,\n                                // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, {\n                                    value\n                                }),\n                                editorElementRef: inlineBlockObjectRef,\n                                focused,\n                                path: elmPath,\n                                schemaType,\n                                selected,\n                                type: schemaType,\n                                value\n                            }),\n                            !renderChild && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, {\n                                value\n                            })\n                        ]\n                    }, element._key)\n                ]\n            });\n        }\n        throw new Error(\"Block not found!\");\n    }\n    if (element._type === schemaTypes.block.name) {\n        className = \"pt-block pt-text-block\";\n        const isListItem = \"listItem\" in element, style = \"style\" in element && element.style || \"normal\";\n        className = `pt-block pt-text-block pt-text-block-style-${style}`;\n        const blockStyleType = schemaTypes.styles.find((item)=>item.value === style);\n        renderStyle && blockStyleType && (renderedBlock = renderStyle({\n            block: element,\n            children,\n            focused,\n            selected,\n            value: style,\n            path: blockPath,\n            schemaType: blockStyleType,\n            editorElementRef: blockRef\n        }));\n        let level;\n        if (isListItem && (typeof element.level == \"number\" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), editor.isListBlock(value) && isListItem && element.listItem) {\n            const listType = schemaTypes.lists.find((item_0)=>item_0.value === element.listItem);\n            renderListItem && listType ? renderedBlock = renderListItem({\n                block: value,\n                children: renderedBlock,\n                focused,\n                selected,\n                value: element.listItem,\n                path: blockPath,\n                schemaType: listType,\n                level: value.level || 1,\n                editorElementRef: blockRef\n            }) : renderedBlock = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultListItem, {\n                listStyle: value.listItem || schemaTypes.lists[0].value,\n                listLevel: value.level || 1,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultListItemInner, {\n                    children: renderedBlock\n                })\n            });\n        }\n        const renderProps = Object.defineProperty({\n            children: renderedBlock,\n            editorElementRef: blockRef,\n            focused,\n            level,\n            listItem: isListItem ? element.listItem : void 0,\n            path: blockPath,\n            selected,\n            style,\n            schemaType: schemaTypes.block,\n            value\n        }, \"type\", {\n            enumerable: !1,\n            get () {\n                return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.block;\n            }\n        }), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n            ...attributes,\n            className,\n            spellCheck,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DraggableBlock, {\n                element,\n                readOnly,\n                blockRef,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                    ref: blockRef,\n                    children: propsOrDefaultRendered\n                })\n            })\n        }, element._key);\n    }\n    const schemaType_0 = schemaTypes.blockObjects.find((_type_0)=>_type_0.name === element._type);\n    if (!schemaType_0) throw new Error(`Could not find schema type for block element of _type ${element._type}`);\n    className = \"pt-block pt-object-block\";\n    const block_0 = fromSlateValue([\n        element\n    ], schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n    let renderedBlockFromProps;\n    if (renderBlock) {\n        const _props = Object.defineProperty({\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, {\n                value\n            }),\n            editorElementRef: blockRef,\n            focused,\n            path: blockPath,\n            schemaType: schemaType_0,\n            selected,\n            value: block_0\n        }, \"type\", {\n            enumerable: !1,\n            get () {\n                return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n            }\n        });\n        renderedBlockFromProps = renderBlock(_props);\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        ...attributes,\n        className,\n        children: [\n            children,\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(DraggableBlock, {\n                element,\n                readOnly,\n                blockRef,\n                children: [\n                    renderedBlockFromProps && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                        ref: blockRef,\n                        contentEditable: !1,\n                        children: renderedBlockFromProps\n                    }),\n                    !renderedBlockFromProps && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultBlockObject, {\n                        selected,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultObject, {\n                            value\n                        })\n                    })\n                ]\n            })\n        ]\n    }, element._key);\n};\nElement.displayName = \"Element\";\nconst PortableTextEditorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditor = ()=>{\n    const editor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorContext);\n    if (!editor) throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n    return editor;\n};\nfunction DefaultAnnotation(props) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n    let t0;\n    $[0] !== props.annotation ? (t0 = ()=>alert(JSON.stringify(props.annotation)), $[0] = props.annotation, $[1] = t0) : t0 = $[1];\n    const handleClick = t0;\n    let t1;\n    $[2] === Symbol.for(\"react.memo_cache_sentinel\") ? (t1 = {\n        color: \"blue\"\n    }, $[2] = t1) : t1 = $[2];\n    let t2;\n    return $[3] !== handleClick || $[4] !== props.children ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        style: t1,\n        onClick: handleClick,\n        children: props.children\n    }), $[3] = handleClick, $[4] = props.children, $[5] = t2) : t2 = $[5], t2;\n}\nDefaultAnnotation.displayName = \"DefaultAnnotation\";\nfunction compileType(rawType) {\n    return _sanity_schema__WEBPACK_IMPORTED_MODULE_14__.Schema.compile({\n        name: \"blockTypeSchema\",\n        types: [\n            rawType\n        ]\n    }).get(rawType.name);\n}\nconst FLUSH_PATCHES_THROTTLED_MS =  false ? 0 : 1e3, mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_18__.setup)({\n    types: {\n        context: {},\n        events: {},\n        input: {},\n        emitted: {}\n    },\n    actions: {\n        \"emit has pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n            type: \"has pending patches\"\n        }),\n        \"emit mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ context })=>({\n                type: \"mutation\",\n                patches: context.pendingPatches,\n                snapshot: fromSlateValue(context.slateEditor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(context.slateEditor))\n            })),\n        \"clear pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            pendingPatches: []\n        }),\n        \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            pendingPatches: ({ context, event })=>[\n                    ...context.pendingPatches,\n                    event.patch\n                ]\n        })\n    },\n    guards: {\n        \"slate is normalizing\": ({ context })=>slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isNormalizing(context.slateEditor)\n    }\n}).createMachine({\n    id: \"mutation\",\n    context: ({ input })=>({\n            pendingPatches: [],\n            schema: input.schema,\n            slateEditor: input.slateEditor\n        }),\n    initial: \"idle\",\n    states: {\n        idle: {\n            on: {\n                patch: {\n                    actions: [\n                        \"defer patch\",\n                        \"emit has pending patches\"\n                    ],\n                    target: \"has pending patches\"\n                }\n            }\n        },\n        \"has pending patches\": {\n            after: {\n                [FLUSH_PATCHES_THROTTLED_MS]: [\n                    {\n                        guard: \"slate is normalizing\",\n                        target: \"idle\",\n                        actions: [\n                            \"emit mutation\",\n                            \"clear pending patches\"\n                        ]\n                    },\n                    {\n                        reenter: !0\n                    }\n                ]\n            },\n            on: {\n                patch: {\n                    actions: [\n                        \"defer patch\"\n                    ],\n                    reenter: !0\n                }\n            }\n        }\n    }\n});\nfunction validateValue(value, types, keyGenerator) {\n    let resolution = null, valid = !0;\n    const validChildTypes = [\n        types.span.name,\n        ...types.inlineObjects.map((t)=>t.name)\n    ], validBlockTypes = [\n        types.block.name,\n        ...types.blockObjects.map((t)=>t.name)\n    ];\n    return value === void 0 ? {\n        valid: !0,\n        resolution: null,\n        value\n    } : !Array.isArray(value) || value.length === 0 ? {\n        valid: !1,\n        resolution: {\n            patches: [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([])\n            ],\n            description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n            action: \"Unset the value\",\n            item: value,\n            i18n: {\n                description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n                action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n            }\n        },\n        value\n    } : (value.some((blk, index)=>{\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(blk)) return resolution = {\n            patches: [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                    index\n                ])\n            ],\n            description: `Block must be an object, got ${String(blk)}`,\n            action: \"Unset invalid item\",\n            item: blk,\n            i18n: {\n                description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n                action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n                values: {\n                    index\n                }\n            }\n        }, !0;\n        if (!blk._key || typeof blk._key != \"string\") return resolution = {\n            patches: [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n                    ...blk,\n                    _key: keyGenerator()\n                }, [\n                    index\n                ])\n            ],\n            description: `Block at index ${index} is missing required _key.`,\n            action: \"Set the block with a random _key value\",\n            item: blk,\n            i18n: {\n                description: \"inputs.portable-text.invalid-value.missing-key.description\",\n                action: \"inputs.portable-text.invalid-value.missing-key.action\",\n                values: {\n                    index\n                }\n            }\n        }, !0;\n        if (!blk._type || !validBlockTypes.includes(blk._type)) {\n            if (blk._type === \"block\") {\n                const currentBlockTypeName = types.block.name;\n                return resolution = {\n                    patches: [\n                        (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n                            ...blk,\n                            _type: currentBlockTypeName\n                        }, [\n                            {\n                                _key: blk._key\n                            }\n                        ])\n                    ],\n                    description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n                    action: `Use type '${currentBlockTypeName}'`,\n                    item: blk,\n                    i18n: {\n                        description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n                        action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n                        values: {\n                            key: blk._key,\n                            expectedTypeName: currentBlockTypeName\n                        }\n                    }\n                }, !0;\n            }\n            return !blk._type && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)({\n                ...blk,\n                _type: types.block.name\n            }) ? (resolution = {\n                patches: [\n                    (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n                        ...blk,\n                        _type: types.block.name\n                    }, [\n                        {\n                            _key: blk._key\n                        }\n                    ])\n                ],\n                description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n                action: `Use type '${types.block.name}'`,\n                item: blk,\n                i18n: {\n                    description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n                    action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n                    values: {\n                        key: blk._key,\n                        expectedTypeName: types.block.name\n                    }\n                }\n            }, !0) : blk._type ? (resolution = {\n                patches: [\n                    (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                        {\n                            _key: blk._key\n                        }\n                    ])\n                ],\n                description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n                action: \"Remove the block\",\n                item: blk,\n                i18n: {\n                    description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n                    action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n                    values: {\n                        key: blk._key,\n                        typeName: blk._type\n                    }\n                }\n            }, !0) : (resolution = {\n                patches: [\n                    (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                        {\n                            _key: blk._key\n                        }\n                    ])\n                ],\n                description: `Block with _key '${blk._key}' is missing an _type property`,\n                action: \"Remove the block\",\n                item: blk,\n                i18n: {\n                    description: \"inputs.portable-text.invalid-value.missing-type.description\",\n                    action: \"inputs.portable-text.invalid-value.missing-type.action\",\n                    values: {\n                        key: blk._key\n                    }\n                }\n            }, !0);\n        }\n        if (blk._type === types.block.name) {\n            const textBlock = blk;\n            if (textBlock.children && !Array.isArray(textBlock.children)) return resolution = {\n                patches: [\n                    (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n                        children: []\n                    }, [\n                        {\n                            _key: textBlock._key\n                        }\n                    ])\n                ],\n                description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n                action: \"Reset the children property\",\n                item: textBlock,\n                i18n: {\n                    description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n                    action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n                    values: {\n                        key: textBlock._key\n                    }\n                }\n            }, !0;\n            if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n                const newSpan = {\n                    _type: types.span.name,\n                    _key: keyGenerator(),\n                    text: \"\",\n                    marks: []\n                };\n                return resolution = {\n                    autoResolve: !0,\n                    patches: [\n                        (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.setIfMissing)([], [\n                            {\n                                _key: blk._key\n                            },\n                            \"children\"\n                        ]),\n                        (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([\n                            newSpan\n                        ], \"after\", [\n                            {\n                                _key: blk._key\n                            },\n                            \"children\",\n                            0\n                        ])\n                    ],\n                    description: `Children for text block with _key '${blk._key}' is empty.`,\n                    action: \"Insert an empty text\",\n                    item: blk,\n                    i18n: {\n                        description: \"inputs.portable-text.invalid-value.empty-children.description\",\n                        action: \"inputs.portable-text.invalid-value.empty-children.action\",\n                        values: {\n                            key: blk._key\n                        }\n                    }\n                }, !0;\n            }\n            const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(textBlock.children.filter((cld)=>cld._type === types.span.name).map((cld)=>cld.marks || [])));\n            if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n                const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(blk.markDefs.map((def)=>def._key).filter((key)=>!allUsedMarks.includes(key)));\n                if (unusedMarkDefs.length > 0) return resolution = {\n                    autoResolve: !0,\n                    patches: unusedMarkDefs.map((markDefKey)=>(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                            {\n                                _key: blk._key\n                            },\n                            \"markDefs\",\n                            {\n                                _key: markDefKey\n                            }\n                        ])),\n                    description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n                    action: \"Remove unused mark definition item\",\n                    item: blk,\n                    i18n: {\n                        description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n                        action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n                        values: {\n                            key: blk._key,\n                            unusedMarkDefs: unusedMarkDefs.map((m)=>m.toString())\n                        }\n                    }\n                }, !0;\n            }\n            const orphanedMarks = allUsedMarks.filter((mark)=>!types.decorators.map((dec)=>dec.value).includes(mark)).filter((mark)=>textBlock.markDefs === void 0 || !textBlock.markDefs.find((def)=>def._key === mark));\n            if (orphanedMarks.length > 0) {\n                const spanChildren = textBlock.children.filter((cld)=>cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark)=>orphanedMarks.includes(mark)));\n                if (spanChildren) {\n                    const orphaned = orphanedMarks.join(\", \");\n                    return resolution = {\n                        autoResolve: !0,\n                        patches: spanChildren.map((child)=>(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)((child.marks || []).filter((cMrk)=>!orphanedMarks.includes(cMrk)), [\n                                {\n                                    _key: blk._key\n                                },\n                                \"children\",\n                                {\n                                    _key: child._key\n                                },\n                                \"marks\"\n                            ])),\n                        description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n                        action: \"Remove invalid marks\",\n                        item: blk,\n                        i18n: {\n                            description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n                            action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n                            values: {\n                                key: blk._key,\n                                orphanedMarks: orphanedMarks.map((m)=>m.toString())\n                            }\n                        }\n                    }, !0;\n                }\n            }\n            textBlock.children.some((child, cIndex)=>{\n                if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(child)) return resolution = {\n                    patches: [\n                        (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                            {\n                                _key: blk._key\n                            },\n                            \"children\",\n                            cIndex\n                        ])\n                    ],\n                    description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                    action: \"Remove the item\",\n                    item: blk,\n                    i18n: {\n                        description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n                        action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n                        values: {\n                            key: blk._key,\n                            index: cIndex\n                        }\n                    }\n                }, !0;\n                if (!child._key || typeof child._key != \"string\") {\n                    const newChild = {\n                        ...child,\n                        _key: keyGenerator()\n                    };\n                    return resolution = {\n                        autoResolve: !0,\n                        patches: [\n                            (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(newChild, [\n                                {\n                                    _key: blk._key\n                                },\n                                \"children\",\n                                cIndex\n                            ])\n                        ],\n                        description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                        action: \"Set a new random _key on the object\",\n                        item: blk,\n                        i18n: {\n                            description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n                            action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n                            values: {\n                                key: blk._key,\n                                index: cIndex\n                            }\n                        }\n                    }, !0;\n                }\n                return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n                    patches: [\n                        (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)({\n                            ...child,\n                            text: \"\"\n                        }, [\n                            {\n                                _key: blk._key\n                            },\n                            \"children\",\n                            {\n                                _key: child._key\n                            }\n                        ])\n                    ],\n                    description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                    action: \"Write an empty text property to the object\",\n                    item: blk,\n                    i18n: {\n                        description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n                        action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n                        values: {\n                            key: blk._key,\n                            childKey: child._key\n                        }\n                    }\n                }, !0) : !1 : (resolution = {\n                    patches: [\n                        (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                            {\n                                _key: blk._key\n                            },\n                            \"children\",\n                            {\n                                _key: child._key\n                            }\n                        ])\n                    ],\n                    description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                    action: \"Remove the object\",\n                    item: blk,\n                    i18n: {\n                        description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n                        action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n                        values: {\n                            key: blk._key,\n                            childKey: child._key,\n                            childType: child._type\n                        }\n                    }\n                }, !0) : (resolution = {\n                    patches: [\n                        (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                            {\n                                _key: blk._key\n                            },\n                            \"children\",\n                            {\n                                _key: child._key\n                            }\n                        ])\n                    ],\n                    description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                    action: \"Remove the object\",\n                    item: blk,\n                    i18n: {\n                        description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n                        action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n                        values: {\n                            key: blk._key,\n                            childKey: child._key\n                        }\n                    }\n                }, !0);\n            }) && (valid = !1);\n        }\n        return !1;\n    }) && (valid = !1), {\n        valid,\n        resolution,\n        value\n    });\n}\nfunction withRemoteChanges(editor, fn) {\n    const prev = isChangingRemotely(editor) || !1;\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n    return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n    const prev = isPatching(editor);\n    PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n    return PATCHING.get(editor);\n}\nfunction cloneDiff(diff2) {\n    const [type, patch] = diff2;\n    return [\n        type,\n        patch\n    ];\n}\nfunction getCommonOverlap(textA, textB) {\n    let text1 = textA, text2 = textB;\n    const text1Length = text1.length, text2Length = text2.length;\n    if (text1Length === 0 || text2Length === 0) return 0;\n    text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n    const textLength = Math.min(text1Length, text2Length);\n    if (text1 === text2) return textLength;\n    let best = 0, length = 1;\n    for(let found = 0; found !== -1;){\n        const pattern = text1.substring(textLength - length);\n        if (found = text2.indexOf(pattern), found === -1) return best;\n        length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n    }\n    return best;\n}\nfunction getCommonPrefix(text1, text2) {\n    if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n    let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n    for(; pointerMin < pointerMid;)text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n    return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n    if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n    let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n    for(; pointerMin < pointerMid;)text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n    return pointerMid;\n}\nfunction isHighSurrogate(char) {\n    const charCode = char.charCodeAt(0);\n    return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n    const charCode = char.charCodeAt(0);\n    return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n    const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n    for(let x = 0; x < vLength; x++)v1[x] = -1, v2[x] = -1;\n    v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n    const delta = text1Length - text2Length, front = delta % 2 !== 0;\n    let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n    for(let d = 0; d < maxD && !(Date.now() > deadline); d++){\n        for(let k1 = -d + k1start; k1 <= d - k1end; k1 += 2){\n            const k1Offset = vOffset + k1;\n            let x1;\n            k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n            let y1 = x1 - k1;\n            for(; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1);)x1++, y1++;\n            if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n            else if (y1 > text2Length) k1start += 2;\n            else if (front) {\n                const k2Offset = vOffset + delta - k1;\n                if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n                    const x2 = text1Length - v2[k2Offset];\n                    if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n                }\n            }\n        }\n        for(let k2 = -d + k2start; k2 <= d - k2end; k2 += 2){\n            const k2Offset = vOffset + k2;\n            let x2;\n            k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n            let y2 = x2 - k2;\n            for(; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1);)x2++, y2++;\n            if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n            else if (y2 > text2Length) k2start += 2;\n            else if (!front) {\n                const k1Offset = vOffset + delta - k2;\n                if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n                    const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n                    if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n                }\n            }\n        }\n    }\n    return [\n        [\n            DIFF_DELETE,\n            text1\n        ],\n        [\n            DIFF_INSERT,\n            text2\n        ]\n    ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n    const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n        checkLines: !1,\n        deadline\n    }), diffsb = doDiff(text1b, text2b, {\n        checkLines: !1,\n        deadline\n    });\n    return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n    if (timeout <= 0) return null;\n    const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n    if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n    const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n    let halfMatch;\n    if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n    else {\n        if (!halfMatch1 && !halfMatch2) return null;\n        halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n    }\n    if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n    let text1A, text1B, text2A, text2B;\n    text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n    const midCommon = halfMatch[4];\n    return [\n        text1A,\n        text1B,\n        text2A,\n        text2B,\n        midCommon\n    ];\n}\nfunction halfMatchI(longText, shortText, i) {\n    const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n    let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n    for(; (j = shortText.indexOf(seed, j + 1)) !== -1;){\n        const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n        bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n    }\n    return bestCommon.length * 2 >= longText.length ? [\n        bestLongTextA || \"\",\n        bestLongTextB || \"\",\n        bestShortTextA || \"\",\n        bestShortTextB || \"\",\n        bestCommon || \"\"\n    ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n    for(let x = 0; x < diffs.length; x++){\n        const chars = diffs[x][1], text = [];\n        for(let y = 0; y < chars.length; y++)text[y] = lineArray[chars.charCodeAt(y)];\n        diffs[x][1] = text.join(\"\");\n    }\n}\nfunction linesToChars(textA, textB) {\n    const lineArray = [], lineHash = {};\n    lineArray[0] = \"\";\n    function diffLinesToMunge(text) {\n        let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n        for(; lineEnd < text.length - 1;){\n            lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n            let line = text.slice(lineStart, lineEnd + 1);\n            (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n        }\n        return chars;\n    }\n    let maxLines = 4e4;\n    const chars1 = diffLinesToMunge(textA);\n    maxLines = 65535;\n    const chars2 = diffLinesToMunge(textB);\n    return {\n        chars1,\n        chars2,\n        lineArray\n    };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n    let text1 = textA, text2 = textB;\n    const a = linesToChars(text1, text2);\n    text1 = a.chars1, text2 = a.chars2;\n    const linearray = a.lineArray;\n    let diffs = doDiff(text1, text2, {\n        checkLines: !1,\n        deadline: opts.deadline\n    });\n    charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([\n        DIFF_EQUAL,\n        \"\"\n    ]);\n    let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n    for(; pointer < diffs.length;){\n        switch(diffs[pointer][0]){\n            case DIFF_INSERT:\n                countInsert++, textInsert += diffs[pointer][1];\n                break;\n            case DIFF_DELETE:\n                countDelete++, textDelete += diffs[pointer][1];\n                break;\n            case DIFF_EQUAL:\n                if (countDelete >= 1 && countInsert >= 1) {\n                    diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n                    const aa = doDiff(textDelete, textInsert, {\n                        checkLines: !1,\n                        deadline: opts.deadline\n                    });\n                    for(let j = aa.length - 1; j >= 0; j--)diffs.splice(pointer, 0, aa[j]);\n                    pointer += aa.length;\n                }\n                countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n                break;\n            default:\n                throw new Error(\"Unknown diff operation.\");\n        }\n        pointer++;\n    }\n    return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n    let diffs;\n    if (!text1) return [\n        [\n            DIFF_INSERT,\n            text2\n        ]\n    ];\n    if (!text2) return [\n        [\n            DIFF_DELETE,\n            text1\n        ]\n    ];\n    const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n    if (i !== -1) return diffs = [\n        [\n            DIFF_INSERT,\n            longtext.substring(0, i)\n        ],\n        [\n            DIFF_EQUAL,\n            shorttext\n        ],\n        [\n            DIFF_INSERT,\n            longtext.substring(i + shorttext.length)\n        ]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n    if (shorttext.length === 1) return [\n        [\n            DIFF_DELETE,\n            text1\n        ],\n        [\n            DIFF_INSERT,\n            text2\n        ]\n    ];\n    const halfMatch = findHalfMatch(text1, text2);\n    if (halfMatch) {\n        const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n        return diffsA.concat([\n            [\n                DIFF_EQUAL,\n                midCommon\n            ]\n        ], diffsB);\n    }\n    return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value)=>key in obj ? __defProp$2(obj, key, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value\n    }) : obj[key] = value, __spreadValues$2 = (a, b)=>{\n    for(var prop in b || (b = {}))__hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n    if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b))__propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n    return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n    if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n    const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n    return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n    let text1 = textA, text2 = textB;\n    if (text1 === text2) return text1 ? [\n        [\n            DIFF_EQUAL,\n            text1\n        ]\n    ] : [];\n    let commonlength = getCommonPrefix(text1, text2);\n    const commonprefix = text1.substring(0, commonlength);\n    text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n    const commonsuffix = text1.substring(text1.length - commonlength);\n    text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n    let diffs = computeDiff(text1, text2, options);\n    return commonprefix && diffs.unshift([\n        DIFF_EQUAL,\n        commonprefix\n    ]), commonsuffix && diffs.push([\n        DIFF_EQUAL,\n        commonsuffix\n    ]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n    let t = 1;\n    return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n    return __spreadValues$2({\n        checkLines: !0,\n        deadline: createDeadLine(opts.timeout || 1)\n    }, opts);\n}\nfunction combineChar(data, char, dir) {\n    return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n    return dir === 1 ? [\n        data.substring(0, data.length - 1),\n        data[data.length - 1]\n    ] : [\n        data.substring(1),\n        data[0]\n    ];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n    return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n    const inv = dir === 1 ? -1 : 1;\n    let insertIdx = null, deleteIdx = null, j = i + dir;\n    for(; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir){\n        const [op, text2] = diffs[j];\n        if (text2.length !== 0) {\n            if (op === DIFF_INSERT) {\n                insertIdx === null && (insertIdx = j);\n                continue;\n            } else if (op === DIFF_DELETE) {\n                deleteIdx === null && (deleteIdx = j);\n                continue;\n            } else if (op === DIFF_EQUAL) {\n                if (insertIdx === null && deleteIdx === null) {\n                    const [rest, char2] = splitChar(diffs[i][1], dir);\n                    diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n                    return;\n                }\n                break;\n            }\n        }\n    }\n    if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n        const [insertText2, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n        diffs[insertIdx][1] = insertText2, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n        return;\n    }\n    const [text, char] = splitChar(diffs[i][1], dir);\n    diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [\n        DIFF_INSERT,\n        char\n    ]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [\n        DIFF_DELETE,\n        char\n    ]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n    for(let i = 0; i < diffs.length; i++){\n        const [diffType, diffText] = diffs[i];\n        if (diffText.length === 0) continue;\n        const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n        isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n    }\n    for(let i = 0; i < diffs.length; i++)diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n    let diffs = rawDiffs.map((diff2)=>cloneDiff(diff2)), hasChanges = !1;\n    const equalities = [];\n    let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n    for(; pointer < diffs.length;)diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [\n        DIFF_DELETE,\n        lastEquality\n    ]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n    for(hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length;){\n        if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n            const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n            overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [\n                DIFF_EQUAL,\n                insertion.substring(0, overlapLength1)\n            ]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [\n                DIFF_EQUAL,\n                deletion.substring(0, overlapLength2)\n            ]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n        }\n        pointer++;\n    }\n    return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n    const diffs = rawDiffs.map((diff2)=>cloneDiff(diff2));\n    function diffCleanupSemanticScore(one, two) {\n        if (!one || !two) return 6;\n        const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n        return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n    }\n    let pointer = 1;\n    for(; pointer < diffs.length - 1;){\n        if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n            let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n            const commonOffset = getCommonSuffix(equality1, edit);\n            if (commonOffset) {\n                const commonString = edit.substring(edit.length - commonOffset);\n                equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n            }\n            let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n            for(; edit.charAt(0) === equality2.charAt(0);){\n                equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n                const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n                score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n            }\n            diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n        }\n        pointer++;\n    }\n    return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n    let diffs = rawDiffs.map((diff2)=>cloneDiff(diff2));\n    diffs.push([\n        DIFF_EQUAL,\n        \"\"\n    ]);\n    let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n    for(; pointer < diffs.length;)switch(diffs[pointer][0]){\n        case DIFF_INSERT:\n            countInsert++, textInsert += diffs[pointer][1], pointer++;\n            break;\n        case DIFF_DELETE:\n            countDelete++, textDelete += diffs[pointer][1], pointer++;\n            break;\n        case DIFF_EQUAL:\n            countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [\n                DIFF_EQUAL,\n                textInsert.substring(0, commonlength)\n            ]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [\n                DIFF_DELETE,\n                textDelete\n            ]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [\n                DIFF_INSERT,\n                textInsert\n            ]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n            break;\n        default:\n            throw new Error(\"Unknown diff operation\");\n    }\n    diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n    let hasChanges = !1;\n    for(pointer = 1; pointer < diffs.length - 1;)diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n    return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n    return args.reduce((n, bool)=>n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n    let diffs = rawDiffs.map((diff2)=>cloneDiff(diff2)), hasChanges = !1;\n    const equalities = [];\n    let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n    for(; pointer < diffs.length;)diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [\n        DIFF_DELETE,\n        lastEquality\n    ]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n    return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value\n    }) : obj[key] = value, __spreadValues$1 = (a, b)=>{\n    for(var prop in b || (b = {}))__hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n    if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b))__propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n    return a;\n};\nconst DEFAULT_OPTIONS = {\n    /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */ threshold: 0.5,\n    /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */ distance: 1e3\n};\nfunction applyDefaults(options) {\n    return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n    if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n    const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n    function getBitapScore(e, x) {\n        const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n        return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n    }\n    let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n    bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n    const matchmask = 1 << pattern.length - 1;\n    bestLoc = -1;\n    let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n    for(let d = 0; d < pattern.length; d++){\n        for(binMin = 0, binMid = binMax; binMin < binMid;)getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n        binMax = binMid;\n        let start = Math.max(1, loc - binMid + 1);\n        const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n        rd[finish + 1] = (1 << d) - 1;\n        for(let j = finish; j >= start; j--){\n            const charMatch = s[text.charAt(j - 1)];\n            if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n                const score = getBitapScore(d, j - 1);\n                if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n                else break;\n            }\n        }\n        if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n        lastRd = rd;\n    }\n    return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n    const s = {};\n    for(let i = 0; i < pattern.length; i++)s[pattern.charAt(i)] = 0;\n    for(let i = 0; i < pattern.length; i++)s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n    return s;\n}\nfunction match(text, pattern, searchLocation) {\n    if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n    const loc = Math.max(0, Math.min(searchLocation, text.length));\n    if (text === pattern) return 0;\n    if (text.length) {\n        if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n    } else return -1;\n    return bitap(text, pattern, loc);\n}\nfunction diffText1(diffs) {\n    const text = [];\n    for(let x = 0; x < diffs.length; x++)diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n    return text.join(\"\");\n}\nfunction diffText2(diffs) {\n    const text = [];\n    for(let x = 0; x < diffs.length; x++)diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n    return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n    let leven = 0, insertions = 0, deletions = 0;\n    for(let x = 0; x < diffs.length; x++){\n        const op = diffs[x][0], data = diffs[x][1];\n        switch(op){\n            case DIFF_INSERT:\n                insertions += data.length;\n                break;\n            case DIFF_DELETE:\n                deletions += data.length;\n                break;\n            case DIFF_EQUAL:\n                leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n                break;\n            default:\n                throw new Error(\"Unknown diff operation.\");\n        }\n    }\n    return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, loc) {\n    let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n    for(x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++)lastChars1 = chars1, lastChars2 = chars2;\n    return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (loc - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n    let bytes = 0;\n    for(let i = 0; i < str.length; i++){\n        const codePoint = str.codePointAt(i);\n        if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n        bytes += utf8len(codePoint);\n    }\n    return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n    let byteOffset = 0, idx = 0;\n    function advanceTo(target) {\n        for(; byteOffset < target;){\n            const codePoint = base.codePointAt(idx);\n            if (typeof codePoint > \"u\") return idx;\n            byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n        }\n        if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n        return idx;\n    }\n    const adjusted = [];\n    for (const patch of patches)adjusted.push({\n        diffs: patch.diffs.map((diff2)=>cloneDiff(diff2)),\n        start1: advanceTo(patch.start1),\n        start2: advanceTo(patch.start2),\n        utf8Start1: patch.utf8Start1,\n        utf8Start2: patch.utf8Start2,\n        length1: patch.length1,\n        length2: patch.length2,\n        utf8Length1: patch.utf8Length1,\n        utf8Length2: patch.utf8Length2\n    });\n    return adjusted;\n}\nfunction utf8len(codePoint) {\n    return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n    const paddingLength = margin;\n    let nullPadding = \"\";\n    for(let x = 1; x <= paddingLength; x++)nullPadding += String.fromCharCode(x);\n    for (const p of patches)p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n    let patch = patches[0], diffs = patch.diffs;\n    if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([\n        DIFF_EQUAL,\n        nullPadding\n    ]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n    else if (paddingLength > diffs[0][1].length) {\n        const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n        diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n    }\n    if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([\n        DIFF_EQUAL,\n        nullPadding\n    ]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n    else if (paddingLength > diffs[diffs.length - 1][1].length) {\n        const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n        diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n    }\n    return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n    return {\n        diffs: [],\n        start1,\n        start2,\n        utf8Start1: start1,\n        utf8Start2: start2,\n        length1: 0,\n        length2: 0,\n        utf8Length1: 0,\n        utf8Length2: 0\n    };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n    const patchSize = MAX_BITS;\n    for(let x = 0; x < patches.length; x++){\n        if (patches[x].length1 <= patchSize) continue;\n        const bigpatch = patches[x];\n        patches.splice(x--, 1);\n        let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n        for(; bigpatch.diffs.length !== 0;){\n            const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n            let empty = !0;\n            if (preContext !== \"\") {\n                const precontextByteCount = countUtf8Bytes(preContext);\n                patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([\n                    DIFF_EQUAL,\n                    preContext\n                ]);\n            }\n            for(; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin;){\n                const diffType = bigpatch.diffs[0][0];\n                let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n                if (diffType === DIFF_INSERT) {\n                    patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n                    const diff2 = bigpatch.diffs.shift();\n                    diff2 && patch.diffs.push(diff2), empty = !1;\n                } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([\n                    diffType,\n                    diffText\n                ]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([\n                    diffType,\n                    diffText\n                ]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n            }\n            preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n            const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n            postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([\n                DIFF_EQUAL,\n                postContext\n            ])), empty || patches.splice(++x, 0, patch);\n        }\n    }\n}\nfunction apply(patches, originalText, opts = {}) {\n    if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n    let text = originalText;\n    if (patches.length === 0) return [\n        text,\n        []\n    ];\n    const parsed = adjustIndiciesToUcs2(patches, text, {\n        allowExceedingIndices: opts.allowExceedingIndices\n    }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n    text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n    let delta = 0;\n    const results = [];\n    for(let x = 0; x < parsed.length; x++){\n        const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n        let startLoc, endLoc = -1;\n        if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n        else {\n            results[x] = !0, delta = startLoc - expectedLoc;\n            let text2;\n            if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n            else {\n                let diffs = diff(text1, text2, {\n                    checkLines: !1\n                });\n                if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n                else {\n                    diffs = cleanupSemanticLossless(diffs);\n                    let index1 = 0, index2 = 0;\n                    for(let y = 0; y < parsed[x].diffs.length; y++){\n                        const mod = parsed[x].diffs[y];\n                        mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n                    }\n                }\n            }\n        }\n    }\n    return text = text.substring(nullPadding.length, text.length - nullPadding.length), [\n        text,\n        results\n    ];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n    if (!textline) return [];\n    const patches = [], lines = textline.split(`\n`);\n    let textPointer = 0;\n    for(; textPointer < lines.length;){\n        const m = lines[textPointer].match(patchHeader);\n        if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n        const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n        for(patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length;){\n            const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n            if (sign === \"@\") break;\n            if (sign === \"\") {\n                textPointer++;\n                continue;\n            }\n            let line;\n            try {\n                line = decodeURI(currentLine.slice(1));\n            } catch  {\n                throw new Error(`Illegal escape in parse: ${currentLine}`);\n            }\n            const utf8Diff = countUtf8Bytes(line) - line.length;\n            if (sign === \"-\") patch.diffs.push([\n                DIFF_DELETE,\n                line\n            ]), patch.length1 -= utf8Diff;\n            else if (sign === \"+\") patch.diffs.push([\n                DIFF_INSERT,\n                line\n            ]), patch.length2 -= utf8Diff;\n            else if (sign === \" \") patch.diffs.push([\n                DIFF_EQUAL,\n                line\n            ]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n            else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n            textPointer++;\n        }\n    }\n    return patches;\n}\nfunction toInt(num) {\n    return parseInt(num, 10);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n    const prev = isUndoing(editor);\n    IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n    return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n    IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n    const prev = isRedoing(editor);\n    IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n    return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n    IS_REDOING.set(editor, isRedoing2);\n}\nconst debug$j = debugWithName(\"plugin:withUndoRedo\"), debugVerbose$3 = debug$j.enabled && !1, SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor)=>{\n    const state = SAVING.get(editor);\n    return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor)=>(REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n    const { editorActor, blockSchemaType } = options;\n    return (editor)=>{\n        let previousSnapshot = fromSlateValue(editor.children, blockSchemaType.name);\n        const remotePatches = getRemotePatches(editor);\n        options.subscriptions.push(()=>{\n            debug$j(\"Subscribing to patches\");\n            const sub = editorActor.on(\"patches\", ({ patches, snapshot })=>{\n                let reset = !1;\n                patches.forEach((patch)=>{\n                    if (!reset && patch.origin !== \"local\" && remotePatches) {\n                        if (patch.type === \"unset\" && patch.path.length === 0) {\n                            debug$j(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                                undos: [],\n                                redos: []\n                            }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n                            return;\n                        }\n                        remotePatches.push({\n                            patch,\n                            time: /* @__PURE__ */ new Date(),\n                            snapshot,\n                            previousSnapshot\n                        });\n                    }\n                }), previousSnapshot = snapshot;\n            });\n            return ()=>{\n                debug$j(\"Unsubscribing to patches\"), sub.unsubscribe();\n            };\n        }), editor.history = {\n            undos: [],\n            redos: []\n        };\n        const { apply: apply2 } = editor;\n        return editor.apply = (op)=>{\n            if (editorActor.getSnapshot().matches({\n                \"edit mode\": \"read only\"\n            })) {\n                apply2(op);\n                return;\n            }\n            if (isChangingRemotely(editor)) {\n                apply2(op);\n                return;\n            }\n            if (isUndoing(editor) || isRedoing(editor)) {\n                apply2(op);\n                return;\n            }\n            const { operations, history } = editor, { undos } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor);\n            let merge = !0;\n            if (save) {\n                if (step ? operations.length === 0 && (merge = shouldMerge(op, lastOp) || overwrite) : merge = !1, step && merge) step.operations.push(op);\n                else {\n                    const newStep = {\n                        operations: [\n                            ...editor.selection === null ? [] : [\n                                createSelectOperation(editor)\n                            ],\n                            op\n                        ],\n                        timestamp: /* @__PURE__ */ new Date()\n                    };\n                    undos.push(newStep), debug$j(\"Created new undo step\", step);\n                }\n                for(; undos.length > UNDO_STEP_LIMIT;)undos.shift();\n                shouldClear(op) && (history.redos = []);\n            }\n            apply2(op);\n        }, editor.undo = ()=>{\n            if (editorActor.getSnapshot().matches({\n                \"edit mode\": \"read only\"\n            })) return;\n            const { undos } = editor.history;\n            if (undos.length > 0) {\n                const step = undos[undos.length - 1];\n                if (debug$j(\"Undoing\", step), step.operations.length > 0) {\n                    const otherPatches = remotePatches.filter((item)=>item.time >= step.timestamp);\n                    let transformedOperations = step.operations;\n                    otherPatches.forEach((item)=>{\n                        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op)=>transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n                    });\n                    const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_15__.Operation.inverse).reverse();\n                    try {\n                        slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, ()=>{\n                            withUndoing(editor, ()=>{\n                                withoutSaving(editor, ()=>{\n                                    reversedOperations.forEach((op)=>{\n                                        editor.apply(op);\n                                    });\n                                });\n                            });\n                        }), editor.normalize(), editor.onChange();\n                    } catch (err) {\n                        debug$j(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n                            undos: [],\n                            redos: []\n                        }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n                        return;\n                    }\n                    editor.history.redos.push(step), editor.history.undos.pop();\n                }\n            }\n        }, editor.redo = ()=>{\n            if (editorActor.getSnapshot().matches({\n                \"edit mode\": \"read only\"\n            })) return;\n            const { redos } = editor.history;\n            if (redos.length > 0) {\n                const step = redos[redos.length - 1];\n                if (debug$j(\"Redoing\", step), step.operations.length > 0) {\n                    const otherPatches = remotePatches.filter((item)=>item.time >= step.timestamp);\n                    let transformedOperations = step.operations;\n                    otherPatches.forEach((item)=>{\n                        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_8__(transformedOperations.map((op)=>transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n                    });\n                    try {\n                        slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, ()=>{\n                            withRedoing(editor, ()=>{\n                                withoutSaving(editor, ()=>{\n                                    transformedOperations.forEach((op)=>{\n                                        editor.apply(op);\n                                    });\n                                });\n                            });\n                        }), editor.normalize(), editor.onChange();\n                    } catch (err) {\n                        debug$j(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.history = {\n                            undos: [],\n                            redos: []\n                        }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n                        return;\n                    }\n                    editor.history.undos.push(step), editor.history.redos.pop();\n                }\n            }\n        }, editor;\n    };\n}\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n    debugVerbose$3 && (debug$j(`Adjusting '${operation.type}' operation paths for '${patch.type}' patch`), debug$j(`Operation ${JSON.stringify(operation)}`), debug$j(`Patch ${JSON.stringify(patch)}`));\n    const transformedOperation = {\n        ...operation\n    };\n    if (patch.type === \"insert\" && patch.path.length === 1) {\n        const insertBlockIndex = (snapshot || []).findIndex((blk)=>lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n                _key: blk._key\n            }, patch.path[0]));\n        return debug$j(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [\n            adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)\n        ];\n    }\n    if (patch.type === \"unset\" && patch.path.length === 1) {\n        const unsetBlockIndex = (previousSnapshot || []).findIndex((blk)=>lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n                _key: blk._key\n            }, patch.path[0]));\n        return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$j(\"Skipping transformation that targeted removed block\"), []) : (debugVerbose$3 && (debug$j(`Selection ${JSON.stringify(editor.selection)}`), debug$j(`Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`)), [\n            adjustBlockPath(transformedOperation, -1, unsetBlockIndex)\n        ]);\n    }\n    if (patch.type === \"unset\" && patch.path.length === 0) return debug$j(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n    if (patch.type === \"diffMatchPatch\") {\n        const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n        return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n            _key: operationTargetBlock._key\n        }, patch.path[0]) ? [\n            transformedOperation\n        ] : (parse(patch.value).forEach((diffPatch)=>{\n            let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n            const { diffs } = diffPatch;\n            if (diffs.forEach((diff2, index)=>{\n                const [diffType, text] = diff2;\n                diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType])=>dType === DIFF_EQUAL) || (changedOffset += text.length));\n            }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n                const currentFocus = transformedOperation.properties?.focus ? {\n                    ...transformedOperation.properties.focus\n                } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n                    ...transformedOperation.properties.anchor\n                } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n                    ...transformedOperation.newProperties.focus\n                } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n                    ...transformedOperation.newProperties.anchor\n                } : void 0;\n                (currentFocus && currentAnchor || newFocus && newAnchor) && ([\n                    currentFocus,\n                    currentAnchor,\n                    newFocus,\n                    newAnchor\n                ].forEach((point)=>{\n                    point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n                }), currentFocus && currentAnchor && (transformedOperation.properties = {\n                    focus: currentFocus,\n                    anchor: currentAnchor\n                }), newFocus && newAnchor && (transformedOperation.newProperties = {\n                    focus: newFocus,\n                    anchor: newAnchor\n                }));\n            }\n        }), [\n            transformedOperation\n        ]);\n    }\n    return [\n        transformedOperation\n    ];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n    const transformedOperation = {\n        ...operation\n    };\n    if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n        const newPath = [\n            transformedOperation.path[0] + level,\n            ...transformedOperation.path.slice(1)\n        ];\n        transformedOperation.path = newPath;\n    }\n    if (transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n            ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n            ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n            ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n            ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([\n            currentFocus,\n            currentAnchor,\n            newFocus,\n            newAnchor\n        ].forEach((point)=>{\n            point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [\n                point.path[0] + level,\n                ...point.path.slice(1)\n            ]);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n            focus: currentFocus,\n            anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n            focus: newFocus,\n            anchor: newAnchor\n        }));\n    }\n    return transformedOperation;\n}\nconst shouldMerge = (op, prev)=>!!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev)=>!!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op)=>op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n    const prev = isSaving(editor);\n    SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n    return {\n        type: \"set_selection\",\n        properties: {\n            ...editor.selection\n        },\n        newProperties: {\n            ...editor.selection\n        }\n    };\n}\nfunction findOperationTargetBlock(editor, operation) {\n    let block;\n    return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst syncValueCallback = ({ sendBack, input })=>{\n    updateValue({\n        context: input.context,\n        sendBack,\n        slateEditor: input.slateEditor,\n        value: input.value,\n        streamBlocks: input.streamBlocks\n    });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_21__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_18__.setup)({\n    types: {\n        context: {},\n        input: {},\n        events: {},\n        emitted: {}\n    },\n    actions: {\n        \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            initialValueSynced: !0\n        }),\n        \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            readOnly: ({ event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n        }),\n        \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            pendingValue: ({ event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update value\"), event.value)\n        }),\n        \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            pendingValue: void 0\n        }),\n        \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            previousValue: ({ event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"done syncing\"), event.value)\n        }),\n        \"emit done syncing initial value\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n            type: \"done syncing initial value\"\n        })\n    },\n    guards: {\n        \"initial value synced\": ({ context })=>context.initialValueSynced,\n        \"is busy\": ({ context })=>!context.readOnly && (context.isProcessingLocalChanges || (isChangingRemotely(context.slateEditor) ?? !1)),\n        \"value changed while syncing\": ({ context, event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n        \"pending value equals previous value\": ({ context })=>!(context.previousValue === void 0 && context.pendingValue === void 0) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(context.pendingValue, context.previousValue)\n    },\n    actors: {\n        \"sync value\": syncValueLogic\n    }\n}).createMachine({\n    id: \"sync\",\n    context: ({ input })=>({\n            initialValueSynced: !1,\n            isProcessingLocalChanges: !1,\n            keyGenerator: input.keyGenerator,\n            schema: input.schema,\n            readOnly: input.readOnly,\n            slateEditor: input.slateEditor,\n            pendingValue: void 0,\n            previousValue: void 0\n        }),\n    on: {\n        \"has pending patches\": {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n                isProcessingLocalChanges: !0\n            })\n        },\n        mutation: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n                isProcessingLocalChanges: !1\n            })\n        },\n        \"update readOnly\": {\n            actions: [\n                \"assign readOnly\"\n            ]\n        }\n    },\n    type: \"parallel\",\n    states: {\n        \"setting up\": {\n            initial: \"syncing initial value\",\n            states: {\n                \"syncing initial value\": {\n                    always: {\n                        guard: \"initial value synced\",\n                        target: \"done syncing initial value\"\n                    }\n                },\n                \"done syncing initial value\": {\n                    entry: [\n                        \"emit done syncing initial value\"\n                    ],\n                    type: \"final\"\n                }\n            }\n        },\n        syncing: {\n            initial: \"idle\",\n            states: {\n                idle: {\n                    on: {\n                        \"update value\": [\n                            {\n                                guard: \"is busy\",\n                                target: \"busy\",\n                                actions: [\n                                    \"assign pending value\"\n                                ]\n                            },\n                            {\n                                target: \"syncing\",\n                                actions: [\n                                    \"assign pending value\"\n                                ]\n                            }\n                        ]\n                    }\n                },\n                busy: {\n                    after: {\n                        1e3: [\n                            {\n                                guard: \"is busy\",\n                                reenter: !0\n                            },\n                            {\n                                target: \"syncing\"\n                            }\n                        ]\n                    },\n                    on: {\n                        \"update value\": [\n                            {\n                                actions: [\n                                    \"assign pending value\"\n                                ]\n                            }\n                        ]\n                    }\n                },\n                syncing: {\n                    always: {\n                        guard: \"pending value equals previous value\",\n                        target: \"idle\",\n                        actions: [\n                            \"clear pending value\",\n                            \"assign initial value synced\"\n                        ]\n                    },\n                    invoke: {\n                        src: \"sync value\",\n                        id: \"sync value\",\n                        input: ({ context })=>({\n                                context: {\n                                    keyGenerator: context.keyGenerator,\n                                    previousValue: context.previousValue,\n                                    readOnly: context.readOnly,\n                                    schema: context.schema\n                                },\n                                slateEditor: context.slateEditor,\n                                streamBlocks: !context.initialValueSynced,\n                                value: context.pendingValue\n                            })\n                    },\n                    on: {\n                        \"update value\": {\n                            actions: [\n                                \"assign pending value\"\n                            ]\n                        },\n                        patch: {\n                            actions: [\n                                (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                            ]\n                        },\n                        \"invalid value\": {\n                            actions: [\n                                (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                            ]\n                        },\n                        \"value changed\": {\n                            actions: [\n                                (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                            ]\n                        },\n                        \"done syncing\": [\n                            {\n                                guard: \"value changed while syncing\",\n                                actions: [\n                                    \"assign previous value\",\n                                    \"assign initial value synced\"\n                                ],\n                                reenter: !0\n                            },\n                            {\n                                target: \"idle\",\n                                actions: [\n                                    \"clear pending value\",\n                                    \"assign previous value\",\n                                    \"assign initial value synced\"\n                                ]\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}), debug$i = debugWithName(\"hook:useSyncValue\");\nasync function updateValue({ context, sendBack, slateEditor, streamBlocks, value }) {\n    let isChanged = !1, isValid = !0;\n    const hadSelection = !!slateEditor.selection;\n    if ((!value || value.length === 0) && (debug$i(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, ()=>{\n        withoutSaving(slateEditor, ()=>{\n            withoutPatching(slateEditor, ()=>{\n                hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor);\n                const childrenLength = slateEditor.children.length;\n                slateEditor.children.forEach((_, index)=>{\n                    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n                        at: [\n                            childrenLength - 1 - index\n                        ]\n                    });\n                }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n                    decorators: []\n                }), {\n                    at: [\n                        0\n                    ]\n                }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [\n                    0,\n                    0\n                ]);\n            });\n        });\n    }), isChanged = !0), value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n            schemaTypes: context.schema\n        });\n        await new Promise((resolve)=>{\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, ()=>{\n                withRemoteChanges(slateEditor, ()=>{\n                    withoutPatching(slateEditor, async ()=>{\n                        const childrenLength = slateEditor.children.length;\n                        if (slateValueFromProps.length < childrenLength) {\n                            for(let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n                                at: [\n                                    i\n                                ]\n                            });\n                            isChanged = !0;\n                        }\n                        for await (const [currentBlock, currentBlockIndex] of getBlocks({\n                            slateValue: slateValueFromProps,\n                            streamBlocks\n                        })){\n                            const { blockChanged, blockValid } = syncBlock({\n                                context,\n                                sendBack,\n                                block: currentBlock,\n                                index: currentBlockIndex,\n                                slateEditor,\n                                value\n                            });\n                            isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n                        }\n                        resolve();\n                    });\n                });\n            });\n        });\n    }\n    if (!isValid) {\n        debug$i(\"Invalid value, returning\"), sendBack({\n            type: \"done syncing\",\n            value\n        });\n        return;\n    }\n    if (isChanged) {\n        debug$i(\"Server value changed, syncing editor\");\n        try {\n            slateEditor.onChange();\n        } catch (err) {\n            console.error(err), sendBack({\n                type: \"invalid value\",\n                resolution: null,\n                value\n            }), sendBack({\n                type: \"done syncing\",\n                value\n            });\n            return;\n        }\n        hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, {\n            anchor: {\n                path: [\n                    0,\n                    0\n                ],\n                offset: 0\n            },\n            focus: {\n                path: [\n                    0,\n                    0\n                ],\n                offset: 0\n            }\n        }), slateEditor.onChange()), sendBack({\n            type: \"value changed\",\n            value\n        });\n    } else debug$i(\"Server value and editor value is equal, no need to sync.\");\n    sendBack({\n        type: \"done syncing\",\n        value\n    });\n}\nasync function* getBlocks({ slateValue, streamBlocks }) {\n    let index = 0;\n    for await (const block of slateValue)streamBlocks && await new Promise((resolve)=>setTimeout(resolve, 0)), yield [\n        block,\n        index\n    ], index++;\n}\nfunction syncBlock({ context, sendBack, block, index, slateEditor, value }) {\n    let blockChanged = !1, blockValid = !0;\n    const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlock, oldBlock);\n    return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(slateEditor, ()=>{\n        withRemoteChanges(slateEditor, ()=>{\n            withoutPatching(slateEditor, ()=>{\n                if (hasChanges && blockValid) {\n                    const validationValue = [\n                        value[currentBlockIndex]\n                    ], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n                    !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch)=>{\n                        sendBack({\n                            type: \"patch\",\n                            patch\n                        });\n                    })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$i.enabled && debug$i(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$i.enabled && debug$i(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n                        type: \"invalid value\",\n                        resolution: validation.resolution,\n                        value\n                    }), blockValid = !1);\n                }\n                if (!oldBlock && blockValid) {\n                    const validationValue = [\n                        value[currentBlockIndex]\n                    ], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n                    debug$i.enabled && debug$i(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n                        at: [\n                            currentBlockIndex\n                        ]\n                    }) : (debug$i(\"Invalid\", validation), sendBack({\n                        type: \"invalid value\",\n                        resolution: validation.resolution,\n                        value\n                    }), blockValid = !1);\n                }\n            });\n        });\n    }), {\n        blockChanged,\n        blockValid\n    };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n    const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n    selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n        at: [\n            currentBlockIndex\n        ]\n    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlock, {\n        at: [\n            currentBlockIndex\n        ]\n    }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n    if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlock, {\n        at: [\n            currentBlockIndex\n        ]\n    }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n        const oldBlockChildrenLength = oldBlock.children.length;\n        currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index)=>{\n            const childIndex = oldBlockChildrenLength - 1 - index;\n            childIndex > 0 && (debug$i(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n                at: [\n                    currentBlockIndex,\n                    childIndex\n                ]\n            }));\n        }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex)=>{\n            const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(currentBlockChild.text, oldBlockChild?.text), path = [\n                currentBlockIndex,\n                currentBlockChildIndex\n            ];\n            if (isChildChanged) if (currentBlockChild._key === oldBlockChild?._key) {\n                debug$i(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, currentBlockChild, {\n                    at: path\n                });\n                const isSpanNode = slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n                isSpanNode && isTextChanged ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(slateEditor, {\n                    at: {\n                        focus: {\n                            path,\n                            offset: 0\n                        },\n                        anchor: {\n                            path,\n                            offset: oldBlockChild.text.length\n                        }\n                    }\n                }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n                    at: path\n                }), slateEditor.onChange()) : isSpanNode || (debug$i(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(slateEditor, {\n                    _key: VOID_CHILD_KEY\n                }, {\n                    at: [\n                        ...path,\n                        0\n                    ],\n                    voids: !0\n                }));\n            } else oldBlockChild ? (debug$i(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(slateEditor, {\n                at: [\n                    currentBlockIndex,\n                    currentBlockChildIndex\n                ]\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n                at: [\n                    currentBlockIndex,\n                    currentBlockChildIndex\n                ]\n            }), slateEditor.onChange()) : oldBlockChild || (debug$i(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n                at: [\n                    currentBlockIndex,\n                    currentBlockChildIndex\n                ]\n            }), slateEditor.onChange());\n        });\n    }\n}\nconst debug$h = debugWithName(\"component:PortableTextEditor:Synchronizer\");\nfunction Synchronizer(props) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(40), { editorActor, slateEditor } = props, value = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(props.editorActor, _temp), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(props.editorActor, _temp2);\n    let t0;\n    $[0] !== props.editorActor ? (t0 = props.editorActor.getSnapshot(), $[0] = props.editorActor, $[1] = t0) : t0 = $[1];\n    const t1 = t0.context.keyGenerator;\n    let t2;\n    $[2] !== props.editorActor ? (t2 = props.editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n    }), $[2] = props.editorActor, $[3] = t2) : t2 = $[3];\n    let t3;\n    $[4] !== props.editorActor ? (t3 = props.editorActor.getSnapshot(), $[4] = props.editorActor, $[5] = t3) : t3 = $[5];\n    let t4;\n    $[6] !== slateEditor || $[7] !== t0.context.keyGenerator || $[8] !== t2 || $[9] !== t3.context.schema ? (t4 = {\n        input: {\n            keyGenerator: t1,\n            readOnly: t2,\n            schema: t3.context.schema,\n            slateEditor\n        }\n    }, $[6] = slateEditor, $[7] = t0.context.keyGenerator, $[8] = t2, $[9] = t3.context.schema, $[10] = t4) : t4 = $[10];\n    const syncActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useActorRef)(syncMachine, t4);\n    let t5;\n    $[11] !== editorActor ? (t5 = editorActor.getSnapshot(), $[11] = editorActor, $[12] = t5) : t5 = $[12];\n    let t6;\n    $[13] !== slateEditor || $[14] !== t5.context.schema ? (t6 = {\n        input: {\n            schema: t5.context.schema,\n            slateEditor\n        }\n    }, $[13] = slateEditor, $[14] = t5.context.schema, $[15] = t6) : t6 = $[15];\n    const mutationActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useActorRef)(mutationMachine, t6);\n    let t7, t8;\n    $[16] !== editorActor || $[17] !== mutationActorRef || $[18] !== syncActorRef ? (t7 = ()=>{\n        const subscription = mutationActorRef.on(\"*\", (event)=>{\n            event.type === \"has pending patches\" && syncActorRef.send({\n                type: \"has pending patches\"\n            }), event.type === \"mutation\" && (syncActorRef.send({\n                type: \"mutation\"\n            }), editorActor.send({\n                type: \"mutation\",\n                patches: event.patches,\n                snapshot: event.snapshot,\n                value: event.snapshot\n            }));\n        });\n        return ()=>{\n            subscription.unsubscribe();\n        };\n    }, t8 = [\n        mutationActorRef,\n        syncActorRef,\n        editorActor\n    ], $[16] = editorActor, $[17] = mutationActorRef, $[18] = syncActorRef, $[19] = t7, $[20] = t8) : (t7 = $[19], t8 = $[20]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t7, t8);\n    let t10, t9;\n    $[21] !== props.editorActor || $[22] !== syncActorRef ? (t9 = ()=>{\n        const subscription_0 = syncActorRef.on(\"*\", (event_0)=>{\n            props.editorActor.send(event_0);\n        });\n        return ()=>{\n            subscription_0.unsubscribe();\n        };\n    }, t10 = [\n        props.editorActor,\n        syncActorRef\n    ], $[21] = props.editorActor, $[22] = syncActorRef, $[23] = t10, $[24] = t9) : (t10 = $[23], t9 = $[24]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t9, t10);\n    let t11, t12;\n    $[25] !== readOnly || $[26] !== syncActorRef ? (t11 = ()=>{\n        syncActorRef.send({\n            type: \"update readOnly\",\n            readOnly\n        });\n    }, t12 = [\n        syncActorRef,\n        readOnly\n    ], $[25] = readOnly, $[26] = syncActorRef, $[27] = t11, $[28] = t12) : (t11 = $[27], t12 = $[28]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t11, t12);\n    let t13, t14;\n    $[29] !== syncActorRef || $[30] !== value ? (t13 = ()=>{\n        debug$h(\"Value from props changed, syncing new value\"), syncActorRef.send({\n            type: \"update value\",\n            value\n        });\n    }, t14 = [\n        syncActorRef,\n        value\n    ], $[29] = syncActorRef, $[30] = value, $[31] = t13, $[32] = t14) : (t13 = $[31], t14 = $[32]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t13, t14);\n    let t15;\n    $[33] !== editorActor || $[34] !== mutationActorRef ? (t15 = ()=>{\n        debug$h(\"Subscribing to patch events\");\n        const sub = editorActor.on(\"patch\", (event_1)=>{\n            mutationActorRef.send(event_1);\n        });\n        return ()=>{\n            debug$h(\"Unsubscribing to patch events\"), sub.unsubscribe();\n        };\n    }, $[33] = editorActor, $[34] = mutationActorRef, $[35] = t15) : t15 = $[35];\n    let t16;\n    return $[36] !== editorActor || $[37] !== mutationActorRef || $[38] !== slateEditor ? (t16 = [\n        editorActor,\n        mutationActorRef,\n        slateEditor\n    ], $[36] = editorActor, $[37] = mutationActorRef, $[38] = slateEditor, $[39] = t16) : t16 = $[39], (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t15, t16), null;\n}\nfunction _temp2(s_0) {\n    return s_0.matches({\n        \"edit mode\": \"read only\"\n    });\n}\nfunction _temp(s) {\n    return s.context.value;\n}\nSynchronizer.displayName = \"Synchronizer\";\nconst debug$g = debugWithName(\"operationToPatches\");\nfunction createOperationToPatches(types) {\n    const textBlockName = types.block.name;\n    function insertTextPatch(editor, operation, beforeValue) {\n        debug$g.enabled && debug$g(\"Operation\", JSON.stringify(operation, null, 2));\n        const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];\n        if (!block) throw new Error(\"Could not find block\");\n        const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];\n        if (!textChild) throw new Error(\"Could not find child\");\n        const path = [\n            {\n                _key: block._key\n            },\n            \"children\",\n            {\n                _key: textChild._key\n            },\n            \"text\"\n        ], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.diffMatchPatch)(prevText, textChild.text, path);\n        return patch.value.length ? [\n            patch\n        ] : [];\n    }\n    function removeTextPatch(editor, operation, beforeValue) {\n        const block = editor && editor.children[operation.path[0]];\n        if (!block) throw new Error(\"Could not find block\");\n        const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;\n        if (child && !textChild) throw new Error(\"Expected span\");\n        if (!textChild) throw new Error(\"Could not find child\");\n        const path = [\n            {\n                _key: block._key\n            },\n            \"children\",\n            {\n                _key: textChild._key\n            },\n            \"text\"\n        ], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n        return patch.value ? [\n            patch\n        ] : [];\n    }\n    function setNodePatch(editor, operation) {\n        if (operation.path.length === 1) {\n            const block = editor.children[operation.path[0]];\n            if (typeof block._key != \"string\") throw new Error(\"Expected block to have a _key\");\n            const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_12__({\n                ...editor.children[operation.path[0]],\n                ...operation.newProperties\n            }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_11__);\n            return [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(fromSlateValue([\n                    setNode\n                ], textBlockName)[0], [\n                    {\n                        _key: block._key\n                    }\n                ])\n            ];\n        } else if (operation.path.length === 2) {\n            const block = editor.children[operation.path[0]];\n            if (editor.isTextBlock(block)) {\n                const child = block.children[operation.path[1]];\n                if (child) {\n                    const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n                    return keys.forEach((keyName)=>{\n                        if (keys.length === 1 && keyName === \"_key\") {\n                            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n                            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(val, [\n                                {\n                                    _key: blockKey\n                                },\n                                \"children\",\n                                block.children.indexOf(child),\n                                keyName\n                            ]));\n                        } else {\n                            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_10__(operation.newProperties, keyName);\n                            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(val, [\n                                {\n                                    _key: blockKey\n                                },\n                                \"children\",\n                                {\n                                    _key: childKey\n                                },\n                                keyName\n                            ]));\n                        }\n                    }), patches;\n                }\n                throw new Error(\"Could not find a valid child\");\n            }\n            throw new Error(\"Could not find a valid block\");\n        } else throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n    }\n    function insertNodePatch(editor, operation, beforeValue) {\n        const block = beforeValue[operation.path[0]], isTextBlock = editor.isTextBlock(block);\n        if (operation.path.length === 1) {\n            const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n            return targetKey ? [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([\n                    fromSlateValue([\n                        operation.node\n                    ], textBlockName)[0]\n                ], position, [\n                    {\n                        _key: targetKey\n                    }\n                ])\n            ] : [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.setIfMissing)(beforeValue, []),\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([\n                    fromSlateValue([\n                        operation.node\n                    ], textBlockName)[0]\n                ], \"before\", [\n                    operation.path[0]\n                ])\n            ];\n        } else if (isTextBlock && operation.path.length === 2 && editor.children[operation.path[0]]) {\n            const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n                ...operation.node\n            };\n            !node._type && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n            const child = fromSlateValue([\n                {\n                    _key: \"bogus\",\n                    _type: textBlockName,\n                    children: [\n                        node\n                    ]\n                }\n            ], textBlockName)[0].children[0];\n            return [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([\n                    child\n                ], position, [\n                    {\n                        _key: block._key\n                    },\n                    \"children\",\n                    block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n                        _key: block.children[operation.path[1] - 1]._key\n                    }\n                ])\n            ];\n        }\n        return debug$g(\"Something was inserted into a void block. Not producing editor patches.\"), [];\n    }\n    function splitNodePatch(editor, operation, beforeValue) {\n        const patches = [], splitBlock = editor.children[operation.path[0]];\n        if (!editor.isTextBlock(splitBlock)) throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n        if (operation.path.length === 1) {\n            const oldBlock = beforeValue[operation.path[0]];\n            if (editor.isTextBlock(oldBlock)) {\n                const targetValue = fromSlateValue([\n                    editor.children[operation.path[0] + 1]\n                ], textBlockName)[0];\n                targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([\n                    targetValue\n                ], \"after\", [\n                    {\n                        _key: splitBlock._key\n                    }\n                ])), oldBlock.children.slice(operation.position).forEach((span)=>{\n                    const path = [\n                        {\n                            _key: oldBlock._key\n                        },\n                        \"children\",\n                        {\n                            _key: span._key\n                        }\n                    ];\n                    patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)(path));\n                }));\n            }\n            return patches;\n        }\n        if (operation.path.length === 2) {\n            const splitSpan = splitBlock.children[operation.path[1]];\n            if (editor.isTextSpan(splitSpan)) {\n                const targetSpans = fromSlateValue([\n                    {\n                        ...splitBlock,\n                        children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n                    }\n                ], textBlockName)[0].children;\n                patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)(targetSpans, \"after\", [\n                    {\n                        _key: splitBlock._key\n                    },\n                    \"children\",\n                    {\n                        _key: splitSpan._key\n                    }\n                ])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(splitSpan.text, [\n                    {\n                        _key: splitBlock._key\n                    },\n                    \"children\",\n                    {\n                        _key: splitSpan._key\n                    },\n                    \"text\"\n                ]));\n            }\n            return patches;\n        }\n        return patches;\n    }\n    function removeNodePatch(editor, operation, beforeValue) {\n        const block = beforeValue[operation.path[0]];\n        if (operation.path.length === 1) {\n            if (block && block._key) return [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                    {\n                        _key: block._key\n                    }\n                ])\n            ];\n            throw new Error(\"Block not found\");\n        } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n            const spanToRemove = block.children[operation.path[1]];\n            return spanToRemove ? block.children.filter((span)=>span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                    {\n                        _key: block._key\n                    },\n                    \"children\",\n                    {\n                        _key: spanToRemove._key\n                    }\n                ])\n            ] : (debug$g(\"Span not found in editor trying to remove node\"), []);\n        } else return debug$g(\"Not creating patch inside object block\"), [];\n    }\n    function mergeNodePatch(editor, operation, beforeValue) {\n        const patches = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];\n        if (operation.path.length === 1) if (block?._key) {\n            const newBlock = fromSlateValue([\n                editor.children[operation.path[0] - 1]\n            ], textBlockName)[0];\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(newBlock, [\n                {\n                    _key: newBlock._key\n                }\n            ])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                {\n                    _key: block._key\n                }\n            ]));\n        } else throw new Error(\"Target key not found!\");\n        else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {\n            const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n            updatedSpan && (block.children.filter((span)=>span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.set)(updatedSpan.text, [\n                {\n                    _key: block._key\n                },\n                \"children\",\n                {\n                    _key: updatedSpan._key\n                },\n                \"text\"\n            ])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span)=>span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                {\n                    _key: block._key\n                },\n                \"children\",\n                {\n                    _key: removedSpan._key\n                }\n            ])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n        } else debug$g(\"Void nodes can't be merged, not creating any patches\");\n        return patches;\n    }\n    function moveNodePatch(editor, operation, beforeValue) {\n        const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n        if (!targetBlock) return patches;\n        if (operation.path.length === 1) {\n            const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                {\n                    _key: block._key\n                }\n            ])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([\n                fromSlateValue([\n                    block\n                ], textBlockName)[0]\n            ], position, [\n                {\n                    _key: targetBlock._key\n                }\n            ]));\n        } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {\n            const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([\n                block\n            ], textBlockName)[0].children[operation.path[1]];\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([\n                {\n                    _key: block._key\n                },\n                \"children\",\n                {\n                    _key: child._key\n                }\n            ])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)([\n                childToInsert\n            ], position, [\n                {\n                    _key: targetBlock._key\n                },\n                \"children\",\n                {\n                    _key: targetChild._key\n                }\n            ]));\n        }\n        return patches;\n    }\n    return {\n        insertNodePatch,\n        insertTextPatch,\n        mergeNodePatch,\n        moveNodePatch,\n        removeNodePatch,\n        removeTextPatch,\n        setNodePatch,\n        splitNodePatch\n    };\n}\nfunction createWithEventListeners(editorActor, subscriptions) {\n    return function(editor) {\n        return editorActor.getSnapshot().context.maxBlocks !== void 0 || (subscriptions.push(()=>{\n            const subscription = editorActor.on(\"*\", (event)=>{\n                switch(event.type){\n                    case \"annotation.add\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"annotation.add\",\n                                    annotation: event.annotation\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"annotation.remove\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"annotation.remove\",\n                                    annotation: event.annotation\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"annotation.toggle\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"annotation.toggle\",\n                                    annotation: event.annotation\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"blur\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"blur\"\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"decorator.add\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"decorator.add\",\n                                    decorator: event.decorator\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"decorator.remove\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"decorator.remove\",\n                                    decorator: event.decorator\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"decorator.toggle\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"decorator.toggle\",\n                                    decorator: event.decorator\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"focus\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"focus\"\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"insert.block object\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"insert.block object\",\n                                    placement: event.placement,\n                                    blockObject: event.blockObject\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"insert.inline object\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"insert.inline object\",\n                                    inlineObject: event.inlineObject\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"list item.toggle\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"list item.toggle\",\n                                    listItem: event.listItem\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                    case \"style.toggle\":\n                        {\n                            editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"style.toggle\",\n                                    style: event.style\n                                },\n                                editor\n                            });\n                            break;\n                        }\n                }\n            });\n            return ()=>{\n                subscription.unsubscribe();\n            };\n        }), editor.addMark = (mark)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"decorator.add\",\n                    decorator: mark\n                },\n                editor\n            });\n        }, editor.removeMark = (mark)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"decorator.remove\",\n                    decorator: mark\n                },\n                editor\n            });\n        }, editor.deleteBackward = (unit)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"delete.backward\",\n                    unit\n                },\n                editor\n            });\n        }, editor.deleteForward = (unit)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"delete.forward\",\n                    unit\n                },\n                editor\n            });\n        }, editor.insertBreak = ()=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"insert.break\"\n                },\n                editor\n            });\n        }, editor.insertSoftBreak = ()=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"insert.soft break\"\n                },\n                editor\n            });\n        }, editor.insertText = (text, options)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"insert.text\",\n                    text,\n                    options\n                },\n                editor\n            });\n        }), editor;\n    };\n}\nfunction createWithMaxBlocks(editorActor) {\n    return function(editor) {\n        const { apply: apply2 } = editor;\n        return editor.apply = (operation)=>{\n            if (editorActor.getSnapshot().matches({\n                \"edit mode\": \"read only\"\n            })) {\n                apply2(operation);\n                return;\n            }\n            if (isChangingRemotely(editor)) {\n                apply2(operation);\n                return;\n            }\n            if (isUndoing(editor) || isRedoing(editor)) {\n                apply2(operation);\n                return;\n            }\n            const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n            rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n        }, editor;\n    };\n}\nfunction createWithObjectKeys(editorActor, schemaTypes) {\n    return function(editor) {\n        const { apply: apply2, normalizeNode } = editor;\n        return editor.apply = (operation)=>{\n            if (isChangingRemotely(editor)) {\n                apply2(operation);\n                return;\n            }\n            if (isUndoing(editor) || isRedoing(editor)) {\n                apply2(operation);\n                return;\n            }\n            if (operation.type === \"split_node\") {\n                apply2({\n                    ...operation,\n                    properties: {\n                        ...operation.properties,\n                        _key: editorActor.getSnapshot().context.keyGenerator()\n                    }\n                });\n                return;\n            }\n            if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(operation.node)) {\n                apply2({\n                    ...operation,\n                    node: {\n                        ...operation.node,\n                        _key: editorActor.getSnapshot().context.keyGenerator()\n                    }\n                });\n                return;\n            }\n            apply2(operation);\n        }, editor.normalizeNode = (entry)=>{\n            const [node, path] = entry;\n            if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node) && node._type === schemaTypes.block.name) {\n                if (!node._key) {\n                    editorActor.send({\n                        type: \"normalizing\"\n                    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        _key: editorActor.getSnapshot().context.keyGenerator()\n                    }, {\n                        at: path\n                    }), editorActor.send({\n                        type: \"done normalizing\"\n                    });\n                    return;\n                }\n                for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))if (!child._key) {\n                    editorActor.send({\n                        type: \"normalizing\"\n                    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        _key: editorActor.getSnapshot().context.keyGenerator()\n                    }, {\n                        at: childPath\n                    }), editorActor.send({\n                        type: \"done normalizing\"\n                    });\n                    return;\n                }\n            }\n            normalizeNode(entry);\n        }, editor;\n    };\n}\nconst debug$f = debugWithName(\"applyPatches\"), debugVerbose$2 = debug$f.enabled && !0;\nfunction createApplyPatch(schemaTypes) {\n    return (editor, patch)=>{\n        let changed = !1;\n        debugVerbose$2 && (debug$f(`\n\nNEW PATCH =============================================================`), debug$f(JSON.stringify(patch, null, 2)));\n        try {\n            switch(patch.type){\n                case \"insert\":\n                    changed = insertPatch(editor, patch, schemaTypes);\n                    break;\n                case \"unset\":\n                    changed = unsetPatch(editor, patch);\n                    break;\n                case \"set\":\n                    changed = setPatch(editor, patch);\n                    break;\n                case \"diffMatchPatch\":\n                    changed = diffMatchPatch(editor, patch);\n                    break;\n                default:\n                    debug$f(\"Unhandled patch\", patch.type);\n            }\n        } catch (err) {\n            console.error(err);\n        }\n        return changed;\n    };\n}\nfunction diffMatchPatch(editor, patch) {\n    const { block, child, childPath } = findBlockAndChildFromPath(editor, patch.path);\n    if (!block) return debug$f(\"Block not found\"), !1;\n    if (!child || !childPath) return debug$f(\"Child not found\"), !1;\n    if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child)) return !1;\n    const patches = parse(patch.value), [newValue] = apply(patches, child.text, {\n        allowExceedingIndices: !0\n    }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);\n    debugState(editor, \"before\");\n    let offset = 0;\n    for (const [op, text] of diff$1)op === DIFF_INSERT ? (editor.apply({\n        type: \"insert_text\",\n        path: childPath,\n        offset,\n        text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n        type: \"remove_text\",\n        path: childPath,\n        offset,\n        text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n    return debugState(editor, \"after\"), !0;\n}\nfunction insertPatch(editor, patch, schemaTypes) {\n    const { block: targetBlock, child: targetChild, blockPath: targetBlockPath, childPath: targetChildPath } = findBlockAndChildFromPath(editor, patch.path);\n    if (!targetBlock || !targetBlockPath) return debug$f(\"Block not found\"), !1;\n    if (patch.path.length > 1 && patch.path[1] !== \"children\") return debug$f(\"Ignoring patch targeting void value\"), !1;\n    if (patch.path.length === 1) {\n        const { items: items2, position: position2 } = patch, blocksToInsert = toSlateValue(items2, {\n            schemaTypes\n        }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex;\n        return debug$f(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, blocksToInsert, {\n            at: [\n                normalizedIdx2\n            ]\n        }), debugState(editor, \"after\"), !0;\n    }\n    const { items, position } = patch;\n    if (!targetChild || !targetChildPath) return debug$f(\"Child not found\"), !1;\n    const childrenToInsert = targetBlock && toSlateValue([\n        {\n            ...targetBlock,\n            children: items\n        }\n    ], {\n        schemaTypes\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetChildIndex = targetChildPath[1], normalizedIdx = position === \"after\" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [\n        targetChildPath[0],\n        normalizedIdx\n    ];\n    return debug$f(`Inserting children at path ${childInsertPath}`), debugState(editor, \"before\"), childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n        at: childInsertPath\n    }), debugState(editor, \"after\"), !0;\n}\nfunction setPatch(editor, patch) {\n    let value = patch.value;\n    typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n    const { block, blockPath, child, childPath } = findBlockAndChildFromPath(editor, patch.path);\n    if (!block) return debug$f(\"Block not found\"), !1;\n    const isTextBlock = editor.isTextBlock(block);\n    if (isTextBlock && patch.path.length > 1 && patch.path[1] !== \"children\") return debug$f(\"Ignoring setting void value\"), !1;\n    if (debugState(editor, \"before\"), isTextBlock && child && childPath) {\n        if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(value) && slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child)) {\n            const newText = child.text;\n            value.text !== newText && (debug$f(\"Setting text property\"), editor.apply({\n                type: \"remove_text\",\n                path: childPath,\n                offset: 0,\n                text: newText\n            }), editor.apply({\n                type: \"insert_text\",\n                path: childPath,\n                offset: 0,\n                text: value.text\n            }), editor.onChange());\n        } else debug$f(\"Setting non-text property\"), editor.apply({\n            type: \"set_node\",\n            path: childPath,\n            properties: {},\n            newProperties: value\n        });\n        return !0;\n    } else if (slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && patch.path.length === 1 && blockPath) {\n        debug$f(\"Setting block property\");\n        const { children, ...nextRest } = value, { children: prevChildren, ...prevRest } = block || {\n            children: void 0\n        };\n        editor.apply({\n            type: \"set_node\",\n            path: blockPath,\n            properties: {\n                ...prevRest\n            },\n            newProperties: nextRest\n        }), debug$f(\"Setting children\"), block.children.forEach((c2, cIndex)=>{\n            editor.apply({\n                type: \"remove_node\",\n                path: blockPath.concat(block.children.length - 1 - cIndex),\n                node: c2\n            });\n        }), Array.isArray(children) && children.forEach((c2, cIndex)=>{\n            editor.apply({\n                type: \"insert_node\",\n                path: blockPath.concat(cIndex),\n                node: c2\n            });\n        });\n    } else if (block && \"value\" in block) {\n        const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.applyAll)([\n            block.value\n        ], [\n            patch\n        ])[0];\n        return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            ...block,\n            value: newVal\n        }, {\n            at: blockPath\n        }), !0;\n    }\n    return debugState(editor, \"after\"), !0;\n}\nfunction unsetPatch(editor, patch) {\n    if (patch.path.length === 0) {\n        debug$f(\"Removing everything\"), debugState(editor, \"before\");\n        const previousSelection = editor.selection;\n        return slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.children.forEach((_child, i)=>{\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n                at: [\n                    i\n                ]\n            });\n        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n            decorators: []\n        })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n            anchor: {\n                path: [\n                    0,\n                    0\n                ],\n                offset: 0\n            },\n            focus: {\n                path: [\n                    0,\n                    0\n                ],\n                offset: 0\n            }\n        }), editor.onChange(), debugState(editor, \"after\"), !0;\n    }\n    const { block, blockPath, child, childPath } = findBlockAndChildFromPath(editor, patch.path);\n    if (patch.path.length === 1) {\n        if (!block || !blockPath) return debug$f(\"Block not found\"), !1;\n        const blockIndex = blockPath[0];\n        return debug$f(`Removing block at path [${blockIndex}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: [\n                blockIndex\n            ]\n        }), debugState(editor, \"after\"), !0;\n    }\n    return editor.isTextBlock(block) && patch.path[1] === \"children\" && patch.path.length === 3 ? !child || !childPath ? (debug$f(\"Child not found\"), !1) : (debug$f(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, \"before\"), debugVerbose$2 && debug$f(`Removing child at path ${JSON.stringify(childPath)}`), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n        at: childPath\n    }), debugState(editor, \"after\"), !0) : !1;\n}\nfunction isKeyedSegment(segment) {\n    return typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction debugState(editor, stateName) {\n    debugVerbose$2 && (debug$f(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$f(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));\n}\nfunction findBlockFromPath(editor, path) {\n    let blockIndex = -1;\n    const block = editor.children.find((node, index)=>{\n        const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];\n        return isMatch && (blockIndex = index), isMatch;\n    });\n    return block ? {\n        block,\n        path: [\n            blockIndex\n        ]\n    } : {};\n}\nfunction findBlockAndChildFromPath(editor, path) {\n    const { block, path: blockPath } = findBlockFromPath(editor, path);\n    if (!(slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && path[1] === \"children\")) return {\n        block,\n        blockPath,\n        child: void 0,\n        childPath: void 0\n    };\n    let childIndex = -1;\n    const child = block.children.find((node, index)=>{\n        const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];\n        return isMatch && (childIndex = index), isMatch;\n    });\n    return child ? {\n        block,\n        child,\n        blockPath,\n        childPath: blockPath?.concat(childIndex)\n    } : {\n        block,\n        blockPath,\n        child: void 0,\n        childPath: void 0\n    };\n}\nconst debug$e = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({ editorActor, patchFunctions, schemaTypes, subscriptions }) {\n    let previousChildren;\n    const applyPatch = createApplyPatch(schemaTypes);\n    return function(editor) {\n        IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [\n            ...editor.children\n        ];\n        const { apply: apply2 } = editor;\n        let bufferedPatches = [];\n        const handleBufferedRemotePatches = ()=>{\n            if (bufferedPatches.length === 0) return;\n            const patches = bufferedPatches;\n            bufferedPatches = [];\n            let changed = !1;\n            withRemoteChanges(editor, ()=>{\n                slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, ()=>{\n                    withoutPatching(editor, ()=>{\n                        withoutSaving(editor, ()=>{\n                            patches.forEach((patch)=>{\n                                debug$e.enabled && debug$e(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);\n                            });\n                        });\n                    });\n                }), changed && (editor.normalize(), editor.onChange());\n            });\n        }, handlePatches = ({ patches })=>{\n            const remotePatches = patches.filter((p)=>p.origin !== \"local\");\n            remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n        };\n        return subscriptions.push(()=>{\n            debug$e(\"Subscribing to remote patches\");\n            const sub = editorActor.on(\"patches\", handlePatches);\n            return ()=>{\n                debug$e(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n            };\n        }), editor.apply = (operation)=>{\n            let patches = [];\n            previousChildren = editor.children;\n            const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes);\n            apply2(operation);\n            const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes);\n            if (!isPatching(editor)) return editor;\n            switch(editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.insert)(previousChildren, \"before\", [\n                0\n            ])), operation.type){\n                case \"insert_text\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.insertTextPatch(editor, operation, previousChildren)\n                    ];\n                    break;\n                case \"remove_text\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.removeTextPatch(editor, operation, previousChildren)\n                    ];\n                    break;\n                case \"remove_node\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.removeNodePatch(editor, operation, previousChildren)\n                    ];\n                    break;\n                case \"split_node\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.splitNodePatch(editor, operation, previousChildren)\n                    ];\n                    break;\n                case \"insert_node\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.insertNodePatch(editor, operation, previousChildren)\n                    ];\n                    break;\n                case \"set_node\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.setNodePatch(editor, operation, previousChildren)\n                    ];\n                    break;\n                case \"merge_node\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.mergeNodePatch(editor, operation, previousChildren)\n                    ];\n                    break;\n                case \"move_node\":\n                    patches = [\n                        ...patches,\n                        ...patchFunctions.moveNodePatch(editor, operation, previousChildren)\n                    ];\n                    break;\n            }\n            return !editorWasEmpty && editorIsEmpty && [\n                \"merge_node\",\n                \"set_node\",\n                \"remove_text\",\n                \"remove_node\"\n            ].includes(operation.type) && (patches = [\n                ...patches,\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.unset)([])\n            ], editorActor.send({\n                type: \"unset\",\n                previousValue: fromSlateValue(previousChildren, schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n            })), editorWasEmpty && patches.length > 0 && (patches = [\n                (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_20__.setIfMissing)([], []),\n                ...patches\n            ]), patches.length > 0 && patches.forEach((patch)=>{\n                editorActor.send({\n                    type: \"patch\",\n                    patch: {\n                        ...patch,\n                        origin: \"local\"\n                    }\n                });\n            }), editor;\n        }, editor;\n    };\n}\nconst debug$d = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n    return function(editor) {\n        const { apply: apply2 } = editor;\n        return editor.apply = (op)=>{\n            if (editorActor.getSnapshot().matches({\n                \"edit mode\": \"read only\"\n            })) {\n                apply2(op);\n                return;\n            }\n            if (isChangingRemotely(editor)) {\n                apply2(op);\n                return;\n            }\n            if (isUndoing(editor) || isRedoing(editor)) {\n                apply2(op);\n                return;\n            }\n            if (op.type === \"remove_node\") {\n                const node = op.node;\n                if (op.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isVoid(editor, node)) {\n                    const nextPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(op.path);\n                    editor.children[nextPath[0]] || (debug$d(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n                        decorators: []\n                    })));\n                }\n            }\n            apply2(op);\n        }, editor;\n    };\n}\nconst debug$c = debugWithName(\"plugin:withPortableTextBlockStyle\");\nfunction createWithPortableTextBlockStyle(editorActor, types) {\n    const defaultStyle = types.styles[0].value;\n    return function(editor) {\n        const { normalizeNode } = editor;\n        return editor.normalizeNode = (nodeEntry)=>{\n            const [, path] = nodeEntry;\n            for (const op of editor.operations)if (op.type === \"split_node\" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(path, op.path)) {\n                const [child] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [\n                    op.path[0] + 1,\n                    0\n                ]);\n                if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && child.text === \"\") {\n                    debug$c(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({\n                        type: \"normalizing\"\n                    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        style: defaultStyle\n                    }, {\n                        at: [\n                            op.path[0] + 1\n                        ],\n                        voids: !1\n                    }), editorActor.send({\n                        type: \"done normalizing\"\n                    });\n                    return;\n                }\n            }\n            normalizeNode(nodeEntry);\n        }, editor;\n    };\n}\nfunction isPortableTextSpan(node) {\n    return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark)=>typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n    return(// A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def)=>typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child)=>typeof child == \"object\" && \"_type\" in child));\n}\nfunction getPreviousSpan({ editor, blockPath, spanPath }) {\n    let previousSpan;\n    for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n        reverse: !0\n    }))if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, spanPath)) {\n        previousSpan = child;\n        break;\n    }\n    return previousSpan;\n}\nfunction getNextSpan({ editor, blockPath, spanPath }) {\n    let nextSpan;\n    for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, spanPath)) {\n        nextSpan = child;\n        break;\n    }\n    return nextSpan;\n}\nconst debug$b = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor, types) {\n    return function(editor) {\n        const { apply: apply2, normalizeNode } = editor, decorators = types.decorators.map((t)=>t.value);\n        return editor.normalizeNode = (nodeEntry)=>{\n            const [node, path] = nodeEntry;\n            if (editor.isTextBlock(node)) {\n                const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path);\n                for (const [child, childPath] of children){\n                    const nextNode = node.children[childPath[1] + 1];\n                    if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark)=>nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark)=>child.marks?.includes(mark))) {\n                        debug$b(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n                            type: \"normalizing\"\n                        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.mergeNodes(editor, {\n                            at: [\n                                childPath[0],\n                                childPath[1] + 1\n                            ],\n                            voids: !0\n                        }), editorActor.send({\n                            type: \"done normalizing\"\n                        });\n                        return;\n                    }\n                }\n            }\n            if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n                debug$b(\"Adding .markDefs to block node\"), editorActor.send({\n                    type: \"normalizing\"\n                }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    markDefs: []\n                }, {\n                    at: path\n                }), editorActor.send({\n                    type: \"done normalizing\"\n                });\n                return;\n            }\n            if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n                debug$b(\"Adding .marks to span node\"), editorActor.send({\n                    type: \"normalizing\"\n                }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    marks: []\n                }, {\n                    at: path\n                }), editorActor.send({\n                    type: \"done normalizing\"\n                });\n                return;\n            }\n            if (editor.isTextSpan(node)) {\n                const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath), decorators2 = types.decorators.map((decorator)=>decorator.value), annotations = node.marks?.filter((mark)=>!decorators2.includes(mark));\n                if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n                    debug$b(\"Removing annotations from empty span node\"), editorActor.send({\n                        type: \"normalizing\"\n                    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        marks: node.marks?.filter((mark)=>decorators2.includes(mark))\n                    }, {\n                        at: path\n                    }), editorActor.send({\n                        type: \"done normalizing\"\n                    });\n                    return;\n                }\n            }\n            if (editor.isTextBlock(node)) {\n                const decorators2 = types.decorators.map((decorator)=>decorator.value);\n                for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, path))if (editor.isTextSpan(child)) {\n                    const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark)=>!decorators2.includes(mark) && !node.markDefs?.find((def)=>def._key === mark));\n                    if (orphanedAnnotations.length > 0) {\n                        debug$b(\"Removing orphaned annotations from span node\"), editorActor.send({\n                            type: \"normalizing\"\n                        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                            marks: marks.filter((mark)=>!orphanedAnnotations.includes(mark))\n                        }, {\n                            at: childPath\n                        }), editorActor.send({\n                            type: \"done normalizing\"\n                        });\n                        return;\n                    }\n                }\n            }\n            if (editor.isTextSpan(node)) {\n                const blockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, blockPath);\n                if (editor.isTextBlock(block)) {\n                    const decorators2 = types.decorators.map((decorator)=>decorator.value), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark)=>!decorators2.includes(mark) && !block.markDefs?.find((def)=>def._key === mark));\n                    if (orphanedAnnotations.length > 0) {\n                        debug$b(\"Removing orphaned annotations from span node\"), editorActor.send({\n                            type: \"normalizing\"\n                        }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                            marks: marks.filter((mark)=>!orphanedAnnotations.includes(mark))\n                        }, {\n                            at: path\n                        }), editorActor.send({\n                            type: \"done normalizing\"\n                        });\n                        return;\n                    }\n                }\n            }\n            if (editor.isTextBlock(node)) {\n                const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n                for (const markDef of markDefs)markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n                if (markDefs.length !== newMarkDefs.length) {\n                    debug$b(\"Removing duplicate markDefs\"), editorActor.send({\n                        type: \"normalizing\"\n                    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        markDefs: newMarkDefs\n                    }, {\n                        at: path\n                    }), editorActor.send({\n                        type: \"done normalizing\"\n                    });\n                    return;\n                }\n            }\n            if (editor.isTextBlock(node) && !editor.operations.some((op)=>op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n                const newMarkDefs = (node.markDefs || []).filter((def)=>node.children.find((child)=>slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n                if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(newMarkDefs, node.markDefs)) {\n                    debug$b(\"Removing markDef not in use\"), editorActor.send({\n                        type: \"normalizing\"\n                    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        markDefs: newMarkDefs\n                    }, {\n                        at: path\n                    }), editorActor.send({\n                        type: \"done normalizing\"\n                    });\n                    return;\n                }\n            }\n            normalizeNode(nodeEntry);\n        }, editor.apply = (op)=>{\n            if (isChangingRemotely(editor)) {\n                apply2(op);\n                return;\n            }\n            if (isUndoing(editor) || isRedoing(editor)) {\n                apply2(op);\n                return;\n            }\n            if (op.type === \"set_selection\" && slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n                const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n                    anchor: op.properties.anchor,\n                    focus: op.properties.focus\n                }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed({\n                    anchor: op.newProperties.anchor,\n                    focus: op.newProperties.focus\n                });\n                if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n                    const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                        mode: \"lowest\",\n                        at: op.properties.focus,\n                        match: (n)=>editor.isTextSpan(n),\n                        voids: !1\n                    }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                        mode: \"lowest\",\n                        at: op.newProperties.focus,\n                        match: (n)=>editor.isTextSpan(n),\n                        voids: !1\n                    }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n                    if (movedToNextSpan || movedToPreviousSpan) return;\n                }\n            }\n            if (op.type === \"insert_node\") {\n                const { selection } = editor;\n                if (selection) {\n                    const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n                        depth: 1\n                    }), previousSpan = getPreviousSpan({\n                        editor,\n                        blockPath,\n                        spanPath: op.path\n                    }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark)=>!decorators.includes(mark)) : [], nextSpan = getNextSpan({\n                        editor,\n                        blockPath,\n                        spanPath: [\n                            op.path[0],\n                            op.path[1] - 1\n                        ]\n                    }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark)=>!decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation)=>!nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n                    if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark)=>annotationsEnding.includes(mark))) {\n                        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                            ...op.node,\n                            marks: op.node.marks?.filter((mark)=>!annotationsEnding.includes(mark)) ?? []\n                        });\n                        return;\n                    }\n                    const annotationsStarting = nextSpanAnnotations?.filter((annotation)=>!previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n                    if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark)=>annotationsStarting.includes(mark))) {\n                        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                            ...op.node,\n                            marks: op.node.marks?.filter((mark)=>!annotationsStarting.includes(mark)) ?? []\n                        });\n                        return;\n                    }\n                    const nextSpanDecorators = nextSpan?.marks?.filter((mark)=>decorators.includes(mark)) ?? [];\n                    if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {\n                        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                            ...op.node,\n                            marks: nextSpanDecorators\n                        });\n                        return;\n                    }\n                }\n            }\n            if (op.type === \"insert_text\") {\n                const { selection } = editor, collapsedSelection = selection ? slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) : !1;\n                if (selection && collapsedSelection) {\n                    const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n                        depth: 1\n                    }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                        mode: \"lowest\",\n                        at: selection.focus,\n                        match: (n)=>editor.isTextSpan(n),\n                        voids: !1\n                    }))[0] ?? [\n                        void 0,\n                        void 0\n                    ], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter((mark)=>decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({\n                        editor,\n                        blockPath,\n                        spanPath\n                    }), nextSpan = getNextSpan({\n                        editor,\n                        blockPath,\n                        spanPath\n                    }), nextSpanAnnotations = nextSpan?.marks?.filter((mark)=>!decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark)=>!decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.marks?.some((mark)=>!decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.marks?.filter((mark)=>!decorators.includes(mark)).every((mark)=>marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark)=>!decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark)=>marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark)=>nextSpanAnnotations?.includes(mark));\n                    if (spanHasAnnotations && !spanIsEmpty) {\n                        if (atTheBeginningOfSpan) {\n                            if (previousSpanHasSameMarks) {\n                                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                                    _type: \"span\",\n                                    _key: editorActor.getSnapshot().context.keyGenerator(),\n                                    text: op.text,\n                                    marks: previousSpan?.marks ?? []\n                                });\n                                return;\n                            } else if (previousSpanHasSameAnnotations) {\n                                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                                    _type: \"span\",\n                                    _key: editorActor.getSnapshot().context.keyGenerator(),\n                                    text: op.text,\n                                    marks: previousSpan?.marks ?? []\n                                });\n                                return;\n                            } else if (previousSpanHasSameAnnotation) {\n                                apply2(op);\n                                return;\n                            } else if (!previousSpan) {\n                                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                                    _type: \"span\",\n                                    _key: editorActor.getSnapshot().context.keyGenerator(),\n                                    text: op.text,\n                                    marks: []\n                                });\n                                return;\n                            }\n                        }\n                        if (atTheEndOfSpan) {\n                            if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {\n                                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                                    _type: \"span\",\n                                    _key: editorActor.getSnapshot().context.keyGenerator(),\n                                    text: op.text,\n                                    marks: nextSpan?.marks ?? []\n                                });\n                                return;\n                            }\n                            if (!nextSpan) {\n                                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                                    _type: \"span\",\n                                    _key: editorActor.getSnapshot().context.keyGenerator(),\n                                    text: op.text,\n                                    marks: []\n                                });\n                                return;\n                            }\n                        }\n                    }\n                    if (atTheBeginningOfSpan && !spanIsEmpty && previousSpan) {\n                        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, {\n                            _type: \"span\",\n                            _key: editorActor.getSnapshot().context.keyGenerator(),\n                            text: op.text,\n                            marks: previousSpanHasAnnotations ? [] : (previousSpan.marks ?? []).filter((mark)=>decorators.includes(mark))\n                        });\n                        return;\n                    }\n                }\n            }\n            if (op.type === \"remove_text\") {\n                const { selection } = editor;\n                if (selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n                    const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n                        depth: 1\n                    }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                        mode: \"lowest\",\n                        at: {\n                            path: op.path,\n                            offset: op.offset\n                        },\n                        match: (n)=>editor.isTextSpan(n),\n                        voids: !1\n                    }))[0] ?? [\n                        void 0,\n                        void 0\n                    ];\n                    if (span && block && isPortableTextBlock(block)) {\n                        const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark)=>markDefs.find((markDef)=>markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n                            editor,\n                            blockPath,\n                            spanPath\n                        }), nextSpan = getNextSpan({\n                            editor,\n                            blockPath,\n                            spanPath\n                        }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark)=>!decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark)=>!decorators.includes(mark) && marks.includes(mark)) : !1;\n                        if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n                            const marksWithoutAnnotationMarks = (({\n                                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n                            }).marks || []).filter((mark)=>decorators.includes(mark));\n                            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, ()=>{\n                                apply2(op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                                    marks: marksWithoutAnnotationMarks\n                                }, {\n                                    at: op.path\n                                });\n                            }), editor.onChange();\n                            return;\n                        }\n                    }\n                }\n            }\n            if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === types.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n                const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, [\n                    op.path[0] - 1\n                ]);\n                if (editor.isTextBlock(targetBlock)) {\n                    const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([\n                        ...oldDefs,\n                        ...op.properties.markDefs\n                    ]);\n                    debug$b(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        markDefs: newMarkDefs\n                    }, {\n                        at: targetPath,\n                        voids: !1\n                    }), apply2(op);\n                    return;\n                }\n            }\n            apply2(op);\n        }, editor;\n    };\n}\nconst addDecoratorActionImplementation = ({ action })=>{\n    const editor = action.editor, mark = action.decorator;\n    if (editor.selection) {\n        if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n                match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n                split: !0,\n                hanging: !0\n            });\n            const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(editor.selection) ? [\n                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                    at: editor.selection,\n                    match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n                })\n            ] : [];\n            splitTextNodes.length > 1 && splitTextNodes.every((node)=>node[0].marks?.includes(mark)) ? editor.removeMark(mark) : splitTextNodes.forEach(([node, path])=>{\n                const marks = [\n                    ...(Array.isArray(node.marks) ? node.marks : []).filter((eMark)=>eMark !== mark),\n                    mark\n                ];\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    marks\n                }, {\n                    at: path,\n                    match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n                    split: !0,\n                    hanging: !0\n                });\n            });\n        } else {\n            const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n                depth: 1\n            }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n            if (lonelyEmptySpan) {\n                const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark)=>existingMark !== mark);\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    marks: existingMarks.length === existingMarksWithoutDecorator.length ? [\n                        ...existingMarks,\n                        mark\n                    ] : existingMarksWithoutDecorator\n                }, {\n                    at: blockPath,\n                    match: (node)=>editor.isTextSpan(node)\n                });\n            } else {\n                const existingMarks = {\n                    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n                }.marks || [], marks = {\n                    ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n                    marks: [\n                        ...existingMarks,\n                        mark\n                    ]\n                };\n                editor.marks = marks;\n            }\n        }\n        editor.onChange();\n    }\n}, removeDecoratorActionImplementation = ({ action })=>{\n    const editor = action.editor, mark = action.decorator, { selection } = editor;\n    if (selection) if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        split: !0,\n        hanging: !0\n    }), editor.selection && [\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            at: editor.selection,\n            match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText\n        })\n    ].forEach(([node, path])=>{\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark)=>eMark !== mark),\n            _type: \"span\"\n        }, {\n            at: path\n        });\n    });\n    else {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection, {\n            depth: 1\n        }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n        if (lonelyEmptySpan) {\n            const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark)=>existingMark !== mark);\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                marks: existingMarksWithoutDecorator\n            }, {\n                at: blockPath,\n                match: (node)=>editor.isTextSpan(node)\n            });\n        } else {\n            const existingMarks = {\n                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n            }.marks || [], marks = {\n                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {},\n                marks: existingMarks.filter((eMark)=>eMark !== mark)\n            };\n            editor.marks = {\n                marks: marks.marks,\n                _type: \"span\"\n            };\n        }\n    }\n};\nfunction isDecoratorActive({ editor, decorator }) {\n    if (!editor.selection) return !1;\n    const selectedTextNodes = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n        at: editor.selection\n    }));\n    return selectedTextNodes.length === 0 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection) ? selectedTextNodes.every((n)=>{\n        const [node] = n;\n        return node.marks?.includes(decorator);\n    }) : (({\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n    }).marks || []).includes(decorator);\n}\nconst toggleDecoratorActionImplementation = ({ context, action })=>{\n    isDecoratorActive({\n        editor: action.editor,\n        decorator: action.decorator\n    }) ? removeDecoratorActionImplementation({\n        context,\n        action: {\n            type: \"decorator.remove\",\n            editor: action.editor,\n            decorator: action.decorator\n        }\n    }) : addDecoratorActionImplementation({\n        context,\n        action: {\n            type: \"decorator.add\",\n            editor: action.editor,\n            decorator: action.decorator\n        }\n    });\n}, debug$a = debugWithName(\"plugin:withPortableTextSelections\"), debugVerbose$1 = debug$a.enabled && !1;\nfunction createWithPortableTextSelections(editorActor, types) {\n    let prevSelection = null;\n    return function(editor) {\n        const emitPortableTextSelection = ()=>{\n            if (prevSelection !== editor.selection) {\n                let ptRange = null;\n                if (editor.selection) {\n                    const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n                    if (existing) ptRange = existing;\n                    else {\n                        const value = editor.children;\n                        ptRange = toPortableTextRange(value, editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n                    }\n                }\n                debugVerbose$1 && debug$a(`Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(editor.selection)})`), ptRange ? editorActor.send({\n                    type: \"selection\",\n                    selection: ptRange\n                }) : editorActor.send({\n                    type: \"selection\",\n                    selection: null\n                });\n            }\n            prevSelection = editor.selection;\n        }, { onChange } = editor;\n        return editor.onChange = ()=>{\n            const hasChanges = editor.operations.length > 0;\n            onChange(), hasChanges && !editorActor.getSnapshot().matches({\n                setup: \"setting up\"\n            }) && emitPortableTextSelection();\n        }, editor;\n    };\n}\nconst debug$9 = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({ editorActor, schemaTypes }) {\n    return function(editor) {\n        editor.isTextBlock = (value)=>(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextTextBlock)(value) && value._type === schemaTypes.block.name, editor.isTextSpan = (value)=>(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(value) && value._type === schemaTypes.span.name, editor.isListBlock = (value)=>(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextListBlock)(value) && value._type === schemaTypes.block.name, editor.isVoid = (element)=>schemaTypes.block.name !== element._type && (schemaTypes.blockObjects.map((obj)=>obj.name).includes(element._type) || schemaTypes.inlineObjects.map((obj)=>obj.name).includes(element._type)), editor.isInline = (element)=>schemaTypes.inlineObjects.map((obj)=>obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n        const { normalizeNode } = editor;\n        return editor.normalizeNode = (entry)=>{\n            const [node, path] = entry;\n            if (node._type === void 0 && path.length === 2) {\n                debug$9(\"Setting span type on text node without a type\");\n                const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n                editorActor.send({\n                    type: \"normalizing\"\n                }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    ...span,\n                    _type: schemaTypes.span.name,\n                    _key: key\n                }, {\n                    at: path\n                }), editorActor.send({\n                    type: \"done normalizing\"\n                });\n                return;\n            }\n            if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n                debug$9(\"Setting missing key on child node without a key\");\n                const key = editorActor.getSnapshot().context.keyGenerator();\n                editorActor.send({\n                    type: \"normalizing\"\n                }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    _key: key\n                }, {\n                    at: path\n                }), editorActor.send({\n                    type: \"done normalizing\"\n                });\n                return;\n            }\n            normalizeNode(entry);\n        }, editor;\n    };\n}\nconst debug$8 = debugWithName(\"plugin:withUtils\");\nfunction createWithUtils({ editorActor, schemaTypes }) {\n    return function(editor) {\n        return editor.pteExpandToWord = ()=>{\n            const { selection } = editor;\n            if (selection && !slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(selection)) {\n                const [textNode] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, selection.focus, {\n                    depth: 2\n                });\n                if (!textNode || !slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(textNode) || textNode.text.length === 0) {\n                    debug$8(\"pteExpandToWord: Can't expand to word here\");\n                    return;\n                }\n                const { focus } = selection, focusOffset = focus.offset, charsBefore = textNode.text.slice(0, focusOffset), charsAfter = textNode.text.slice(focusOffset, -1), isEmpty = (str)=>str.match(/\\s/g), whiteSpaceBeforeIndex = charsBefore.split(\"\").reverse().findIndex((str)=>isEmpty(str)), newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0, whiteSpaceAfterIndex = charsAfter.split(\"\").findIndex((obj)=>isEmpty(obj)), newEndOffset = charsBefore.length + (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);\n                if (!(newStartOffset === newEndOffset || Number.isNaN(newStartOffset) || Number.isNaN(newEndOffset))) {\n                    debug$8(\"pteExpandToWord: Expanding to focused word\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n                        anchor: {\n                            ...selection.anchor,\n                            offset: newStartOffset\n                        },\n                        focus: {\n                            ...selection.focus,\n                            offset: newEndOffset\n                        }\n                    });\n                    return;\n                }\n                debug$8(\"pteExpandToWord: Can't expand to word here\");\n            }\n        }, editor.pteCreateTextBlock = (options)=>toSlateValue([\n                {\n                    _type: schemaTypes.block.name,\n                    _key: editorActor.getSnapshot().context.keyGenerator(),\n                    style: schemaTypes.styles[0].value || \"normal\",\n                    ...options.listItem ? {\n                        listItem: options.listItem\n                    } : {},\n                    ...options.level ? {\n                        level: options.level\n                    } : {},\n                    markDefs: [],\n                    children: [\n                        {\n                            _type: \"span\",\n                            _key: editorActor.getSnapshot().context.keyGenerator(),\n                            text: \"\",\n                            marks: options.decorators.filter((decorator)=>schemaTypes.decorators.find(({ value })=>value === decorator))\n                        }\n                    ]\n                }\n            ], {\n                schemaTypes\n            })[0], editor;\n    };\n}\nconst withPlugins = (editor, options)=>{\n    const e = editor, { editorActor } = options, schemaTypes = editorActor.getSnapshot().context.schema, operationToPatches = createOperationToPatches(schemaTypes), withObjectKeys = createWithObjectKeys(editorActor, schemaTypes), withSchemaTypes = createWithSchemaTypes({\n        editorActor,\n        schemaTypes\n    }), withPatches = createWithPatches({\n        editorActor,\n        patchFunctions: operationToPatches,\n        schemaTypes,\n        subscriptions: options.subscriptions\n    }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n        editorActor,\n        blockSchemaType: schemaTypes.block,\n        subscriptions: options.subscriptions\n    }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor, schemaTypes), withPortableTextBlockStyle = createWithPortableTextBlockStyle(editorActor, schemaTypes), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n        editorActor,\n        schemaTypes\n    }), withPortableTextSelections = createWithPortableTextSelections(editorActor, schemaTypes);\n    return createWithEventListeners(editorActor, options.subscriptions)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e)))))))))));\n}, debug$7 = debugWithName(\"component:PortableTextEditor:SlateContainer\"), slateEditors = /* @__PURE__ */ new WeakMap();\nfunction createSlateEditor(config) {\n    const existingSlateEditor = slateEditors.get(config.editorActor);\n    if (existingSlateEditor) return debug$7(\"Reusing existing Slate editor instance\", config.editorActor.id), existingSlateEditor;\n    debug$7(\"Creating new Slate editor instance\", config.editorActor.id);\n    const unsubscriptions = [], subscriptions = [], instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_17__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_15__.createEditor)()), {\n        editorActor: config.editorActor,\n        subscriptions\n    });\n    KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {});\n    for (const subscription of subscriptions)unsubscriptions.push(subscription());\n    const initialValue = [\n        instance.pteCreateTextBlock({\n            decorators: []\n        })\n    ], slateEditor = {\n        instance,\n        initialValue\n    };\n    return slateEditors.set(config.editorActor, slateEditor), slateEditor;\n}\nconst toggleListItemActionImplementation = ({ context, action })=>{\n    isListItemActive({\n        editor: action.editor,\n        listItem: action.listItem\n    }) ? removeListItemActionImplementation({\n        context,\n        action: {\n            ...action,\n            type: \"list item.remove\"\n        }\n    }) : addListItemActionImplementation({\n        context,\n        action: {\n            ...action,\n            type: \"list item.add\"\n        }\n    });\n}, removeListItemActionImplementation = ({ context, action })=>{\n    if (!action.editor.selection) return;\n    const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n            at: action.editor.selection,\n            match: (node)=>guards.isListBlock(node)\n        })\n    ];\n    for (const [, at] of selectedBlocks)slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, [\n        \"listItem\",\n        \"level\"\n    ], {\n        at\n    });\n}, addListItemActionImplementation = ({ context, action })=>{\n    if (!action.editor.selection) return;\n    const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n            at: action.editor.selection,\n            match: (node)=>guards.isTextBlock(node)\n        })\n    ];\n    for (const [, at] of selectedBlocks)slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n        level: 1,\n        listItem: action.listItem\n    }, {\n        at\n    });\n};\nfunction isListItemActive({ editor, listItem }) {\n    if (!editor.selection) return !1;\n    const selectedBlocks = [\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node)=>editor.isTextBlock(node)\n        })\n    ];\n    return selectedBlocks.length > 0 ? selectedBlocks.every(([node])=>editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nconst toggleStyleActionImplementation = ({ context, action })=>{\n    isStyleActive({\n        editor: action.editor,\n        style: action.style\n    }) ? removeStyleActionImplementation({\n        context,\n        action: {\n            ...action,\n            type: \"style.remove\"\n        }\n    }) : addStyleActionImplementation({\n        context,\n        action: {\n            ...action,\n            type: \"style.add\"\n        }\n    });\n}, removeStyleActionImplementation = ({ context, action })=>{\n    if (!action.editor.selection) return;\n    const defaultStyle = context.schema.styles[0].value, guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n            at: action.editor.selection,\n            match: (node)=>guards.isTextBlock(node)\n        })\n    ];\n    for (const [, at] of selectedBlocks)slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n        style: defaultStyle\n    }, {\n        at\n    });\n}, addStyleActionImplementation = ({ context, action })=>{\n    if (!action.editor.selection) return;\n    const guards = (0,_chunks_es_selector_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_23__.createGuards)(context), selectedBlocks = [\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n            at: action.editor.selection,\n            match: (node)=>guards.isTextBlock(node)\n        })\n    ];\n    for (const [, at] of selectedBlocks)slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n        style: action.style\n    }, {\n        at\n    });\n};\nfunction isStyleActive({ editor, style }) {\n    if (!editor.selection) return !1;\n    const selectedBlocks = [\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node)=>editor.isTextBlock(node)\n        })\n    ];\n    return selectedBlocks.length > 0 ? selectedBlocks.every(([node])=>node.style === style) : !1;\n}\nconst debug$6 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n    const types = editorActor.getSnapshot().context.schema;\n    return {\n        focus: ()=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"focus\"\n                },\n                editor\n            });\n        },\n        blur: ()=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"blur\"\n                },\n                editor\n            });\n        },\n        toggleMark: (mark)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                },\n                editor\n            });\n        },\n        toggleList: (listItem)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"list item.toggle\",\n                    listItem\n                },\n                editor\n            });\n        },\n        toggleBlockStyle: (style)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"style.toggle\",\n                    style\n                },\n                editor\n            });\n        },\n        isMarkActive: (mark)=>{\n            try {\n                return isDecoratorActive({\n                    editor,\n                    decorator: mark\n                });\n            } catch (err) {\n                return console.warn(err), !1;\n            }\n        },\n        marks: ()=>({\n                ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(editor) || {}\n            }).marks || [],\n        undo: ()=>editor.undo(),\n        redo: ()=>editor.redo(),\n        select: (selection)=>{\n            const slateSelection = toSlateRange(selection, editor);\n            slateSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(editor), editor.onChange();\n        },\n        focusBlock: ()=>{\n            if (editor.selection) {\n                const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n                if (block) return fromSlateValue([\n                    block\n                ], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n            }\n        },\n        focusChild: ()=>{\n            if (editor.selection) {\n                const block = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n                if (block && editor.isTextBlock(block)) return fromSlateValue([\n                    block\n                ], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n            }\n        },\n        insertChild: (type, value)=>{\n            if (type.name !== types.span.name) return editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"insert.inline object\",\n                    inlineObject: {\n                        name: type.name,\n                        value\n                    }\n                },\n                editor\n            }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? [];\n            if (!editor.selection) throw new Error(\"The editor has no selection\");\n            const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                at: editor.selection.focus.path.slice(0, 1),\n                match: (n)=>n._type === types.block.name\n            }))[0] || [\n                void 0\n            ];\n            if (!focusBlock) throw new Error(\"No focused text block\");\n            if (type.name !== types.span.name && !types.inlineObjects.some((t)=>t.name === type.name)) throw new Error(\"This type cannot be inserted as a child to a text block\");\n            const child = toSlateValue([\n                {\n                    _key: editorActor.getSnapshot().context.keyGenerator(),\n                    _type: types.block.name,\n                    children: [\n                        {\n                            _key: editorActor.getSnapshot().context.keyGenerator(),\n                            _type: type.name,\n                            ...value || {}\n                        }\n                    ]\n                }\n            ], {\n                schemaTypes: editorActor.getSnapshot().context.schema\n            })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_15__.Node.get(editor, focusChildPath);\n            return isSpanNode && focusNode._type !== types.span.name && (debug$6(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n                distance: 1,\n                unit: \"character\"\n            })), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, child, {\n                select: !0,\n                at: editor.selection\n            }), editor.onChange(), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path || [];\n        },\n        insertBlock: (type, value)=>(editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"insert.block object\",\n                    blockObject: {\n                        name: type.name,\n                        value\n                    },\n                    placement: \"auto\"\n                },\n                editor\n            }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? []),\n        hasBlockStyle: (style)=>{\n            try {\n                return isStyleActive({\n                    editor,\n                    style\n                });\n            } catch  {\n                return !1;\n            }\n        },\n        hasListStyle: (listItem)=>{\n            try {\n                return isListItemActive({\n                    editor,\n                    listItem\n                });\n            } catch  {\n                return !1;\n            }\n        },\n        isVoid: (element)=>![\n                types.block.name,\n                types.span.name\n            ].includes(element._type),\n        findByPath: (path)=>{\n            const slatePath = toSlateRange({\n                focus: {\n                    path,\n                    offset: 0\n                },\n                anchor: {\n                    path,\n                    offset: 0\n                }\n            }, editor);\n            if (slatePath) {\n                const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n                if (block && blockPath && typeof block._key == \"string\") {\n                    if (path.length === 1 && slatePath.focus.path.length === 1) return [\n                        fromSlateValue([\n                            block\n                        ], types.block.name)[0],\n                        [\n                            {\n                                _key: block._key\n                            }\n                        ]\n                    ];\n                    const ptBlock = fromSlateValue([\n                        block\n                    ], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n                    if (editor.isTextBlock(ptBlock)) {\n                        const ptChild = ptBlock.children[slatePath.focus.path[1]];\n                        if (ptChild) return [\n                            ptChild,\n                            [\n                                {\n                                    _key: block._key\n                                },\n                                \"children\",\n                                {\n                                    _key: ptChild._key\n                                }\n                            ]\n                        ];\n                    }\n                }\n            }\n            return [\n                void 0,\n                void 0\n            ];\n        },\n        findDOMNode: (element)=>{\n            let node;\n            try {\n                const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                    at: [],\n                    match: (n)=>n._key === element._key\n                }) || [])[0] || [\n                    void 0\n                ];\n                node = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(editor, item);\n            } catch  {}\n            return node;\n        },\n        activeAnnotations: ()=>{\n            if (!editor.selection || editor.selection.focus.path.length < 2) return [];\n            try {\n                const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                    at: editor.selection,\n                    match: (node)=>slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n                });\n                for (const [span, path] of spans){\n                    const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n                        depth: 1\n                    });\n                    editor.isTextBlock(block) && block.markDefs?.forEach((def)=>{\n                        slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n                    });\n                }\n                return activeAnnotations;\n            } catch  {\n                return [];\n            }\n        },\n        isAnnotationActive: (annotationType)=>isAnnotationActive({\n                editor,\n                annotation: {\n                    name: annotationType\n                }\n            }),\n        addAnnotation: (type, value)=>{\n            let paths;\n            return slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, ()=>{\n                paths = addAnnotationActionImplementation({\n                    context: {\n                        keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n                        schema: types\n                    },\n                    action: {\n                        type: \"annotation.add\",\n                        annotation: {\n                            name: type.name,\n                            value: value ?? {}\n                        },\n                        editor\n                    }\n                });\n            }), editor.onChange(), paths;\n        },\n        delete: (selection, options)=>{\n            if (selection) {\n                const range = toSlateRange(selection, editor);\n                if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0)) throw new Error(\"Invalid range\");\n                if (range) {\n                    if (!options?.mode || options?.mode === \"selected\") {\n                        debug$6(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(editor, {\n                            at: range,\n                            hanging: !0,\n                            voids: !0\n                        }), editor.onChange();\n                        return;\n                    }\n                    options?.mode === \"blocks\" && (debug$6(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n                        at: range,\n                        voids: !0,\n                        match: (node)=>editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n                    })), options?.mode === \"children\" && (debug$6(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n                        at: range,\n                        voids: !0,\n                        match: (node)=>node._type === types.span.name || // Text children\n                            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_15__.Element.isElement(node)\n                    })), editor.children.length === 0 && (editor.children = [\n                        editor.pteCreateTextBlock({\n                            decorators: []\n                        })\n                    ]), editor.onChange();\n                }\n            }\n        },\n        removeAnnotation: (type)=>{\n            editorActor.send({\n                type: \"behavior event\",\n                behaviorEvent: {\n                    type: \"annotation.remove\",\n                    annotation: {\n                        name: type.name\n                    }\n                },\n                editor\n            });\n        },\n        getSelection: ()=>{\n            let ptRange = null;\n            if (editor.selection) {\n                const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n                if (existing) return existing;\n                ptRange = toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n            }\n            return ptRange;\n        },\n        getValue: ()=>fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n        isCollapsedSelection: ()=>!!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection),\n        isExpandedSelection: ()=>!!editor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isExpanded(editor.selection),\n        insertBreak: ()=>{\n            editor.insertBreak(), editor.onChange();\n        },\n        getFragment: ()=>fromSlateValue(editor.getFragment(), types.block.name),\n        isSelectionsOverlapping: (selectionA, selectionB)=>{\n            const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);\n            return slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(rangeA, rangeB);\n        }\n    };\n}\nfunction isAnnotationActive({ editor, annotation }) {\n    if (!editor.selection || editor.selection.focus.path.length < 2) return !1;\n    try {\n        const spans = [\n            ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n                at: editor.selection,\n                match: (node)=>slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(node)\n            })\n        ];\n        if (spans.length === 0 || spans.some(([span])=>!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) || !span.marks || span.marks?.length === 0)) return !1;\n        const selectionMarkDefs = spans.reduce((accMarkDefs, [, path])=>{\n            const [block] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, path, {\n                depth: 1\n            });\n            return editor.isTextBlock(block) && block.markDefs ? [\n                ...accMarkDefs,\n                ...block.markDefs\n            ] : accMarkDefs;\n        }, []);\n        return spans.every(([span])=>(0,_sanity_types__WEBPACK_IMPORTED_MODULE_13__.isPortableTextSpan)(span) ? span.marks?.map((markKey)=>selectionMarkDefs.find((def)=>def?._key === markKey)?._type)?.includes(annotation.name) : !1);\n    } catch  {\n        return !1;\n    }\n}\nconst addAnnotationActionImplementation = ({ context, action })=>{\n    const editor = action.editor, { selection: originalSelection } = editor;\n    let paths;\n    if (originalSelection && (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(originalSelection) && (editor.pteExpandToWord(), editor.onChange()), editor.selection)) {\n        let spanPath, markDefPath;\n        const markDefPaths = [];\n        if (!editor.selection) return;\n        const selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node)=>editor.isTextBlock(node),\n            reverse: slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection)\n        });\n        for (const [block, blockPath] of selectedBlocks){\n            if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\") continue;\n            const annotationKey = context.keyGenerator(), markDefs = block.markDefs ?? [];\n            markDefs.find((markDef)=>markDef._type === action.annotation.name && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                markDefs: [\n                    ...markDefs,\n                    {\n                        _type: action.annotation.name,\n                        _key: annotationKey,\n                        ...action.annotation.value\n                    }\n                ]\n            }, {\n                at: blockPath\n            }), markDefPath = [\n                {\n                    _key: block._key\n                },\n                \"markDefs\",\n                {\n                    _key: annotationKey\n                }\n            ], slate__WEBPACK_IMPORTED_MODULE_15__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n                match: slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText,\n                split: !0\n            });\n            const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n            for (const [span, path] of children){\n                if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, path)) continue;\n                const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark)=>markDefs.some((markDef)=>markDef._key === mark && markDef._type === action.annotation.name));\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    marks: [\n                        ...marks.filter((mark)=>!existingSameTypeAnnotations.includes(mark)),\n                        annotationKey\n                    ]\n                }, {\n                    at: path\n                }), spanPath = [\n                    {\n                        _key: block._key\n                    },\n                    \"children\",\n                    {\n                        _key: span._key\n                    }\n                ];\n            }\n        }\n        markDefPath && spanPath && (paths = {\n            markDefPath,\n            markDefPaths,\n            spanPath\n        });\n    }\n    return paths;\n}, removeAnnotationActionImplementation = ({ action })=>{\n    const editor = action.editor;\n    if (debug$6(\"Removing annotation\", action.annotation.name), !!editor.selection) if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n            depth: 1\n        });\n        if (!editor.isTextBlock(block)) return;\n        const potentialAnnotations = (block.markDefs ?? []).filter((markDef)=>markDef._type === action.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n            depth: 2\n        });\n        if (!editor.isTextSpan(selectedChild)) return;\n        const annotationToRemove = selectedChild.marks?.find((mark)=>potentialAnnotations.some((markDef)=>markDef._key === mark));\n        if (!annotationToRemove) return;\n        const previousSpansWithSameAnnotation = [];\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath, {\n            reverse: !0\n        }))if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isBefore(childPath, selectedChildPath)) if (child.marks?.includes(annotationToRemove)) previousSpansWithSameAnnotation.push([\n            child,\n            childPath\n        ]);\n        else break;\n        const nextSpansWithSameAnnotation = [];\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath))if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.isAfter(childPath, selectedChildPath)) if (child.marks?.includes(annotationToRemove)) nextSpansWithSameAnnotation.push([\n            child,\n            childPath\n        ]);\n        else break;\n        for (const [child, childPath] of [\n            ...previousSpansWithSameAnnotation,\n            [\n                selectedChild,\n                selectedChildPath\n            ],\n            ...nextSpansWithSameAnnotation\n        ])slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n            marks: child.marks?.filter((mark)=>mark !== annotationToRemove)\n        }, {\n            at: childPath\n        });\n    } else {\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {}, {\n            match: (node)=>editor.isTextSpan(node),\n            split: !0,\n            hanging: !0\n        });\n        const blocks = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node)=>editor.isTextBlock(node)\n        });\n        for (const [block, blockPath] of blocks){\n            const children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, blockPath);\n            for (const [child, childPath] of children){\n                if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(editor.selection, childPath)) continue;\n                const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark)=>markDefs.find((markDef2)=>markDef2._key === mark)?._type !== action.annotation.name);\n                marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                    marks: marksWithoutAnnotation\n                }, {\n                    at: childPath\n                });\n            }\n        }\n    }\n}, toggleAnnotationActionImplementation = ({ context, action })=>{\n    if (isAnnotationActive({\n        editor: action.editor,\n        annotation: {\n            name: action.annotation.name\n        }\n    })) removeAnnotationActionImplementation({\n        context,\n        action: {\n            type: \"annotation.remove\",\n            annotation: action.annotation,\n            editor: action.editor\n        }\n    });\n    else return addAnnotationActionImplementation({\n        context,\n        action: {\n            type: \"annotation.add\",\n            annotation: action.annotation,\n            editor: action.editor\n        }\n    });\n};\nfunction insertBlock({ block, placement, editor, schema }) {\n    if (editor.selection) {\n        const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n)=>!slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n)\n        }))[0] ?? [\n            void 0,\n            void 0\n        ];\n        if (placement === \"after\") {\n            const nextPath = [\n                focusBlockPath[0] + 1\n            ];\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n                at: nextPath\n            }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n                anchor: {\n                    path: [\n                        nextPath[0],\n                        0\n                    ],\n                    offset: 0\n                },\n                focus: {\n                    path: [\n                        nextPath[0],\n                        0\n                    ],\n                    offset: 0\n                }\n            });\n        } else placement === \"before\" ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(editor, block, {\n            at: focusBlockPath\n        }) : slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block);\n        focusBlock && isEqualToEmptyEditor([\n            focusBlock\n        ], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: focusBlockPath\n        });\n    } else {\n        const lastBlock = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n            match: (n)=>!slate__WEBPACK_IMPORTED_MODULE_15__.Editor.isEditor(n),\n            at: [],\n            reverse: !0\n        }))[0];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, block), lastBlock && isEqualToEmptyEditor([\n            lastBlock[0]\n        ], schema) && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: lastBlock[1]\n        });\n    }\n}\nconst insertBlockObjectActionImplementation = ({ context, action })=>{\n    const block = toSlateValue([\n        {\n            _key: context.keyGenerator(),\n            _type: action.blockObject.name,\n            ...action.blockObject.value ? action.blockObject.value : {}\n        }\n    ], {\n        schemaTypes: context.schema\n    })[0];\n    insertBlock({\n        block,\n        placement: action.placement,\n        editor: action.editor,\n        schema: context.schema\n    });\n}, insertBreakActionImplementation = ({ context, action })=>{\n    const keyGenerator = context.keyGenerator, schema = context.schema, editor = action.editor;\n    if (!editor.selection) return;\n    const [focusSpan] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(editor, {\n        mode: \"lowest\",\n        at: editor.selection.focus,\n        match: (n)=>editor.isTextSpan(n),\n        voids: !1\n    }))[0] ?? [\n        void 0\n    ], focusDecorators = focusSpan?.marks?.filter((mark)=>schema.decorators.some((decorator)=>decorator.value === mark)) ?? [], focusAnnotations = focusSpan?.marks?.filter((mark)=>!schema.decorators.some((decorator)=>decorator.value === mark)) ?? [], anchorBlockPath = editor.selection.anchor.path.slice(0, 1), focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(editor, focusBlockPath);\n    if (editor.isTextBlock(focusBlock)) {\n        const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(editor.selection), lastFocusBlockChild = focusBlock.children[focusBlock.children.length - 1], atTheEndOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(start, {\n            path: [\n                ...focusBlockPath,\n                focusBlock.children.length - 1\n            ],\n            offset: editor.isTextSpan(lastFocusBlockChild) ? lastFocusBlockChild.text.length : 0\n        }), atTheStartOfBlock = lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(end, {\n            path: [\n                ...focusBlockPath,\n                0\n            ],\n            offset: 0\n        });\n        if (atTheEndOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n                decorators: [],\n                listItem: focusBlock.listItem,\n                level: focusBlock.level\n            }));\n            return;\n        }\n        if (atTheStartOfBlock && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(editor.selection)) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n                decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n                listItem: focusBlock.listItem,\n                level: focusBlock.level\n            }));\n            const [nextBlockPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath);\n            slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(editor, {\n                anchor: {\n                    path: [\n                        nextBlockPath,\n                        0\n                    ],\n                    offset: 0\n                },\n                focus: {\n                    path: [\n                        nextBlockPath,\n                        0\n                    ],\n                    offset: 0\n                }\n            });\n            return;\n        }\n        const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0];\n        if (!atTheStartOfBlock && !atTheEndOfBlock && !selectionAcrossBlocks) {\n            slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(editor, ()=>{\n                if (!editor.selection) return;\n                slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n                    at: editor.selection\n                });\n                const [nextNode, nextNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(focusBlockPath), {\n                    depth: 1\n                });\n                if (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setSelection(editor, {\n                    anchor: {\n                        path: [\n                            ...nextNodePath,\n                            0\n                        ],\n                        offset: 0\n                    },\n                    focus: {\n                        path: [\n                            ...nextNodePath,\n                            0\n                        ],\n                        offset: 0\n                    }\n                }), editor.isTextBlock(nextNode) && nextNode.markDefs && nextNode.markDefs.length > 0) {\n                    const newMarkDefKeys = /* @__PURE__ */ new Map(), prevNodeSpans = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, focusBlockPath)).map((entry)=>entry[0]).filter((node)=>editor.isTextSpan(node)), children = slate__WEBPACK_IMPORTED_MODULE_15__.Node.children(editor, nextNodePath);\n                    for (const [child, childPath] of children){\n                        if (!editor.isTextSpan(child)) continue;\n                        const marks = child.marks ?? [];\n                        for (const mark of marks)schema.decorators.some((decorator)=>decorator.value === mark) || prevNodeSpans.some((prevNodeSpan)=>prevNodeSpan.marks?.includes(mark)) && !newMarkDefKeys.has(mark) && newMarkDefKeys.set(mark, keyGenerator());\n                        const newMarks = marks.map((mark)=>newMarkDefKeys.get(mark) ?? mark);\n                        lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(marks, newMarks) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                            marks: newMarks\n                        }, {\n                            at: childPath\n                        });\n                    }\n                    const newMarkDefs = nextNode.markDefs.map((markDef)=>({\n                            ...markDef,\n                            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key\n                        }));\n                    lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(nextNode.markDefs, newMarkDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                        markDefs: newMarkDefs\n                    }, {\n                        at: nextNodePath,\n                        match: (node)=>editor.isTextBlock(node)\n                    });\n                }\n            }), editor.onChange();\n            return;\n        }\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n        always: !0\n    });\n}, insertSoftBreakActionImplementation = ({ context, action })=>{\n    insertBreakActionImplementation({\n        context,\n        action: {\n            ...action,\n            type: \"insert.break\"\n        }\n    });\n}, insertInlineObjectActionImplementation = ({ context, action })=>{\n    if (!context.schema.inlineObjects.some((inlineObject)=>inlineObject.name === action.inlineObject.name)) {\n        console.error(\"Unable to insert unknown inline object\");\n        return;\n    }\n    if (!action.editor.selection) {\n        console.error(\"Unable to insert inline object without selection\");\n        return;\n    }\n    const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n        at: action.editor.selection.focus.path,\n        match: (node)=>action.editor.isTextBlock(node)\n    })).at(0) ?? [\n        void 0,\n        void 0\n    ];\n    if (!focusTextBlock) {\n        console.error(\"Unable to perform action without focus text block\");\n        return;\n    }\n    const child = toSlateValue([\n        {\n            _type: context.schema.block.name,\n            _key: context.keyGenerator(),\n            children: [\n                {\n                    _type: action.inlineObject.name,\n                    _key: context.keyGenerator(),\n                    ...action.inlineObject.value ?? {}\n                }\n            ]\n        }\n    ], {\n        schemaTypes: context.schema\n    }).at(0)?.children.at(0);\n    if (!child) {\n        console.error(\"Unable to insert inline object\");\n        return;\n    }\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, child);\n}, insertSpanActionImplementation = ({ context, action })=>{\n    if (!action.editor.selection) {\n        console.error(\"Unable to perform action without selection\", action);\n        return;\n    }\n    const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_15__.Editor.nodes(action.editor, {\n        at: action.editor.selection.focus.path,\n        match: (node)=>action.editor.isTextBlock(node)\n    }))[0] ?? [\n        void 0,\n        void 0\n    ];\n    if (!focusBlock || !focusBlockPath) {\n        console.error(\"Unable to perform action without focus block\", action);\n        return;\n    }\n    const markDefs = focusBlock.markDefs ?? [], annotations = action.annotations ? action.annotations.map((annotation)=>({\n            _type: annotation.name,\n            _key: context.keyGenerator(),\n            ...annotation.value\n        })) : void 0;\n    annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n        markDefs: [\n            ...markDefs,\n            ...annotations\n        ]\n    }), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(action.editor, {\n        _type: \"span\",\n        _key: context.keyGenerator(),\n        text: action.text,\n        marks: [\n            ...annotations?.map((annotation)=>annotation._key) ?? [],\n            ...action.decorators ?? []\n        ]\n    });\n}, textBlockSetActionImplementation = ({ action })=>{\n    const at = toSlateRange({\n        anchor: {\n            path: action.at,\n            offset: 0\n        },\n        focus: {\n            path: action.at,\n            offset: 0\n        }\n    }, action.editor);\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(action.editor, {\n        ...action.style ? {\n            style: action.style\n        } : {},\n        ...action.listItem ? {\n            listItem: action.listItem\n        } : {},\n        ...action.level ? {\n            level: action.level\n        } : {}\n    }, {\n        at\n    });\n}, textBlockUnsetActionImplementation = ({ action })=>{\n    const at = toSlateRange({\n        anchor: {\n            path: action.at,\n            offset: 0\n        },\n        focus: {\n            path: action.at,\n            offset: 0\n        }\n    }, action.editor);\n    slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.unsetNodes(action.editor, action.props, {\n        at\n    });\n}, behaviorActionImplementations = {\n    \"annotation.add\": addAnnotationActionImplementation,\n    \"annotation.remove\": removeAnnotationActionImplementation,\n    \"annotation.toggle\": toggleAnnotationActionImplementation,\n    blur: ({ action })=>{\n        slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.blur(action.editor);\n    },\n    \"decorator.add\": addDecoratorActionImplementation,\n    \"decorator.remove\": removeDecoratorActionImplementation,\n    \"decorator.toggle\": toggleDecoratorActionImplementation,\n    focus: ({ action })=>{\n        slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.focus(action.editor);\n    },\n    \"delete.backward\": ({ action })=>{\n        (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteBackward)(action.editor, action.unit);\n    },\n    \"delete.forward\": ({ action })=>{\n        (0,slate__WEBPACK_IMPORTED_MODULE_15__.deleteForward)(action.editor, action.unit);\n    },\n    \"delete.block\": ({ action })=>{\n        const range = toSlateRange({\n            anchor: {\n                path: action.blockPath,\n                offset: 0\n            },\n            focus: {\n                path: action.blockPath,\n                offset: 0\n            }\n        }, action.editor);\n        if (!range) {\n            console.error(\"Unable to find Slate range from selection points\");\n            return;\n        }\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(action.editor, {\n            at: range\n        });\n    },\n    \"delete.text\": ({ context, action })=>{\n        const value = fromSlateValue(action.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)), anchor = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.blockOffsetToSpanSelectionPoint)({\n            value,\n            blockOffset: action.anchor\n        }), focus = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.blockOffsetToSpanSelectionPoint)({\n            value,\n            blockOffset: action.focus\n        });\n        if (!anchor || !focus) {\n            console.error(\"Unable to find anchor or focus selection point\");\n            return;\n        }\n        const range = toSlateRange({\n            anchor,\n            focus\n        }, action.editor);\n        if (!range) {\n            console.error(\"Unable to find Slate range from selection points\");\n            return;\n        }\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.delete(action.editor, {\n            at: range\n        });\n    },\n    \"insert.block object\": insertBlockObjectActionImplementation,\n    \"insert.break\": insertBreakActionImplementation,\n    \"insert.inline object\": insertInlineObjectActionImplementation,\n    \"insert.soft break\": insertSoftBreakActionImplementation,\n    \"insert.span\": insertSpanActionImplementation,\n    \"insert.text\": ({ action })=>{\n        (0,slate__WEBPACK_IMPORTED_MODULE_15__.insertText)(action.editor, action.text);\n    },\n    \"insert.text block\": ({ context, action })=>{\n        const block = toSlateValue([\n            {\n                _key: context.keyGenerator(),\n                _type: context.schema.block.name,\n                style: context.schema.styles[0].value ?? \"normal\",\n                markDefs: [],\n                children: action.textBlock?.children?.map((child)=>({\n                        ...child,\n                        _key: context.keyGenerator()\n                    })) ?? [\n                    {\n                        _type: context.schema.span.name,\n                        _key: context.keyGenerator(),\n                        text: \"\"\n                    }\n                ]\n            }\n        ], {\n            schemaTypes: context.schema\n        })[0];\n        insertBlock({\n            block,\n            editor: action.editor,\n            schema: context.schema,\n            placement: action.placement\n        });\n    },\n    effect: ({ action })=>{\n        action.effect();\n    },\n    \"list item.add\": addListItemActionImplementation,\n    \"list item.remove\": removeListItemActionImplementation,\n    \"list item.toggle\": toggleListItemActionImplementation,\n    \"move.block\": ({ action })=>{\n        const at = [\n            toSlatePath(action.at, action.editor)[0]\n        ], to = [\n            toSlatePath(action.to, action.editor)[0]\n        ];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n            at,\n            to,\n            mode: \"highest\"\n        });\n    },\n    \"move.block down\": ({ action })=>{\n        const at = [\n            toSlatePath(action.at, action.editor)[0]\n        ], to = [\n            slate__WEBPACK_IMPORTED_MODULE_15__.Path.next(at)[0]\n        ];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n            at,\n            to,\n            mode: \"highest\"\n        });\n    },\n    \"move.block up\": ({ action })=>{\n        const at = [\n            toSlatePath(action.at, action.editor)[0]\n        ];\n        if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(at)) return;\n        const to = [\n            slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(at)[0]\n        ];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.moveNodes(action.editor, {\n            at,\n            to,\n            mode: \"highest\"\n        });\n    },\n    noop: ()=>{},\n    select: ({ action })=>{\n        const newSelection = toSlateRange(action.selection, action.editor);\n        newSelection ? slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(action.editor);\n    },\n    \"select.previous block\": ({ action })=>{\n        if (!action.editor.selection) {\n            console.error(\"Unable to select previous block without a selection\");\n            return;\n        }\n        const blockPath = action.editor.selection.focus.path.slice(0, 1);\n        if (!slate__WEBPACK_IMPORTED_MODULE_15__.Path.hasPrevious(blockPath)) {\n            console.error(\"There's no previous block to select\");\n            return;\n        }\n        const previousBlockPath = slate__WEBPACK_IMPORTED_MODULE_15__.Path.previous(blockPath);\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, previousBlockPath);\n    },\n    \"select.next block\": ({ action })=>{\n        if (!action.editor.selection) {\n            console.error(\"Unable to select next block without a selection\");\n            return;\n        }\n        const nextBlockPath = [\n            action.editor.selection.focus.path.slice(0, 1)[0] + 1\n        ];\n        slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, nextBlockPath);\n    },\n    reselect: ({ action })=>{\n        const selection = action.editor.selection;\n        selection && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(action.editor, {\n            ...selection\n        }), action.editor.selection = {\n            ...selection\n        });\n    },\n    \"style.toggle\": toggleStyleActionImplementation,\n    \"style.add\": addStyleActionImplementation,\n    \"style.remove\": removeStyleActionImplementation,\n    \"text block.set\": textBlockSetActionImplementation,\n    \"text block.unset\": textBlockUnsetActionImplementation\n};\nfunction performAction({ context, action }) {\n    switch(action.type){\n        case \"delete.block\":\n            {\n                behaviorActionImplementations[\"delete.block\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"delete.text\":\n            {\n                behaviorActionImplementations[\"delete.text\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"insert.span\":\n            {\n                behaviorActionImplementations[\"insert.span\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"insert.text block\":\n            {\n                behaviorActionImplementations[\"insert.text block\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"list item.add\":\n            {\n                behaviorActionImplementations[\"list item.add\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"list item.remove\":\n            {\n                behaviorActionImplementations[\"list item.remove\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"move.block\":\n            {\n                behaviorActionImplementations[\"move.block\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"move.block down\":\n            {\n                behaviorActionImplementations[\"move.block down\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"move.block up\":\n            {\n                behaviorActionImplementations[\"move.block up\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"noop\":\n            break;\n        case \"effect\":\n            {\n                behaviorActionImplementations.effect({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"select\":\n            {\n                behaviorActionImplementations.select({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"select.previous block\":\n            {\n                behaviorActionImplementations[\"select.previous block\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"select.next block\":\n            {\n                behaviorActionImplementations[\"select.next block\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"reselect\":\n            {\n                behaviorActionImplementations.reselect({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"style.add\":\n            {\n                behaviorActionImplementations[\"style.add\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"style.remove\":\n            {\n                behaviorActionImplementations[\"style.remove\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"text block.set\":\n            {\n                behaviorActionImplementations[\"text block.set\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"text block.unset\":\n            {\n                behaviorActionImplementations[\"text block.unset\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        default:\n            performDefaultAction({\n                context,\n                action\n            });\n    }\n}\nfunction performDefaultAction({ context, action }) {\n    switch(action.type){\n        case \"annotation.add\":\n            {\n                behaviorActionImplementations[\"annotation.add\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"annotation.remove\":\n            {\n                behaviorActionImplementations[\"annotation.remove\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"annotation.toggle\":\n            {\n                behaviorActionImplementations[\"annotation.toggle\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"blur\":\n            {\n                behaviorActionImplementations.blur({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"decorator.add\":\n            {\n                behaviorActionImplementations[\"decorator.add\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"decorator.remove\":\n            {\n                behaviorActionImplementations[\"decorator.remove\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"decorator.toggle\":\n            {\n                behaviorActionImplementations[\"decorator.toggle\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"delete.backward\":\n            {\n                behaviorActionImplementations[\"delete.backward\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"delete.forward\":\n            {\n                behaviorActionImplementations[\"delete.forward\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"focus\":\n            {\n                behaviorActionImplementations.focus({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"insert.block object\":\n            {\n                behaviorActionImplementations[\"insert.block object\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"insert.inline object\":\n            {\n                behaviorActionImplementations[\"insert.inline object\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"insert.break\":\n            {\n                behaviorActionImplementations[\"insert.break\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"insert.soft break\":\n            {\n                behaviorActionImplementations[\"insert.soft break\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"insert.text\":\n            {\n                behaviorActionImplementations[\"insert.text\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        case \"list item.toggle\":\n            {\n                behaviorActionImplementations[\"list item.toggle\"]({\n                    context,\n                    action\n                });\n                break;\n            }\n        default:\n            behaviorActionImplementations[\"style.toggle\"]({\n                context,\n                action\n            });\n    }\n}\nfunction getActiveDecorators({ schema, slateEditorInstance }) {\n    const decorators = schema.decorators.map((decorator)=>decorator.value);\n    return (({\n        ...slate__WEBPACK_IMPORTED_MODULE_15__.Editor.marks(slateEditorInstance) ?? {}\n    }).marks ?? []).filter((mark)=>decorators.includes(mark));\n}\nconst editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_18__.setup)({\n    types: {\n        context: {},\n        events: {},\n        emitted: {},\n        input: {}\n    },\n    actions: {\n        \"assign behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            behaviors: ({ event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update behaviors\"), event.behaviors)\n        }),\n        \"assign schema\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            schema: ({ event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"update schema\"), event.schema)\n        }),\n        \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"patch\"), event)),\n        \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, \"mutation\"), event)),\n        \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n            type: \"read only\"\n        }),\n        \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n            type: \"editable\"\n        }),\n        \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            pendingEvents: ({ context, event })=>((0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, [\n                    \"patch\",\n                    \"mutation\"\n                ]), [\n                    ...context.pendingEvents,\n                    event\n                ])\n        }),\n        \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.b)(({ context, enqueue })=>{\n            for (const event of context.pendingEvents)enqueue((0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(event));\n        }),\n        \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n            type: \"ready\"\n        }),\n        \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n            pendingEvents: []\n        }),\n        \"handle behavior event\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.b)(({ context, event, enqueue })=>{\n            (0,xstate__WEBPACK_IMPORTED_MODULE_18__.assertEvent)(event, [\n                \"behavior event\"\n            ]);\n            const defaultAction = event.behaviorEvent.type === \"copy\" || event.behaviorEvent.type === \"key.down\" || event.behaviorEvent.type === \"key.up\" || event.behaviorEvent.type === \"paste\" ? void 0 : {\n                ...event.behaviorEvent,\n                editor: event.editor\n            }, eventBehaviors = context.behaviors.filter((behavior)=>behavior.on === event.behaviorEvent.type);\n            if (eventBehaviors.length === 0) {\n                if (!defaultAction) return;\n                slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, ()=>{\n                    performAction({\n                        context,\n                        action: defaultAction\n                    });\n                }), event.editor.onChange();\n                return;\n            }\n            const value = fromSlateValue(event.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(event.editor)), selection = toPortableTextRange(value, event.editor.selection, context.schema), editorContext = {\n                activeDecorators: getActiveDecorators({\n                    schema: context.schema,\n                    slateEditorInstance: event.editor\n                }),\n                keyGenerator: context.keyGenerator,\n                schema: context.schema,\n                selection,\n                value\n            };\n            let behaviorOverwritten = !1;\n            for (const eventBehavior of eventBehaviors){\n                const shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n                    context: editorContext,\n                    event: event.behaviorEvent\n                });\n                if (!shouldRun) continue;\n                const actionIntendSets = eventBehavior.actions.map((actionSet)=>actionSet({\n                        context: editorContext,\n                        event: event.behaviorEvent\n                    }, shouldRun));\n                for (const actionIntends of actionIntendSets)behaviorOverwritten = behaviorOverwritten || actionIntends.length > 0 && actionIntends.some((actionIntend)=>actionIntend.type !== \"effect\"), slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, ()=>{\n                    for (const actionIntend of actionIntends){\n                        const action = {\n                            ...actionIntend,\n                            editor: event.editor\n                        };\n                        performAction({\n                            context,\n                            action\n                        });\n                    }\n                }), event.editor.onChange(), actionIntends.some((actionIntend)=>actionIntend.type === \"reselect\") && enqueue.raise({\n                    type: \"selection\",\n                    selection: toPortableTextRange(event.editor.children, event.editor.selection, context.schema)\n                });\n                if (behaviorOverwritten) {\n                    event.nativeEvent?.preventDefault();\n                    break;\n                }\n            }\n            if (!behaviorOverwritten) {\n                if (!defaultAction) return;\n                slate__WEBPACK_IMPORTED_MODULE_15__.Editor.withoutNormalizing(event.editor, ()=>{\n                    performAction({\n                        context,\n                        action: defaultAction\n                    });\n                }), event.editor.onChange();\n            }\n        })\n    }\n}).createMachine({\n    id: \"editor\",\n    context: ({ input })=>({\n            behaviors: input.behaviors ?? _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.coreBehaviors,\n            keyGenerator: input.keyGenerator,\n            pendingEvents: [],\n            schema: input.schema,\n            selection: null,\n            initialReadOnly: input.readOnly ?? !1,\n            maxBlocks: input.maxBlocks,\n            value: input.value\n        }),\n    on: {\n        unset: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n        },\n        \"value changed\": {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n        },\n        \"invalid value\": {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n        },\n        error: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n        },\n        selection: {\n            actions: [\n                (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n                    selection: ({ event })=>event.selection\n                }),\n                (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n            ]\n        },\n        blurred: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n        },\n        focused: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n        },\n        loading: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n                type: \"loading\"\n            })\n        },\n        patches: {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n        },\n        \"done loading\": {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)({\n                type: \"done loading\"\n            })\n        },\n        \"update behaviors\": {\n            actions: \"assign behaviors\"\n        },\n        \"update schema\": {\n            actions: \"assign schema\"\n        },\n        \"update value\": {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n                value: ({ event })=>event.value\n            })\n        },\n        \"update maxBlocks\": {\n            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.a)({\n                maxBlocks: ({ event })=>event.maxBlocks\n            })\n        }\n    },\n    type: \"parallel\",\n    states: {\n        \"edit mode\": {\n            initial: \"read only\",\n            states: {\n                \"read only\": {\n                    initial: \"determine initial edit mode\",\n                    states: {\n                        \"determine initial edit mode\": {\n                            on: {\n                                \"done syncing initial value\": [\n                                    {\n                                        target: \"#editor.edit mode.read only.read only\",\n                                        guard: ({ context })=>context.initialReadOnly\n                                    },\n                                    {\n                                        target: \"#editor.edit mode.editable\"\n                                    }\n                                ]\n                            }\n                        },\n                        \"read only\": {\n                            on: {\n                                \"update readOnly\": {\n                                    guard: ({ event })=>!event.readOnly,\n                                    target: \"#editor.edit mode.editable\",\n                                    actions: [\n                                        \"emit editable\"\n                                    ]\n                                }\n                            }\n                        }\n                    }\n                },\n                editable: {\n                    on: {\n                        \"update readOnly\": {\n                            guard: ({ event })=>event.readOnly,\n                            target: \"#editor.edit mode.read only.read only\",\n                            actions: [\n                                \"emit read only\"\n                            ]\n                        },\n                        \"behavior event\": {\n                            actions: \"handle behavior event\"\n                        },\n                        \"annotation.add\": {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        \"annotation.remove\": {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        \"annotation.toggle\": {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        blur: {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        \"decorator.*\": {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        focus: {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        \"insert.*\": {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        \"list item.*\": {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        },\n                        \"style.*\": {\n                            actions: (0,xstate__WEBPACK_IMPORTED_MODULE_19__.e)(({ event })=>event)\n                        }\n                    }\n                }\n            }\n        },\n        setup: {\n            initial: \"setting up\",\n            states: {\n                \"setting up\": {\n                    exit: [\n                        \"emit ready\"\n                    ],\n                    on: {\n                        patch: {\n                            actions: \"defer event\"\n                        },\n                        mutation: {\n                            actions: \"defer event\"\n                        },\n                        \"done syncing initial value\": {\n                            target: \"pristine\"\n                        }\n                    }\n                },\n                pristine: {\n                    initial: \"idle\",\n                    states: {\n                        idle: {\n                            on: {\n                                normalizing: {\n                                    target: \"normalizing\"\n                                },\n                                patch: {\n                                    actions: \"defer event\",\n                                    target: \"#editor.setup.dirty\"\n                                },\n                                mutation: {\n                                    actions: \"defer event\",\n                                    target: \"#editor.setup.dirty\"\n                                }\n                            }\n                        },\n                        normalizing: {\n                            on: {\n                                \"done normalizing\": {\n                                    target: \"idle\"\n                                },\n                                patch: {\n                                    actions: \"defer event\"\n                                },\n                                mutation: {\n                                    actions: \"defer event\"\n                                }\n                            }\n                        }\n                    }\n                },\n                dirty: {\n                    entry: [\n                        \"emit pending events\",\n                        \"clear pending events\"\n                    ],\n                    on: {\n                        patch: {\n                            actions: \"emit patch event\"\n                        },\n                        mutation: {\n                            actions: \"emit mutation event\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\nfunction getValue({ editorActorSnapshot, slateEditorInstance }) {\n    return fromSlateValue(slateEditorInstance.children, editorActorSnapshot.context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditorInstance));\n}\nfunction defaultCompare(a, b) {\n    return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n    let t1;\n    return $[0] !== editor._internal.slateEditor.instance || $[1] !== selector ? (t1 = (editorActorSnapshot)=>{\n        const snapshot = getEditorSnapshot({\n            editorActorSnapshot,\n            slateEditorInstance: editor._internal.slateEditor.instance\n        });\n        return selector(snapshot);\n    }, $[0] = editor._internal.slateEditor.instance, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({ editorActorSnapshot, slateEditorInstance }) {\n    return {\n        context: {\n            activeDecorators: getActiveDecorators({\n                schema: editorActorSnapshot.context.schema,\n                slateEditorInstance\n            }),\n            keyGenerator: editorActorSnapshot.context.keyGenerator,\n            schema: editorActorSnapshot.context.schema,\n            selection: editorActorSnapshot.context.selection,\n            value: getValue({\n                editorActorSnapshot,\n                slateEditorInstance\n            })\n        }\n    };\n}\nconst defaultKeyGenerator = ()=>randomKey(12), getByteHexTable = /* @__PURE__ */ (()=>{\n    let table;\n    return ()=>{\n        if (table) return table;\n        table = [];\n        for(let i = 0; i < 256; ++i)table[i] = (i + 256).toString(16).slice(1);\n        return table;\n    };\n})();\nfunction whatwgRNG(length = 16) {\n    const rnds8 = new Uint8Array(length);\n    return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_25__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n    const table = getByteHexTable();\n    return whatwgRNG(length).reduce((str, n)=>str + table[n], \"\").slice(0, length);\n}\nfunction createEditor(config) {\n    const editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_26__.A)(editorMachine, {\n        input: editorConfigToMachineInput(config)\n    });\n    return editorActor.start(), createEditorFromActor(editorActor);\n}\nfunction useCreateEditor(config) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n    let t0;\n    $[0] !== config ? (t0 = editorConfigToMachineInput(config), $[0] = config, $[1] = t0) : t0 = $[1];\n    let t1;\n    $[2] !== t0 ? (t1 = {\n        input: t0\n    }, $[2] = t0, $[3] = t1) : t1 = $[3];\n    const editorActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useActorRef)(editorMachine, t1);\n    let t2, t3;\n    return $[4] !== editorActor ? (t3 = createEditorFromActor(editorActor), $[4] = editorActor, $[5] = t3) : t3 = $[5], t2 = t3, t2;\n}\nfunction editorConfigToMachineInput(config) {\n    return {\n        behaviors: config.behaviors,\n        keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n        maxBlocks: config.maxBlocks,\n        readOnly: config.readOnly,\n        schema: config.schemaDefinition ? compileSchemaDefinition(config.schemaDefinition) : createEditorSchema(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)),\n        value: config.initialValue\n    };\n}\nfunction createEditorFromActor(editorActor) {\n    const slateEditor = createSlateEditor({\n        editorActor\n    }), editable = createEditableAPI(slateEditor.instance, editorActor);\n    return {\n        getSnapshot: ()=>getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: slateEditor.instance\n            }),\n        send: (event)=>{\n            editorActor.send(event);\n        },\n        on: (event, listener)=>editorActor.on(event, // @ts-expect-error\n            listener),\n        _internal: {\n            editable,\n            editorActor,\n            slateEditor\n        }\n    };\n}\nconst EditorActorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)({}), PortableTextEditorSelectionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.createContext)(null), usePortableTextEditorSelection = ()=>{\n    const selection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(PortableTextEditorSelectionContext);\n    if (selection === void 0) throw new Error(\"The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context.\");\n    return selection;\n}, debug$5 = debugWithName(\"component:PortableTextEditor:SelectionProvider\"), debugVerbose = debug$5.enabled && !1;\nfunction PortableTextEditorSelectionProvider(props) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6), [selection, setSelection] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n    let t0, t1;\n    $[0] !== props.editorActor ? (t0 = ()=>{\n        debug$5(\"Subscribing to selection changes\");\n        const subscription = props.editorActor.on(\"selection\", (event)=>{\n            (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(()=>{\n                debugVerbose && debug$5(\"Setting selection\"), setSelection(event.selection);\n            });\n        });\n        return ()=>{\n            debug$5(\"Unsubscribing to selection changes\"), subscription.unsubscribe();\n        };\n    }, t1 = [\n        props.editorActor\n    ], $[0] = props.editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1);\n    let t2;\n    return $[3] !== props.children || $[4] !== selection ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionContext.Provider, {\n        value: selection,\n        children: props.children\n    }), $[3] = props.children, $[4] = selection, $[5] = t2) : t2 = $[5], t2;\n}\nconst debug$4 = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_4__.Component {\n    static{\n        this.displayName = \"PortableTextEditor\";\n    }\n    /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */ /**\n   * The editor instance\n   */ /*\n   * The editor API (currently implemented with Slate).\n   */ constructor(props){\n        var _temp;\n        _temp = super(props), /**\n   * An observable of all the editor changes.\n   */ this.change$ = new _barrel_optimize_names_Subject_rxjs__WEBPACK_IMPORTED_MODULE_27__.Subject(), this.setEditable = (editable)=>{\n            this.editor._internal.editable = {\n                ...this.editor._internal.editable,\n                ...editable\n            };\n        }, _temp, props.editor ? this.editor = props.editor : this.editor = createEditor({\n            keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n            schema: props.schemaType,\n            initialValue: props.value,\n            maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n            readOnly: props.readOnly\n        }), this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.schema, this.editable = this.editor._internal.editable;\n    }\n    componentDidUpdate(prevProps) {\n        !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = createEditorSchema(this.props.schemaType.hasOwnProperty(\"jsonType\") ? this.props.schemaType : compileType(this.props.schemaType)), this.editor._internal.editorActor.send({\n            type: \"update schema\",\n            schema: this.schemaTypes\n        })), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n            type: \"update readOnly\",\n            readOnly: this.props.readOnly ?? !1\n        }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n            type: \"update maxBlocks\",\n            maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n        }), this.props.value !== prevProps.value && this.editor._internal.editorActor.send({\n            type: \"update value\",\n            value: this.props.value\n        }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n    }\n    render() {\n        const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n            children: [\n                legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RoutePatchesObservableToEditorActor, {\n                    editorActor: this.editor._internal.editorActor,\n                    patches$: legacyPatches\n                }) : null,\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, {\n                    editorActor: this.editor._internal.editorActor,\n                    onChange: (change)=>{\n                        this.props.editor || this.props.onChange(change), this.change$.next(change);\n                    }\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, {\n                    editorActor: this.editor._internal.editorActor,\n                    slateEditor: this.editor._internal.slateEditor.instance\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, {\n                    value: this.editor._internal.editorActor,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_17__.Slate, {\n                        editor: this.editor._internal.slateEditor.instance,\n                        initialValue: this.editor._internal.slateEditor.initialValue,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, {\n                            value: this,\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, {\n                                editorActor: this.editor._internal.editorActor,\n                                children: this.props.children\n                            })\n                        })\n                    })\n                })\n            ]\n        });\n    }\n    static{\n        // Static API methods\n        this.activeAnnotations = (editor)=>editor && editor.editable ? editor.editable.activeAnnotations() : [];\n    }\n    static{\n        this.isAnnotationActive = (editor, annotationType)=>editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n    }\n    static{\n        this.addAnnotation = (editor, type, value)=>editor.editable?.addAnnotation(type, value);\n    }\n    static{\n        this.blur = (editor)=>{\n            debug$4(\"Host blurred\"), editor.editable?.blur();\n        };\n    }\n    static{\n        this.delete = (editor, selection, options)=>editor.editable?.delete(selection, options);\n    }\n    static{\n        this.findDOMNode = (editor, element)=>editor.editable?.findDOMNode(element);\n    }\n    static{\n        this.findByPath = (editor, path)=>editor.editable?.findByPath(path) || [];\n    }\n    static{\n        this.focus = (editor)=>{\n            debug$4(\"Host requesting focus\"), editor.editable?.focus();\n        };\n    }\n    static{\n        this.focusBlock = (editor)=>editor.editable?.focusBlock();\n    }\n    static{\n        this.focusChild = (editor)=>editor.editable?.focusChild();\n    }\n    static{\n        this.getSelection = (editor)=>editor.editable ? editor.editable.getSelection() : null;\n    }\n    static{\n        this.getValue = (editor)=>editor.editable?.getValue();\n    }\n    static{\n        this.hasBlockStyle = (editor, blockStyle)=>editor.editable?.hasBlockStyle(blockStyle);\n    }\n    static{\n        this.hasListStyle = (editor, listStyle)=>editor.editable?.hasListStyle(listStyle);\n    }\n    static{\n        this.isCollapsedSelection = (editor)=>editor.editable?.isCollapsedSelection();\n    }\n    static{\n        this.isExpandedSelection = (editor)=>editor.editable?.isExpandedSelection();\n    }\n    static{\n        this.isMarkActive = (editor, mark)=>editor.editable?.isMarkActive(mark);\n    }\n    static{\n        this.insertChild = (editor, type, value)=>(debug$4(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n    }\n    static{\n        this.insertBlock = (editor, type, value)=>editor.editable?.insertBlock(type, value);\n    }\n    static{\n        this.insertBreak = (editor)=>editor.editable?.insertBreak();\n    }\n    static{\n        this.isVoid = (editor, element)=>editor.editable?.isVoid(element);\n    }\n    static{\n        this.isObjectPath = (_editor, path)=>{\n            if (!path || !Array.isArray(path)) return !1;\n            const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n            return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n        };\n    }\n    static{\n        this.marks = (editor)=>editor.editable?.marks();\n    }\n    static{\n        this.select = (editor, selection)=>{\n            debug$4(\"Host setting selection\", selection), editor.editable?.select(selection);\n        };\n    }\n    static{\n        this.removeAnnotation = (editor, type)=>editor.editable?.removeAnnotation(type);\n    }\n    static{\n        this.toggleBlockStyle = (editor, blockStyle)=>(debug$4(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n    }\n    static{\n        this.toggleList = (editor, listStyle)=>editor.editable?.toggleList(listStyle);\n    }\n    static{\n        this.toggleMark = (editor, mark)=>{\n            debug$4(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n        };\n    }\n    static{\n        this.getFragment = (editor)=>(debug$4(\"Host getting fragment\"), editor.editable?.getFragment());\n    }\n    static{\n        this.undo = (editor)=>{\n            debug$4(\"Host undoing\"), editor.editable?.undo();\n        };\n    }\n    static{\n        this.redo = (editor)=>{\n            debug$4(\"Host redoing\"), editor.editable?.redo();\n        };\n    }\n    static{\n        this.isSelectionsOverlapping = (editor, selectionA, selectionB)=>editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n    }\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4);\n    let t0, t1;\n    return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = ()=>{\n        const subscription = props.patches$.subscribe((payload)=>{\n            props.editorActor.send({\n                type: \"patches\",\n                ...payload\n            });\n        });\n        return ()=>{\n            subscription.unsubscribe();\n        };\n    }, t1 = [\n        props.editorActor,\n        props.patches$\n    ], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\nfunction RouteEventsToChanges(props) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(6);\n    let t0;\n    $[0] !== props ? (t0 = (change)=>props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];\n    const handleChange = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(t0);\n    let t1, t2;\n    return $[2] !== handleChange || $[3] !== props.editorActor ? (t1 = ()=>{\n        debug$4(\"Subscribing to editor changes\");\n        const sub = props.editorActor.on(\"*\", (event)=>{\n            bb5: switch(event.type){\n                case \"blurred\":\n                    {\n                        handleChange({\n                            type: \"blur\",\n                            event: event.event\n                        });\n                        break bb5;\n                    }\n                case \"patch\":\n                    {\n                        handleChange(event);\n                        break bb5;\n                    }\n                case \"loading\":\n                    {\n                        handleChange({\n                            type: \"loading\",\n                            isLoading: !0\n                        });\n                        break bb5;\n                    }\n                case \"done loading\":\n                    {\n                        handleChange({\n                            type: \"loading\",\n                            isLoading: !1\n                        });\n                        break bb5;\n                    }\n                case \"focused\":\n                    {\n                        handleChange({\n                            type: \"focus\",\n                            event: event.event\n                        });\n                        break bb5;\n                    }\n                case \"value changed\":\n                    {\n                        handleChange({\n                            type: \"value\",\n                            value: event.value\n                        });\n                        break bb5;\n                    }\n                case \"invalid value\":\n                    {\n                        handleChange({\n                            type: \"invalidValue\",\n                            resolution: event.resolution,\n                            value: event.value\n                        });\n                        break bb5;\n                    }\n                case \"error\":\n                    {\n                        handleChange({\n                            ...event,\n                            level: \"warning\"\n                        });\n                        break bb5;\n                    }\n                case \"annotation.add\":\n                case \"annotation.remove\":\n                case \"annotation.toggle\":\n                case \"blur\":\n                case \"decorator.add\":\n                case \"decorator.remove\":\n                case \"decorator.toggle\":\n                case \"focus\":\n                case \"insert.block object\":\n                case \"insert.inline object\":\n                case \"list item.toggle\":\n                case \"style.toggle\":\n                case \"patches\":\n                case \"editable\":\n                case \"read only\":\n                    break bb5;\n                default:\n                    handleChange(event);\n            }\n        });\n        return ()=>{\n            debug$4(\"Unsubscribing to changes\"), sub.unsubscribe();\n        };\n    }, t2 = [\n        props.editorActor,\n        handleChange\n    ], $[2] = handleChange, $[3] = props.editorActor, $[4] = t1, $[5] = t2) : (t1 = $[4], t2 = $[5]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t1, t2), null;\n}\nconst debug$3 = debugWithName(\"components:Leaf\"), EMPTY_MARKS = [], Leaf = (props)=>{\n    const { editorActor, attributes, children, leaf, schemaTypes, renderChild, renderDecorator, renderAnnotation } = props, spanRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), portableTextEditor = usePortableTextEditor(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), block = children.props.parent, path = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>block ? [\n            {\n                _key: block?._key\n            },\n            \"children\",\n            {\n                _key: leaf._key\n            }\n        ] : [], [\n        block,\n        leaf._key\n    ]), decoratorValues = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>schemaTypes.decorators.map((dec)=>dec.value), [\n        schemaTypes.decorators\n    ]), marks = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__((leaf.marks || EMPTY_MARKS).filter((mark)=>decoratorValues.includes(mark))), [\n        decoratorValues,\n        leaf.marks\n    ]), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>annotationMarks.map((mark_0)=>!decoratorValues.includes(mark_0) && block?.markDefs?.find((def)=>def._key === mark_0)).filter(Boolean), [\n        annotationMarks,\n        block,\n        decoratorValues\n    ]), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        if (!shouldTrackSelectionAndFocus) {\n            setFocused(!1);\n            return;\n        }\n        const sel = PortableTextEditor.getSelection(portableTextEditor);\n        sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_4__.startTransition)(()=>{\n            setFocused(!0);\n        });\n    }, [\n        shouldTrackSelectionAndFocus,\n        path,\n        portableTextEditor\n    ]);\n    const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(()=>{\n        if (!shouldTrackSelectionAndFocus) return;\n        debug$3(\"Setting selection and focus from range\");\n        const winSelection = window.getSelection();\n        if (!winSelection) {\n            setSelected(!1);\n            return;\n        }\n        if (winSelection && winSelection.rangeCount > 0) {\n            const range = winSelection.getRangeAt(0);\n            spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n        } else setSelected(!1);\n    }, [\n        shouldTrackSelectionAndFocus\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        if (!shouldTrackSelectionAndFocus) return;\n        const onBlur = editorActor.on(\"blur\", ()=>{\n            setFocused(!1), setSelected(!1);\n        }), onFocus = editorActor.on(\"focus\", ()=>{\n            const sel_0 = PortableTextEditor.getSelection(portableTextEditor);\n            sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(sel_0.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n        }), onSelection = editorActor.on(\"selection\", (event)=>{\n            event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(event.selection.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n        });\n        return ()=>{\n            onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n        };\n    }, [\n        editorActor,\n        path,\n        portableTextEditor,\n        setSelectedFromRange,\n        shouldTrackSelectionAndFocus\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>setSelectedFromRange(), [\n        setSelectedFromRange\n    ]);\n    const content = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>{\n        let returnedChildren = children;\n        if (slate__WEBPACK_IMPORTED_MODULE_15__.Text.isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark_1)=>{\n            const schemaType = schemaTypes.decorators.find((dec_0)=>dec_0.value === mark_1);\n            if (schemaType && renderDecorator) {\n                const _props = Object.defineProperty({\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: mark_1\n                }, \"type\", {\n                    enumerable: !1,\n                    get () {\n                        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType;\n                    }\n                });\n                returnedChildren = renderDecorator(_props);\n            }\n        }), block && annotations.length > 0 && annotations.forEach((annotation)=>{\n            const schemaType_0 = schemaTypes.annotations.find((t)=>t.name === annotation._type);\n            if (schemaType_0) if (renderAnnotation) {\n                const _props_0 = Object.defineProperty({\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType: schemaType_0,\n                    value: annotation\n                }, \"type\", {\n                    enumerable: !1,\n                    get () {\n                        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n                    }\n                });\n                returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n                    ref: spanRef,\n                    children: renderAnnotation(_props_0)\n                });\n            } else returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DefaultAnnotation, {\n                annotation,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n                    ref: spanRef,\n                    children: returnedChildren\n                })\n            });\n        }), block && renderChild)) {\n            const child = block.children.find((_child)=>_child._key === leaf._key);\n            if (child) {\n                const _props_1 = Object.defineProperty({\n                    annotations,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                        children: returnedChildren\n                    }),\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    schemaType: schemaTypes.span,\n                    selected,\n                    value: child\n                }, \"type\", {\n                    enumerable: !1,\n                    get () {\n                        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.span;\n                    }\n                });\n                returnedChildren = renderChild(_props_1);\n            }\n        }\n        return returnedChildren;\n    }, [\n        annotations,\n        block,\n        children,\n        focused,\n        leaf,\n        marks,\n        path,\n        renderAnnotation,\n        renderChild,\n        renderDecorator,\n        schemaTypes.annotations,\n        schemaTypes.decorators,\n        schemaTypes.span,\n        selected\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n            ...attributes,\n            ref: spanRef,\n            children: content\n        }, leaf._key), [\n        leaf,\n        attributes,\n        content\n    ]);\n};\nLeaf.displayName = \"Leaf\";\nconst debug$2 = debugWithName(\"plugin:withHotKeys\"), DEFAULT_HOTKEYS = {\n    marks: {\n        \"mod+b\": \"strong\",\n        \"mod+i\": \"em\",\n        \"mod+u\": \"underline\",\n        \"mod+'\": \"code\"\n    },\n    custom: {}\n};\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n    const reservedHotkeys = [\n        \"enter\",\n        \"tab\",\n        \"shift\",\n        \"delete\",\n        \"end\"\n    ], activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS;\n    return function(editor) {\n        return editor.pteWithHotKeys = (event)=>{\n            Object.keys(activeHotkeys).forEach((cat)=>{\n                if (cat === \"marks\") for(const hotkey in activeHotkeys[cat]){\n                    if (reservedHotkeys.includes(hotkey)) throw new Error(`The hotkey ${hotkey} is reserved!`);\n                    if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n                        event.preventDefault();\n                        const possibleMark = activeHotkeys[cat];\n                        if (possibleMark) {\n                            const mark = possibleMark[hotkey];\n                            debug$2(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                                type: \"behavior event\",\n                                behaviorEvent: {\n                                    type: \"decorator.toggle\",\n                                    decorator: mark\n                                },\n                                editor\n                            });\n                        }\n                    }\n                }\n                if (cat === \"custom\") for(const hotkey in activeHotkeys[cat]){\n                    if (reservedHotkeys.includes(hotkey)) throw new Error(`The hotkey ${hotkey} is reserved!`);\n                    if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_24__.isHotkey)(hotkey, event.nativeEvent)) {\n                        const possibleCommand = activeHotkeys[cat];\n                        if (possibleCommand) {\n                            const command = possibleCommand[hotkey];\n                            command(event, portableTextEditor);\n                        }\n                    }\n                }\n            });\n        }, editor;\n    };\n}\nconst debug$1 = debugWithName(\"plugin:withInsertData\");\nfunction createWithInsertData(editorActor, schemaTypes) {\n    return function(editor) {\n        const blockTypeName = schemaTypes.block.name, spanTypeName = schemaTypes.span.name, whitespaceOnPasteMode = schemaTypes.block.options.unstable_whitespaceOnPasteMode, toPlainText = (blocks)=>blocks.map((block)=>editor.isTextBlock(block) ? block.children.map((child)=>child._type === spanTypeName ? child.text : `[${schemaTypes.inlineObjects.find((t)=>t.name === child._type)?.title || \"Object\"}]`).join(\"\") : `[${schemaTypes.blockObjects.find((t)=>t.name === block._type)?.title || \"Object\"}]`).join(`\n\n`);\n        return editor.setFragmentData = (data, originEvent)=>{\n            const { selection } = editor;\n            if (!selection) return;\n            const [start, end] = slate__WEBPACK_IMPORTED_MODULE_15__.Range.edges(selection), startVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n                at: start.path\n            }), endVoid = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.void(editor, {\n                at: end.path\n            });\n            if (slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(selection) && !startVoid) return;\n            const domRange = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMRange(editor, selection);\n            let contents = domRange.cloneContents();\n            if (endVoid) {\n                const [voidNode] = endVoid, r = domRange.cloneRange(), domNode = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(editor, voidNode);\n                r.setEndAfter(domNode), contents = r.cloneContents();\n            }\n            Array.from(contents.querySelectorAll(\"[data-slate-zero-width]\")).forEach((zw)=>{\n                const isNewline = zw.getAttribute(\"data-slate-zero-width\") === \"n\";\n                zw.textContent = isNewline ? `\n` : \"\";\n            }), Array.from(contents.querySelectorAll(\"*\")).forEach((elm)=>{\n                elm.removeAttribute(\"contentEditable\"), elm.removeAttribute(\"data-slate-inline\"), elm.removeAttribute(\"data-slate-leaf\"), elm.removeAttribute(\"data-slate-node\"), elm.removeAttribute(\"data-slate-spacer\"), elm.removeAttribute(\"data-slate-string\"), elm.removeAttribute(\"data-slate-zero-width\"), elm.removeAttribute(\"draggable\");\n                for(const key in elm.attributes)elm.hasAttribute(key) && elm.removeAttribute(key);\n            });\n            const div = contents.ownerDocument.createElement(\"div\");\n            div.appendChild(contents), div.setAttribute(\"hidden\", \"true\"), contents.ownerDocument.body.appendChild(div);\n            const asHTML = div.innerHTML;\n            contents.ownerDocument.body.removeChild(div);\n            const fragment = editor.getFragment(), portableText = fromSlateValue(fragment, blockTypeName), asJSON = JSON.stringify(portableText), asPlainText = toPlainText(portableText);\n            data.clearData(), data.setData(\"text/plain\", asPlainText), data.setData(\"text/html\", asHTML), data.setData(\"application/json\", asJSON), data.setData(\"application/x-portable-text\", asJSON), debug$1(\"text\", asPlainText), data.setData(\"application/x-portable-text-event-origin\", originEvent || \"external\"), debug$1(\"Set fragment data\", asJSON, asHTML);\n        }, editor.insertPortableTextData = (data)=>{\n            if (!editor.selection) return !1;\n            const pText = data.getData(\"application/x-portable-text\"), origin = data.getData(\"application/x-portable-text-event-origin\");\n            if (debug$1(`Inserting portable text from ${origin} event`, pText), pText) {\n                const parsed = JSON.parse(pText);\n                if (Array.isArray(parsed) && parsed.length > 0) {\n                    const slateValue = _regenerateKeys(editor, toSlateValue(parsed, {\n                        schemaTypes\n                    }), editorActor.getSnapshot().context.keyGenerator, spanTypeName, schemaTypes), validation = validateValue(parsed, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n                    if (!validation.valid && !validation.resolution?.autoResolve) {\n                        const errorDescription = `${validation.resolution?.description}`;\n                        return editorActor.send({\n                            type: \"error\",\n                            name: \"pasteError\",\n                            description: errorDescription,\n                            data: validation\n                        }), debug$1(\"Invalid insert result\", validation), !1;\n                    }\n                    return _insertFragment(editor, slateValue, schemaTypes), !0;\n                }\n            }\n            return !1;\n        }, editor.insertTextOrHTMLData = (data)=>{\n            if (!editor.selection) return debug$1(\"No selection, not inserting\"), !1;\n            const html = data.getData(\"text/html\"), text = data.getData(\"text/plain\");\n            if (html || text) {\n                debug$1(\"Inserting data\", data);\n                let portableText, fragment, insertedType;\n                if (html) {\n                    if (portableText = (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(html, schemaTypes.portableText, {\n                        unstable_whitespaceOnPasteMode: whitespaceOnPasteMode\n                    }).map((block)=>(0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.normalizeBlock)(block, {\n                            blockTypeName\n                        })), fragment = toSlateValue(portableText, {\n                        schemaTypes\n                    }), insertedType = \"HTML\", portableText.length === 0) return !1;\n                } else {\n                    const textToHtml = `<html><body>${escapeHtml(text).split(/\\n{2,}/).map((line)=>line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`;\n                    portableText = (0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.htmlToBlocks)(textToHtml, schemaTypes.portableText).map((block)=>(0,_sanity_block_tools__WEBPACK_IMPORTED_MODULE_29__.normalizeBlock)(block, {\n                            blockTypeName\n                        })), fragment = toSlateValue(portableText, {\n                        schemaTypes\n                    }), insertedType = \"text\";\n                }\n                const validation = validateValue(portableText, schemaTypes, editorActor.getSnapshot().context.keyGenerator);\n                if (!validation.valid) {\n                    const errorDescription = `Could not validate the resulting portable text to insert.\n${validation.resolution?.description}\nTry to insert as plain text (shift-paste) instead.`;\n                    return editorActor.send({\n                        type: \"error\",\n                        name: \"pasteError\",\n                        description: errorDescription,\n                        data: validation\n                    }), debug$1(\"Invalid insert result\", validation), !1;\n                }\n                return debug$1(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`), _insertFragment(editor, fragment, schemaTypes), !0;\n            }\n            return !1;\n        }, editor.insertData = (data)=>{\n            editor.insertPortableTextData(data) || editor.insertTextOrHTMLData(data);\n        }, editor.insertFragmentData = (data)=>{\n            const fragment = data.getData(\"application/x-portable-text\");\n            if (fragment) {\n                const parsed = JSON.parse(fragment);\n                return editor.insertFragment(parsed), !0;\n            }\n            return !1;\n        }, editor;\n    };\n}\nconst entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\",\n    \"/\": \"&#x2F;\",\n    \"`\": \"&#x60;\",\n    \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n    return String(str).replace(/[&<>\"'`=/]/g, (s)=>entityMap[s]);\n}\nfunction _regenerateKeys(editor, fragment, keyGenerator, spanTypeName, editorTypes) {\n    return fragment.map((node)=>{\n        const newNode = {\n            ...node\n        };\n        if (editor.isTextBlock(newNode)) {\n            const annotations = editorTypes.annotations.map((t)=>t.name);\n            if (annotations.length === 0) {\n                const { markDefs, ...NewNodeNoDefs } = newNode;\n                return {\n                    ...NewNodeNoDefs,\n                    _key: keyGenerator()\n                };\n            }\n            if ((newNode.markDefs || []).some((def)=>!annotations.includes(def._type))) {\n                const allowedAnnotations = (newNode.markDefs || []).filter((def)=>annotations.includes(def._type));\n                return {\n                    ...newNode,\n                    markDefs: allowedAnnotations,\n                    _key: keyGenerator()\n                };\n            }\n            newNode.markDefs = (newNode.markDefs || []).map((def)=>{\n                const oldKey = def._key, newKey = keyGenerator();\n                return newNode.children = newNode.children.map((child)=>child._type === spanTypeName && editor.isTextSpan(child) ? {\n                        ...child,\n                        marks: child.marks && child.marks.includes(oldKey) ? [\n                            ...child.marks\n                        ].filter((mark)=>mark !== oldKey).concat(newKey) : child.marks\n                    } : child), {\n                    ...def,\n                    _key: newKey\n                };\n            });\n        }\n        const nodeWithNewKeys = {\n            ...newNode,\n            _key: keyGenerator()\n        };\n        return editor.isTextBlock(nodeWithNewKeys) && (nodeWithNewKeys.children = nodeWithNewKeys.children.map((child)=>({\n                ...child,\n                _key: keyGenerator()\n            }))), nodeWithNewKeys;\n    });\n}\nfunction _insertFragment(editor, fragment, schemaTypes) {\n    editor.withoutNormalizing(()=>{\n        if (!editor.selection) return;\n        const [focusBlock, focusPath] = slate__WEBPACK_IMPORTED_MODULE_15__.Editor.node(editor, editor.selection, {\n            depth: 1\n        });\n        if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n            const { markDefs } = focusBlock;\n            debug$1(\"Mixing markDefs of focusBlock and fragments[0] block\", markDefs, fragment[0].markDefs), lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(markDefs, fragment[0].markDefs) || slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.setNodes(editor, {\n                markDefs: lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([\n                    ...fragment[0].markDefs || [],\n                    ...markDefs || []\n                ])\n            }, {\n                at: focusPath,\n                mode: \"lowest\",\n                voids: !1\n            });\n        }\n        isEqualToEmptyEditor(editor.children, schemaTypes) ? (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.splitNodes(editor, {\n            at: [\n                0,\n                0\n            ]\n        }), editor.insertFragment(fragment), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.removeNodes(editor, {\n            at: [\n                0\n            ]\n        })) : editor.insertFragment(fragment);\n    }), editor.onChange();\n}\nfunction withSyncRangeDecorations({ editorActor, slateEditor, syncRangeDecorations }) {\n    const originalApply = slateEditor.apply;\n    return slateEditor.apply = (op)=>{\n        originalApply(op), !editorActor.getSnapshot().matches({\n            \"edit mode\": \"read only\"\n        }) && op.type !== \"set_selection\" && syncRangeDecorations(op);\n    }, ()=>{\n        slateEditor.apply = originalApply;\n    };\n}\nconst debug = debugWithName(\"component:Editable\"), PLACEHOLDER_STYLE = {\n    position: \"absolute\",\n    userSelect: \"none\",\n    pointerEvents: \"none\",\n    left: 0,\n    right: 0\n}, PortableTextEditable = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_4__.forwardRef)(function(props, forwardedRef) {\n    const { hotkeys, onBlur, onFocus, onBeforeInput, onPaste, onCopy, onClick, rangeDecorations, renderAnnotation, renderBlock, renderChild, renderDecorator, renderListItem, renderPlaceholder, renderStyle, selection: propsSelection, scrollSelectionIntoView, spellCheck, ...restProps } = props, portableTextEditor = usePortableTextEditor(), ref = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1), [rangeDecorationState, setRangeDecorationsState] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useImperativeHandle)(forwardedRef, ()=>ref.current);\n    const rangeDecorationsRef = (0,react__WEBPACK_IMPORTED_MODULE_4__.useRef)(rangeDecorations), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_4__.useContext)(EditorActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(editorActor, (s)=>s.matches({\n            \"edit mode\": \"read only\"\n        })), schemaTypes = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_22__.useSelector)(editorActor, (s_0)=>s_0.context.schema), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_17__.useSlate)(), blockTypeName = schemaTypes.block.name;\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>{\n        const withInsertData = createWithInsertData(editorActor, schemaTypes);\n        if (readOnly) return debug(\"Editable is in read only mode\"), withInsertData(slateEditor);\n        const withHotKeys = createWithHotkeys(editorActor, portableTextEditor, hotkeys);\n        return debug(\"Editable is in edit mode\"), withInsertData(withHotKeys(slateEditor));\n    }, [\n        editorActor,\n        hotkeys,\n        portableTextEditor,\n        readOnly,\n        schemaTypes,\n        slateEditor\n    ]);\n    const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((eProps)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Element, {\n            ...eProps,\n            readOnly,\n            renderBlock,\n            renderChild,\n            renderListItem,\n            renderStyle,\n            schemaTypes,\n            spellCheck\n        }), [\n        schemaTypes,\n        spellCheck,\n        readOnly,\n        renderBlock,\n        renderChild,\n        renderListItem,\n        renderStyle\n    ]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((lProps)=>{\n        if (lProps.leaf._type === \"span\") {\n            let rendered = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Leaf, {\n                ...lProps,\n                editorActor,\n                schemaTypes,\n                renderAnnotation,\n                renderChild,\n                renderDecorator,\n                readOnly\n            });\n            if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === \"\") return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n                        style: PLACEHOLDER_STYLE,\n                        contentEditable: !1,\n                        children: renderPlaceholder()\n                    }),\n                    rendered\n                ]\n            });\n            const decoration = lProps.leaf.rangeDecoration;\n            return decoration && (rendered = decoration.component({\n                children: rendered\n            })), rendered;\n        }\n        return lProps.children;\n    }, [\n        editorActor,\n        readOnly,\n        renderAnnotation,\n        renderChild,\n        renderDecorator,\n        renderPlaceholder,\n        schemaTypes\n    ]), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(()=>{\n        if (propsSelection) {\n            debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n            const normalizedSelection = normalizeSelection(propsSelection, fromSlateValue(slateEditor.children, blockTypeName));\n            if (normalizedSelection !== null) {\n                debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n                const slateRange = toSlateRange(normalizedSelection, slateEditor);\n                slateRange && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o)=>o.type === \"set_selection\") || editorActor.send({\n                    type: \"selection\",\n                    selection: normalizedSelection\n                }), slateEditor.onChange());\n            }\n        }\n    }, [\n        blockTypeName,\n        editorActor,\n        propsSelection,\n        slateEditor\n    ]), syncRangeDecorations = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((operation)=>{\n        if (rangeDecorations && rangeDecorations.length > 0) {\n            const newSlateRanges = [];\n            if (rangeDecorations.forEach((rangeDecorationItem)=>{\n                const slateRange_0 = toSlateRange(rangeDecorationItem.selection, slateEditor);\n                if (!slate__WEBPACK_IMPORTED_MODULE_15__.Range.isRange(slateRange_0)) {\n                    rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n                        newSelection: null,\n                        rangeDecoration: rangeDecorationItem,\n                        origin: \"local\"\n                    });\n                    return;\n                }\n                let newRange;\n                if (operation && (newRange = moveRangeByOperation(slateRange_0, operation), newRange && newRange !== slateRange_0 || newRange === null && slateRange_0)) {\n                    const value = PortableTextEditor.getValue(portableTextEditor), newRangeSelection = toPortableTextRange(value, newRange, schemaTypes);\n                    rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({\n                        newSelection: newRangeSelection,\n                        rangeDecoration: rangeDecorationItem,\n                        origin: \"local\"\n                    });\n                }\n                newRange !== null && newSlateRanges.push({\n                    ...newRange || slateRange_0,\n                    rangeDecoration: rangeDecorationItem\n                });\n            }), newSlateRanges.length > 0) {\n                setRangeDecorationsState(newSlateRanges);\n                return;\n            }\n        }\n        setRangeDecorationsState((rangeDecorationState_0)=>rangeDecorationState_0.length > 0 ? [] : rangeDecorationState_0);\n    }, [\n        portableTextEditor,\n        rangeDecorations,\n        schemaTypes,\n        slateEditor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const onReady = editorActor.on(\"ready\", ()=>{\n            syncRangeDecorations(), restoreSelectionFromProps();\n        }), onInvalidValue = editorActor.on(\"invalid value\", ()=>{\n            setHasInvalidValue(!0);\n        }), onValueChanged = editorActor.on(\"value changed\", ()=>{\n            setHasInvalidValue(!1);\n        });\n        return ()=>{\n            onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n        };\n    }, [\n        editorActor,\n        restoreSelectionFromProps,\n        syncRangeDecorations\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n    }, [\n        hasInvalidValue,\n        propsSelection,\n        restoreSelectionFromProps\n    ]);\n    const [syncedRangeDecorations, setSyncedRangeDecorations] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(!1);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        syncedRangeDecorations || (setSyncedRangeDecorations(!0), syncRangeDecorations());\n    }, [\n        syncRangeDecorations,\n        syncedRangeDecorations\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__(rangeDecorations, rangeDecorationsRef.current) || syncRangeDecorations(), rangeDecorationsRef.current = rangeDecorations;\n    }, [\n        rangeDecorations,\n        syncRangeDecorations\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        const teardown = withSyncRangeDecorations({\n            editorActor,\n            slateEditor,\n            syncRangeDecorations\n        });\n        return ()=>teardown();\n    }, [\n        editorActor,\n        slateEditor,\n        syncRangeDecorations\n    ]);\n    const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event)=>{\n        onCopy ? onCopy(event) !== void 0 && event.preventDefault() : event.nativeEvent.clipboardData && editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n                type: \"copy\",\n                data: event.nativeEvent.clipboardData\n            },\n            editor: slateEditor,\n            nativeEvent: event\n        });\n    }, [\n        onCopy,\n        editorActor,\n        slateEditor\n    ]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_0)=>{\n        const value_0 = PortableTextEditor.getValue(portableTextEditor), path = toPortableTextRange(value_0, slateEditor.selection, schemaTypes)?.focus.path || [], onPasteResult = onPaste?.({\n            event: event_0,\n            value: value_0,\n            path,\n            schemaTypes\n        });\n        onPasteResult || !slateEditor.selection ? (event_0.preventDefault(), editorActor.send({\n            type: \"loading\"\n        }), Promise.resolve(onPasteResult).then((result_0)=>{\n            debug(\"Custom paste function from client resolved\", result_0), !result_0 || !result_0.insert ? (debug(\"No result from custom paste handler, pasting normally\"), slateEditor.insertData(event_0.clipboardData)) : result_0.insert ? slateEditor.insertFragment(toSlateValue(result_0.insert, {\n                schemaTypes\n            })) : console.warn(\"Your onPaste function returned something unexpected:\", result_0);\n        }).catch((error)=>(console.error(error), error)).finally(()=>{\n            editorActor.send({\n                type: \"done loading\"\n            });\n        })) : event_0.nativeEvent.clipboardData && editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n                type: \"paste\",\n                data: event_0.nativeEvent.clipboardData\n            },\n            editor: slateEditor,\n            nativeEvent: event_0\n        }), debug(\"No result from custom paste handler, pasting normally\");\n    }, [\n        editorActor,\n        onPaste,\n        portableTextEditor,\n        schemaTypes,\n        slateEditor\n    ]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_1)=>{\n        if (onFocus && onFocus(event_1), !event_1.isDefaultPrevented()) {\n            const selection = PortableTextEditor.getSelection(portableTextEditor);\n            selection === null && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_15__.Editor.start(slateEditor, [])), slateEditor.onChange()), editorActor.send({\n                type: \"focused\",\n                event: event_1\n            });\n            const newSelection = PortableTextEditor.getSelection(portableTextEditor);\n            selection === newSelection && editorActor.send({\n                type: \"selection\",\n                selection\n            });\n        }\n    }, [\n        editorActor,\n        onFocus,\n        portableTextEditor,\n        slateEditor\n    ]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_2)=>{\n        onClick && onClick(event_2);\n        const focusBlockPath = slateEditor.selection ? slateEditor.selection.focus.path.slice(0, 1) : void 0, focusBlock = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Node.descendant(slateEditor, focusBlockPath) : void 0, [_, lastNodePath] = slate__WEBPACK_IMPORTED_MODULE_15__.Node.last(slateEditor, []), lastBlockPath = lastNodePath.slice(0, 1), lastNodeFocused = focusBlockPath ? slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(lastBlockPath, focusBlockPath) : !1, lastBlockIsVoid = focusBlock ? !slateEditor.isTextBlock(focusBlock) : !1;\n        slateEditor.selection && slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(slateEditor.selection) && lastNodeFocused && lastBlockIsVoid && (slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n            decorators: []\n        })), slateEditor.onChange());\n    }, [\n        onClick,\n        slateEditor\n    ]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_3)=>{\n        onBlur && onBlur(event_3), event_3.isPropagationStopped() || editorActor.send({\n            type: \"blurred\",\n            event: event_3\n        });\n    }, [\n        editorActor,\n        onBlur\n    ]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_4)=>{\n        onBeforeInput && onBeforeInput(event_4);\n    }, [\n        onBeforeInput\n    ]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(()=>{\n        if (!slateEditor.selection) return;\n        const root = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.findDocumentOrShadowRoot(slateEditor), { activeElement } = root;\n        if (ref.current !== activeElement) return;\n        const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.getWindow(slateEditor).getSelection();\n        if (!domSelection || domSelection.rangeCount === 0) return;\n        const existingDOMRange = domSelection.getRangeAt(0);\n        try {\n            const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n            (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n        } catch  {\n            debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_15__.Transforms.select(slateEditor, [\n                0,\n                0\n            ]), slateEditor.onChange();\n        }\n    }, [\n        ref,\n        slateEditor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        if (editableElement) {\n            const mutationObserver = new MutationObserver(validateSelection);\n            return mutationObserver.observe(editableElement, {\n                attributeOldValue: !1,\n                attributes: !1,\n                characterData: !1,\n                childList: !0,\n                subtree: !0\n            }), ()=>{\n                mutationObserver.disconnect();\n            };\n        }\n    }, [\n        validateSelection,\n        editableElement\n    ]);\n    const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_5)=>{\n        props.onKeyDown && props.onKeyDown(event_5), event_5.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_5), event_5.isDefaultPrevented() || editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n                type: \"key.down\",\n                keyboardEvent: {\n                    key: event_5.key,\n                    code: event_5.code,\n                    altKey: event_5.altKey,\n                    ctrlKey: event_5.ctrlKey,\n                    metaKey: event_5.metaKey,\n                    shiftKey: event_5.shiftKey\n                }\n            },\n            editor: slateEditor,\n            nativeEvent: event_5\n        });\n    }, [\n        props,\n        editorActor,\n        slateEditor\n    ]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)((event_6)=>{\n        props.onKeyUp && props.onKeyUp(event_6), event_6.isDefaultPrevented() || editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n                type: \"key.up\",\n                keyboardEvent: {\n                    key: event_6.key,\n                    code: event_6.code,\n                    altKey: event_6.altKey,\n                    ctrlKey: event_6.ctrlKey,\n                    metaKey: event_6.metaKey,\n                    shiftKey: event_6.shiftKey\n                }\n            },\n            editor: slateEditor,\n            nativeEvent: event_6\n        });\n    }, [\n        props,\n        editorActor,\n        slateEditor\n    ]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useMemo)(()=>{\n        if (scrollSelectionIntoView !== void 0) return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ : (_editor, domRange)=>{\n            scrollSelectionIntoView(portableTextEditor, domRange);\n        };\n    }, [\n        portableTextEditor,\n        scrollSelectionIntoView\n    ]), decorate = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)(([, path_0])=>{\n        if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) return [\n            {\n                anchor: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: 0\n                },\n                focus: {\n                    path: [\n                        0,\n                        0\n                    ],\n                    offset: 0\n                },\n                placeholder: !0\n            }\n        ];\n        if (path_0.length === 0) return [];\n        const result_1 = rangeDecorationState.filter((item)=>slate__WEBPACK_IMPORTED_MODULE_15__.Range.isCollapsed(item) ? path_0.length !== 2 ? !1 : slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.focus.path, path_0) && slate__WEBPACK_IMPORTED_MODULE_15__.Path.equals(item.anchor.path, path_0) : slate__WEBPACK_IMPORTED_MODULE_15__.Range.intersection(item, {\n                anchor: {\n                    path: path_0,\n                    offset: 0\n                },\n                focus: {\n                    path: path_0,\n                    offset: 0\n                }\n            }) || slate__WEBPACK_IMPORTED_MODULE_15__.Range.includes(item, path_0));\n        return result_1.length > 0 ? result_1 : [];\n    }, [\n        slateEditor,\n        schemaTypes,\n        rangeDecorationState\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        ref.current = slate_react__WEBPACK_IMPORTED_MODULE_17__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n    }, [\n        slateEditor,\n        ref\n    ]), portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_17__.Editable, {\n        ...restProps,\n        autoFocus: !1,\n        className: restProps.className || \"pt-editable\",\n        decorate,\n        onBlur: handleOnBlur,\n        onCopy: handleCopy,\n        onClick: handleClick,\n        onDOMBeforeInput: handleOnBeforeInput,\n        onFocus: handleOnFocus,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onPaste: handlePaste,\n        readOnly,\n        renderPlaceholder: void 0,\n        renderElement,\n        renderLeaf,\n        scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\nconst EditorContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createContext(void 0);\nfunction EditorProvider(props) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(28), editor = useCreateEditor(props.initialConfig), editorActor = editor._internal.editorActor, slateEditor = editor._internal.slateEditor;\n    let t0, t1;\n    $[0] !== editor ? (t1 = new PortableTextEditor({\n        editor\n    }), $[0] = editor, $[1] = t1) : t1 = $[1], t0 = t1;\n    const portableTextEditor = t0;\n    let t2;\n    $[2] !== portableTextEditor.change$ ? (t2 = (change)=>{\n        portableTextEditor.change$.next(change);\n    }, $[2] = portableTextEditor.change$, $[3] = t2) : t2 = $[3];\n    let t3;\n    $[4] !== editorActor || $[5] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RouteEventsToChanges, {\n        editorActor,\n        onChange: t2\n    }), $[4] = editorActor, $[5] = t2, $[6] = t3) : t3 = $[6];\n    let t4;\n    $[7] !== editorActor || $[8] !== slateEditor.instance ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Synchronizer, {\n        editorActor,\n        slateEditor: slateEditor.instance\n    }), $[7] = editorActor, $[8] = slateEditor.instance, $[9] = t4) : t4 = $[9];\n    let t5;\n    $[10] !== editorActor || $[11] !== props.children ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorSelectionProvider, {\n        editorActor,\n        children: props.children\n    }), $[10] = editorActor, $[11] = props.children, $[12] = t5) : t5 = $[12];\n    let t6;\n    $[13] !== portableTextEditor || $[14] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PortableTextEditorContext.Provider, {\n        value: portableTextEditor,\n        children: t5\n    }), $[13] = portableTextEditor, $[14] = t5, $[15] = t6) : t6 = $[15];\n    let t7;\n    $[16] !== slateEditor.initialValue || $[17] !== slateEditor.instance || $[18] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_17__.Slate, {\n        editor: slateEditor.instance,\n        initialValue: slateEditor.initialValue,\n        children: t6\n    }), $[16] = slateEditor.initialValue, $[17] = slateEditor.instance, $[18] = t6, $[19] = t7) : t7 = $[19];\n    let t8;\n    $[20] !== editorActor || $[21] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorActorContext.Provider, {\n        value: editorActor,\n        children: t7\n    }), $[20] = editorActor, $[21] = t7, $[22] = t8) : t8 = $[22];\n    let t9;\n    return $[23] !== editor || $[24] !== t3 || $[25] !== t4 || $[26] !== t8 ? (t9 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(EditorContext.Provider, {\n        value: editor,\n        children: [\n            t3,\n            t4,\n            t8\n        ]\n    }), $[23] = editor, $[24] = t3, $[25] = t4, $[26] = t8, $[27] = t9) : t9 = $[27], t9;\n}\nfunction useEditor() {\n    const editor = react__WEBPACK_IMPORTED_MODULE_4__.useContext(EditorContext);\n    if (!editor) throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n    return editor;\n}\nfunction EditorEventListener(props) {\n    const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_6__.c)(4), editor = useEditor(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_28__.useEffectEvent)(props.on);\n    let t0, t1;\n    return $[0] !== editor || $[1] !== on ? (t0 = ()=>{\n        const subscription = editor.on(\"*\", on);\n        return ()=>{\n            subscription.unsubscribe();\n        };\n    }, t1 = [\n        editor,\n        on\n    ], $[0] = editor, $[1] = on, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(t0, t1), null;\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/node_modules/use-effect-event/dist/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/node_modules/use-effect-event/dist/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEffectEvent: () => (/* binding */ useEffectEvent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction useEffectEvent(fn) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect)(()=>{\n        ref.current = fn;\n    }, [\n        fn\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>{\n        const latestFn = ref.current;\n        return latestFn(...args);\n    }, []);\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3Ivbm9kZV9tb2R1bGVzL3VzZS1lZmZlY3QtZXZlbnQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRTtBQUNoRSxTQUFTRyxlQUFlQyxFQUFFO0lBQ3hCLE1BQU1DLE1BQU1MLDZDQUFNQSxDQUFDO0lBQ25CLE9BQU9DLHlEQUFrQkEsQ0FBQztRQUN4QkksSUFBSUMsT0FBTyxHQUFHRjtJQUNoQixHQUFHO1FBQUNBO0tBQUcsR0FBR0Ysa0RBQVdBLENBQUMsQ0FBQyxHQUFHSztRQUN4QixNQUFNQyxXQUFXSCxJQUFJQyxPQUFPO1FBQzVCLE9BQU9FLFlBQVlEO0lBQ3JCLEdBQUcsRUFBRTtBQUNQO0FBR0UsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaW1wbGUtYmxvZy1zdHlsZWQtdGVtcGxhdGUtZm9yLWhlYWRsZXNzLWNtcy8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9ub2RlX21vZHVsZXMvdXNlLWVmZmVjdC1ldmVudC9kaXN0L2luZGV4LmpzPzI3N2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUmVmLCB1c2VJbnNlcnRpb25FZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VFZmZlY3RFdmVudChmbikge1xuICBjb25zdCByZWYgPSB1c2VSZWYobnVsbCk7XG4gIHJldHVybiB1c2VJbnNlcnRpb25FZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0sIFtmbl0pLCB1c2VDYWxsYmFjaygoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGxhdGVzdEZuID0gcmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIGxhdGVzdEZuKC4uLmFyZ3MpO1xuICB9LCBbXSk7XG59XG5leHBvcnQge1xuICB1c2VFZmZlY3RFdmVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZVJlZiIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0RXZlbnQiLCJmbiIsInJlZiIsImN1cnJlbnQiLCJhcmdzIiwibGF0ZXN0Rm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/node_modules/use-effect-event/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/patches/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/patches/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isObject.js */ \"(ssr)/./node_modules/lodash/isObject.js\");\n/* harmony import */ var lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString.js */ \"(ssr)/./node_modules/lodash/isString.js\");\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/./node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n    if (position !== BEFORE && position !== AFTER) throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`);\n    const items = flatten(...args);\n    if (array.length === 0) return items;\n    const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n    return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n    return values.reduce((prev, item)=>prev.concat(item), []);\n}\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\nfunction move(arr, from, to) {\n    const nextValue = arr.slice(), val = nextValue[from];\n    return nextValue.splice(from, 1), nextValue.splice(to, 0, val), nextValue;\n}\nfunction findTargetIndex(array, pathSegment) {\n    if (typeof pathSegment == \"number\") return pathSegment;\n    const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__(array, pathSegment);\n    return index === -1 ? !1 : index;\n}\nfunction apply$3(value, patch) {\n    const nextValue = value.slice();\n    if (patch.path.length === 0) {\n        if (patch.type === \"setIfMissing\") {\n            if (!Array.isArray(patch.value)) throw new Error(\"Cannot set value of an array to a non-array\");\n            return value === void 0 ? patch.value : value;\n        } else if (patch.type === \"set\") {\n            if (!Array.isArray(patch.value)) throw new Error(\"Cannot set value of an array to a non-array\");\n            return patch.value;\n        } else {\n            if (patch.type === \"unset\") return;\n            if (patch.type === \"move\") {\n                if (!patch.value || !hasOwn(patch.value, \"from\") || !hasOwn(patch.value, \"to\")) throw new Error(`Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(patch.value)}`);\n                return move(nextValue, patch.value.from, patch.value.to);\n            }\n        }\n        throw new Error(`Invalid array operation: ${patch.type}`);\n    }\n    const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n    if (index === !1) return nextValue;\n    if (tail.length === 0) {\n        if (patch.type === \"insert\") {\n            const { position, items } = patch;\n            return insert$1(value, position, index, items);\n        } else if (patch.type === \"unset\") {\n            if (typeof index != \"number\") throw new Error(`Expected array index to be a number, instead got \"${index}\"`);\n            return nextValue.splice(index, 1), nextValue;\n        }\n    }\n    return nextValue[index] = _apply(nextValue[index], {\n        ...patch,\n        path: tail\n    }), nextValue;\n}\nfunction apply$2(value, patch) {\n    const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__(value);\n    if (patch.path.length === 0) {\n        if (patch.type === \"set\") {\n            if (!lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(patch.value)) throw new Error(\"Cannot set value of an object to a non-object\");\n            return patch.value;\n        } else {\n            if (patch.type === \"unset\") return;\n            if (patch.type === \"setIfMissing\") return value === void 0 ? patch.value : value;\n        }\n        throw new Error(`Invalid object operation: ${patch.type}`);\n    }\n    const [head, ...tail] = patch.path;\n    if (typeof head != \"string\") throw new Error(`Expected field name to be a string, instad got: ${head}`);\n    return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__(nextValue, head) : (nextValue[head] = _apply(nextValue[head], {\n        ...patch,\n        path: tail\n    }), nextValue);\n}\nconst OPERATIONS$1 = {\n    replace (_currentValue, nextValue) {\n        return nextValue;\n    },\n    set (_currentValue, nextValue) {\n        return nextValue;\n    },\n    setIfMissing (currentValue, nextValue) {\n        return currentValue === void 0 ? nextValue : currentValue;\n    },\n    unset (_currentValue, _nextValue) {},\n    inc (currentValue, nextValue) {\n        return currentValue + nextValue;\n    },\n    dec (currentValue, nextValue) {\n        return currentValue - nextValue;\n    }\n}, SUPPORTED_PATCH_TYPES$1 = Object.keys(OPERATIONS$1);\nfunction apply$1(value, patch) {\n    if (!SUPPORTED_PATCH_TYPES$1.includes(patch.type)) throw new Error(`Received patch of unsupported type: \"${JSON.stringify(patch.type)}\" for primitives. This is most likely a bug.`);\n    if (patch.path.length > 0) throw new Error(`Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path)=>JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`);\n    return OPERATIONS$1[patch.type](value, patch.value);\n}\nconst OPERATIONS = {\n    replace (_currentValue, nextValue) {\n        return nextValue;\n    },\n    set (_currentValue, nextValue) {\n        return nextValue;\n    },\n    setIfMissing (currentValue, nextValue) {\n        return currentValue === void 0 ? nextValue : currentValue;\n    },\n    unset (_currentValue, _nextValue) {},\n    diffMatchPatch (currentValue, nextValue) {\n        const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.parsePatch)(nextValue), currentValue, {\n            allowExceedingIndices: !0\n        });\n        return result;\n    }\n}, SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);\nfunction apply(value, patch) {\n    if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) throw new Error(`Received patch of unsupported type: \"${JSON.stringify(patch.type)}\" for string. This is most likely a bug.`);\n    if (patch.path.length > 0) throw new Error(`Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`);\n    const func = OPERATIONS[patch.type];\n    if (func) return func(value, patch.value);\n    throw new Error(\"Unknown patch type\");\n}\nfunction applyAll(value, patches) {\n    return patches.reduce(_apply, value);\n}\nfunction applyPatch(value, patch) {\n    return Array.isArray(value) ? apply$3(value, patch) : lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__(value) ? apply(value, patch) : lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(value) ? apply$2(value, patch) : apply$1(value, patch);\n}\nfunction _apply(value, patch) {\n    return applyPatch(value, patch);\n}\nfunction setIfMissing(value, path = []) {\n    return {\n        type: \"setIfMissing\",\n        path,\n        value\n    };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n    const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.stringifyPatches)(patches);\n    return {\n        type: \"diffMatchPatch\",\n        path,\n        value: patch\n    };\n}\nfunction insert(items, position, path = []) {\n    return {\n        type: \"insert\",\n        path,\n        position,\n        items\n    };\n}\nfunction set(value, path = []) {\n    return {\n        type: \"set\",\n        path,\n        value\n    };\n}\nfunction unset(path = []) {\n    return {\n        type: \"unset\",\n        path\n    };\n}\nfunction prefixPath(patch, segment) {\n    return {\n        ...patch,\n        path: [\n            segment,\n            ...patch.path\n        ]\n    };\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst _excluded = [\n    \"block\",\n    \"list\",\n    \"listItem\",\n    \"marks\",\n    \"types\"\n], _excluded2 = [\n    \"listItem\"\n], _excluded3 = [\n    \"_key\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n\n\nfunction mergeComponents(parent, overrides) {\n    const { block, list, listItem, marks, types } = overrides, rest = _objectWithoutProperties(overrides, _excluded);\n    return _objectSpread(_objectSpread({}, parent), {}, {\n        block: mergeDeeply(parent, overrides, \"block\"),\n        list: mergeDeeply(parent, overrides, \"list\"),\n        listItem: mergeDeeply(parent, overrides, \"listItem\"),\n        marks: mergeDeeply(parent, overrides, \"marks\"),\n        types: mergeDeeply(parent, overrides, \"types\")\n    }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n    const override = overrides[key];\n    const parentVal = parent[key];\n    if (typeof override === \"function\") {\n        return override;\n    }\n    if (override && typeof parentVal === \"function\") {\n        return override;\n    }\n    if (override) {\n        return _objectSpread(_objectSpread({}, parentVal), override);\n    }\n    return parentVal;\n}\nconst link = (_ref)=>{\n    let { children, value } = _ref;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: value == null ? void 0 : value.href,\n        children\n    });\n};\nconst underlineStyle = {\n    textDecoration: \"underline\"\n};\nconst defaultMarks = {\n    em: (_ref2)=>{\n        let { children } = _ref2;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n            children\n        });\n    },\n    strong: (_ref3)=>{\n        let { children } = _ref3;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n            children\n        });\n    },\n    code: (_ref4)=>{\n        let { children } = _ref4;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children\n        });\n    },\n    underline: (_ref5)=>{\n        let { children } = _ref5;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n            style: underlineStyle,\n            children\n        });\n    },\n    \"strike-through\": (_ref6)=>{\n        let { children } = _ref6;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"del\", {\n            children\n        });\n    },\n    link\n};\nconst defaultLists = {\n    number: (_ref7)=>{\n        let { children } = _ref7;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ol\", {\n            children\n        });\n    },\n    bullet: (_ref8)=>{\n        let { children } = _ref8;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", {\n            children\n        });\n    }\n};\nconst DefaultListItem = (_ref9)=>{\n    let { children } = _ref9;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children\n    });\n};\nconst getTemplate = (type, prop)=>\"[@portabletext/react] Unknown \".concat(type, \", specify a component for it in the `components.\").concat(prop, \"` prop\");\nconst unknownTypeWarning = (typeName)=>getTemplate('block type \"'.concat(typeName, '\"'), \"types\");\nconst unknownMarkWarning = (markType)=>getTemplate('mark type \"'.concat(markType, '\"'), \"marks\");\nconst unknownBlockStyleWarning = (blockStyle)=>getTemplate('block style \"'.concat(blockStyle, '\"'), \"block\");\nconst unknownListStyleWarning = (listStyle)=>getTemplate('list style \"'.concat(listStyle, '\"'), \"list\");\nconst unknownListItemStyleWarning = (listStyle)=>getTemplate('list item style \"'.concat(listStyle, '\"'), \"listItem\");\nfunction printWarning(message) {\n    console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n};\nconst DefaultUnknownType = (_ref10)=>{\n    let { value, isInline } = _ref10;\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        style: hidden,\n        children: warning\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        style: hidden,\n        children: warning\n    });\n};\nconst DefaultUnknownMark = (_ref11)=>{\n    let { markType, children } = _ref11;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        className: \"unknown__pt__mark__\".concat(markType),\n        children\n    });\n};\nconst DefaultUnknownBlockStyle = (_ref12)=>{\n    let { children } = _ref12;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n        children\n    });\n};\nconst DefaultUnknownList = (_ref13)=>{\n    let { children } = _ref13;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", {\n        children\n    });\n};\nconst DefaultUnknownListItem = (_ref14)=>{\n    let { children } = _ref14;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children\n    });\n};\nconst DefaultHardBreak = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"br\", {});\nconst defaultBlockStyles = {\n    normal: (_ref15)=>{\n        let { children } = _ref15;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children\n        });\n    },\n    blockquote: (_ref16)=>{\n        let { children } = _ref16;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"blockquote\", {\n            children\n        });\n    },\n    h1: (_ref17)=>{\n        let { children } = _ref17;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h1\", {\n            children\n        });\n    },\n    h2: (_ref18)=>{\n        let { children } = _ref18;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n            children\n        });\n    },\n    h3: (_ref19)=>{\n        let { children } = _ref19;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h3\", {\n            children\n        });\n    },\n    h4: (_ref20)=>{\n        let { children } = _ref20;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h4\", {\n            children\n        });\n    },\n    h5: (_ref21)=>{\n        let { children } = _ref21;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h5\", {\n            children\n        });\n    },\n    h6: (_ref22)=>{\n        let { children } = _ref22;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h6\", {\n            children\n        });\n    }\n};\nconst defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n};\nfunction PortableText(_ref23) {\n    let { value: input, components: componentOverrides, listNestingMode, onMissingComponent: missingComponentHandler = printWarning } = _ref23;\n    const handleMissingComponent = missingComponentHandler || noop;\n    const blocks = Array.isArray(input) ? input : [\n        input\n    ];\n    const nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.LIST_NEST_MODE_HTML);\n    const components = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents;\n    }, [\n        componentOverrides\n    ]);\n    const renderNode = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>getNodeRenderer(components, handleMissingComponent), [\n        components,\n        handleMissingComponent\n    ]);\n    const rendered = nested.map((node, index)=>renderNode({\n            node,\n            index,\n            isInline: false,\n            renderNode\n        }));\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: rendered\n    });\n}\nconst getNodeRenderer = (components, handleMissingComponent)=>{\n    function renderNode(options) {\n        const { node, index, isInline } = options;\n        const key = node._key || \"node-\".concat(index);\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitList)(node)) {\n            return renderList(node, index, key);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListItemBlock)(node)) {\n            return renderListItem(node, index, key);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitSpan)(node)) {\n            return renderSpan(node, index, key);\n        }\n        if (hasCustomComponentForNode(node)) {\n            return renderCustomBlock(node, index, key, isInline);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextBlock)(node)) {\n            return renderBlock(node, index, key, isInline);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitTextNode)(node)) {\n            return renderText(node, key);\n        }\n        return renderUnknownType(node, index, key, isInline);\n    }\n    function hasCustomComponentForNode(node) {\n        return node._type in components.types;\n    }\n    function renderListItem(node, index, key) {\n        const tree = serializeBlock({\n            node,\n            index,\n            isInline: false,\n            renderNode\n        });\n        const renderer = components.listItem;\n        const handler = typeof renderer === \"function\" ? renderer : renderer[node.listItem];\n        const Li = handler || components.unknownListItem;\n        if (Li === components.unknownListItem) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListItemStyleWarning(style), {\n                type: style,\n                nodeType: \"listItemStyle\"\n            });\n        }\n        let children = tree.children;\n        if (node.style && node.style !== \"normal\") {\n            const { listItem } = node, blockNode = _objectWithoutProperties(node, _excluded2);\n            children = renderNode({\n                node: blockNode,\n                index,\n                isInline: false,\n                renderNode\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Li, {\n            value: node,\n            index,\n            isInline: false,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderList(node, index, key) {\n        const children = node.children.map((child, childIndex)=>renderNode({\n                node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n                    _key: \"li-\".concat(index, \"-\").concat(childIndex)\n                }),\n                index: childIndex,\n                isInline: false,\n                renderNode\n            }));\n        const component = components.list;\n        const handler = typeof component === \"function\" ? component : component[node.listItem];\n        const List = handler || components.unknownList;\n        if (List === components.unknownList) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListStyleWarning(style), {\n                nodeType: \"listStyle\",\n                type: style\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(List, {\n            value: node,\n            index,\n            isInline: false,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderSpan(node, _index, key) {\n        const { markDef, markType, markKey } = node;\n        const Span = components.marks[markType] || components.unknownMark;\n        const children = node.children.map((child, childIndex)=>renderNode({\n                node: child,\n                index: childIndex,\n                isInline: true,\n                renderNode\n            }));\n        if (Span === components.unknownMark) {\n            handleMissingComponent(unknownMarkWarning(markType), {\n                nodeType: \"mark\",\n                type: markType\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Span, {\n            text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.spanToPlainText)(node),\n            value: markDef,\n            markType,\n            markKey,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderBlock(node, index, key, isInline) {\n        const _serializeBlock = serializeBlock({\n            node,\n            index,\n            isInline,\n            renderNode\n        }), { _key } = _serializeBlock, props = _objectWithoutProperties(_serializeBlock, _excluded3);\n        const style = props.node.style || \"normal\";\n        const handler = typeof components.block === \"function\" ? components.block : components.block[style];\n        const Block = handler || components.unknownBlockStyle;\n        if (Block === components.unknownBlockStyle) {\n            handleMissingComponent(unknownBlockStyleWarning(style), {\n                nodeType: \"blockStyle\",\n                type: style\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n            value: props.node,\n            renderNode\n        }), key);\n    }\n    function renderText(node, key) {\n        if (node.text === \"\\n\") {\n            const HardBreak = components.hardBreak;\n            return HardBreak ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(HardBreak, {}, key) : \"\\n\";\n        }\n        return node.text;\n    }\n    function renderUnknownType(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        };\n        handleMissingComponent(unknownTypeWarning(node._type), {\n            nodeType: \"block\",\n            type: node._type\n        });\n        const UnknownType = components.unknownType;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n    }\n    function renderCustomBlock(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        };\n        const Node = components.types[node._type];\n        return Node ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n    }\n    return renderNode;\n};\nfunction serializeBlock(options) {\n    const { node, index, isInline, renderNode } = options;\n    const tree = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.buildMarksTree)(node);\n    const children = tree.map((child, i)=>renderNode({\n            node: child,\n            isInline: true,\n            index: i,\n            renderNode\n        }));\n    return {\n        _key: node._key || \"block-\".concat(index),\n        children,\n        index,\n        isInline,\n        node\n    };\n}\nfunction noop() {}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction isPortableTextSpan(node) {\n    return node._type === \"span\" && \"text\" in node && typeof node.text === \"string\" && (typeof node.marks === \"undefined\" || Array.isArray(node.marks) && node.marks.every((mark)=>typeof mark === \"string\"));\n}\nfunction isPortableTextBlock(node) {\n    return(// A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def)=>typeof def._key === \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child)=>typeof child === \"object\" && \"_type\" in child));\n}\nfunction isPortableTextListItemBlock(block) {\n    return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem === \"string\" && (typeof block.level === \"undefined\" || typeof block.level === \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n    return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n    return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n    return node._type === \"@text\";\n}\nconst knownDecorators = [\n    \"strong\",\n    \"em\",\n    \"code\",\n    \"underline\",\n    \"strike-through\"\n];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n    if (!isPortableTextSpan(span) || !span.marks) {\n        return [];\n    }\n    if (!span.marks.length) {\n        return [];\n    }\n    const marks = span.marks.slice();\n    const occurences = {};\n    marks.forEach((mark)=>{\n        occurences[mark] = 1;\n        for(let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++){\n            const sibling = blockChildren[siblingIndex];\n            if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) {\n                occurences[mark]++;\n            } else {\n                break;\n            }\n        }\n    });\n    return marks.sort((markA, markB)=>sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n    const aOccurences = occurences[markA];\n    const bOccurences = occurences[markB];\n    if (aOccurences !== bOccurences) {\n        return bOccurences - aOccurences;\n    }\n    const aKnownPos = knownDecorators.indexOf(markA);\n    const bKnownPos = knownDecorators.indexOf(markB);\n    if (aKnownPos !== bKnownPos) {\n        return aKnownPos - bKnownPos;\n    }\n    return markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n    var _a;\n    const { children, markDefs = [] } = block;\n    if (!children || !children.length) {\n        return [];\n    }\n    const sortedMarks = children.map(sortMarksByOccurences);\n    const rootNode = {\n        _type: \"@span\",\n        children: [],\n        markType: \"<unknown>\"\n    };\n    let nodeStack = [\n        rootNode\n    ];\n    for(let i = 0; i < children.length; i++){\n        const span = children[i];\n        if (!span) {\n            continue;\n        }\n        const marksNeeded = sortedMarks[i] || [];\n        let pos = 1;\n        if (nodeStack.length > 1) {\n            for(pos; pos < nodeStack.length; pos++){\n                const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\";\n                const index = marksNeeded.indexOf(mark);\n                if (index === -1) {\n                    break;\n                }\n                marksNeeded.splice(index, 1);\n            }\n        }\n        nodeStack = nodeStack.slice(0, pos);\n        let currentNode = nodeStack[nodeStack.length - 1];\n        if (!currentNode) {\n            continue;\n        }\n        for (const markKey of marksNeeded){\n            const markDef = markDefs.find((def)=>def._key === markKey);\n            const markType = markDef ? markDef._type : markKey;\n            const node = {\n                _type: \"@span\",\n                _key: span._key,\n                children: [],\n                markDef,\n                markType,\n                markKey\n            };\n            currentNode.children.push(node);\n            nodeStack.push(node);\n            currentNode = node;\n        }\n        if (isPortableTextSpan(span)) {\n            const lines = span.text.split(\"\\n\");\n            for(let line = lines.length; line-- > 1;){\n                lines.splice(line, 0, \"\\n\");\n            }\n            currentNode.children = currentNode.children.concat(lines.map((text)=>({\n                    _type: \"@text\",\n                    text\n                })));\n        } else {\n            currentNode.children = currentNode.children.concat(span);\n        }\n    }\n    return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n    const tree = [];\n    let currentList;\n    for(let i = 0; i < blocks.length; i++){\n        const block = blocks[i];\n        if (!block) {\n            continue;\n        }\n        if (!isPortableTextListItemBlock(block)) {\n            tree.push(block);\n            currentList = void 0;\n            continue;\n        }\n        if (!currentList) {\n            currentList = listFromBlock(block, i, mode);\n            tree.push(currentList);\n            continue;\n        }\n        if (blockMatchesList(block, currentList)) {\n            currentList.children.push(block);\n            continue;\n        }\n        if ((block.level || 1) > currentList.level) {\n            const newList = listFromBlock(block, i, mode);\n            if (mode === \"html\") {\n                const lastListItem = currentList.children[currentList.children.length - 1];\n                const newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n                    children: [\n                        ...lastListItem.children,\n                        newList\n                    ]\n                });\n                currentList.children[currentList.children.length - 1] = newLastChild;\n            } else {\n                currentList.children.push(newList);\n            }\n            currentList = newList;\n            continue;\n        }\n        if ((block.level || 1) < currentList.level) {\n            const matchingBranch = tree[tree.length - 1];\n            const match = matchingBranch && findListMatching(matchingBranch, block);\n            if (match) {\n                currentList = match;\n                currentList.children.push(block);\n                continue;\n            }\n            currentList = listFromBlock(block, i, mode);\n            tree.push(currentList);\n            continue;\n        }\n        if (block.listItem !== currentList.listItem) {\n            const matchingBranch = tree[tree.length - 1];\n            const match = matchingBranch && findListMatching(matchingBranch, {\n                level: block.level || 1\n            });\n            if (match && match.listItem === block.listItem) {\n                currentList = match;\n                currentList.children.push(block);\n                continue;\n            } else {\n                currentList = listFromBlock(block, i, mode);\n                tree.push(currentList);\n                continue;\n            }\n        }\n        console.warn(\"Unknown state encountered for block\", block);\n        tree.push(block);\n    }\n    return tree;\n}\nfunction blockMatchesList(block, list) {\n    return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n    return {\n        _type: \"@list\",\n        _key: \"\".concat(block._key || \"\".concat(index), \"-parent\"),\n        mode,\n        level: block.level || 1,\n        listItem: block.listItem,\n        children: [\n            block\n        ]\n    };\n}\nfunction findListMatching(rootNode, matching) {\n    const level = matching.level || 1;\n    const style = matching.listItem || \"normal\";\n    const filterOnType = typeof matching.listItem === \"string\";\n    if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) {\n        return rootNode;\n    }\n    if (!(\"children\" in rootNode)) {\n        return void 0;\n    }\n    const node = rootNode.children[rootNode.children.length - 1];\n    return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nconst leadingSpace = /^\\s/;\nconst trailingSpace = /^\\s/;\nfunction toPlainText(block) {\n    const blocks = Array.isArray(block) ? block : [\n        block\n    ];\n    let text = \"\";\n    blocks.forEach((current, index)=>{\n        if (!isPortableTextBlock(current)) {\n            return;\n        }\n        let pad = false;\n        current.children.forEach((span)=>{\n            if (isPortableTextSpan(span)) {\n                text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\";\n                text += span.text;\n                pad = false;\n            } else {\n                pad = true;\n            }\n        });\n        if (index !== blocks.length - 1) {\n            text += \"\\n\\n\";\n        }\n    });\n    return text;\n}\nfunction spanToPlainText(span) {\n    let text = \"\";\n    span.children.forEach((current)=>{\n        if (isPortableTextToolkitTextNode(current)) {\n            text += current.text;\n        } else if (isPortableTextToolkitSpan(current)) {\n            text += spanToPlainText(current);\n        }\n    });\n    return text;\n}\nconst LIST_NEST_MODE_HTML = \"html\";\nconst LIST_NEST_MODE_DIRECT = \"direct\";\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;