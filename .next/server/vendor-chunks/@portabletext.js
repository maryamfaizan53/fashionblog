"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(rsc)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/toolkit */ \"(rsc)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react.js\");\nconst _excluded = [\n    \"block\",\n    \"list\",\n    \"listItem\",\n    \"marks\",\n    \"types\"\n], _excluded2 = [\n    \"listItem\"\n], _excluded3 = [\n    \"_key\"\n];\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n\n\nfunction mergeComponents(parent, overrides) {\n    const { block, list, listItem, marks, types } = overrides, rest = _objectWithoutProperties(overrides, _excluded);\n    return _objectSpread(_objectSpread({}, parent), {}, {\n        block: mergeDeeply(parent, overrides, \"block\"),\n        list: mergeDeeply(parent, overrides, \"list\"),\n        listItem: mergeDeeply(parent, overrides, \"listItem\"),\n        marks: mergeDeeply(parent, overrides, \"marks\"),\n        types: mergeDeeply(parent, overrides, \"types\")\n    }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n    const override = overrides[key];\n    const parentVal = parent[key];\n    if (typeof override === \"function\") {\n        return override;\n    }\n    if (override && typeof parentVal === \"function\") {\n        return override;\n    }\n    if (override) {\n        return _objectSpread(_objectSpread({}, parentVal), override);\n    }\n    return parentVal;\n}\nconst link = (_ref)=>{\n    let { children, value } = _ref;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"a\", {\n        href: value == null ? void 0 : value.href,\n        children\n    });\n};\nconst underlineStyle = {\n    textDecoration: \"underline\"\n};\nconst defaultMarks = {\n    em: (_ref2)=>{\n        let { children } = _ref2;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"em\", {\n            children\n        });\n    },\n    strong: (_ref3)=>{\n        let { children } = _ref3;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"strong\", {\n            children\n        });\n    },\n    code: (_ref4)=>{\n        let { children } = _ref4;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"code\", {\n            children\n        });\n    },\n    underline: (_ref5)=>{\n        let { children } = _ref5;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n            style: underlineStyle,\n            children\n        });\n    },\n    \"strike-through\": (_ref6)=>{\n        let { children } = _ref6;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"del\", {\n            children\n        });\n    },\n    link\n};\nconst defaultLists = {\n    number: (_ref7)=>{\n        let { children } = _ref7;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ol\", {\n            children\n        });\n    },\n    bullet: (_ref8)=>{\n        let { children } = _ref8;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", {\n            children\n        });\n    }\n};\nconst DefaultListItem = (_ref9)=>{\n    let { children } = _ref9;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children\n    });\n};\nconst getTemplate = (type, prop)=>\"[@portabletext/react] Unknown \".concat(type, \", specify a component for it in the `components.\").concat(prop, \"` prop\");\nconst unknownTypeWarning = (typeName)=>getTemplate('block type \"'.concat(typeName, '\"'), \"types\");\nconst unknownMarkWarning = (markType)=>getTemplate('mark type \"'.concat(markType, '\"'), \"marks\");\nconst unknownBlockStyleWarning = (blockStyle)=>getTemplate('block style \"'.concat(blockStyle, '\"'), \"block\");\nconst unknownListStyleWarning = (listStyle)=>getTemplate('list style \"'.concat(listStyle, '\"'), \"list\");\nconst unknownListItemStyleWarning = (listStyle)=>getTemplate('list item style \"'.concat(listStyle, '\"'), \"listItem\");\nfunction printWarning(message) {\n    console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n};\nconst DefaultUnknownType = (_ref10)=>{\n    let { value, isInline } = _ref10;\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        style: hidden,\n        children: warning\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        style: hidden,\n        children: warning\n    });\n};\nconst DefaultUnknownMark = (_ref11)=>{\n    let { markType, children } = _ref11;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n        className: \"unknown__pt__mark__\".concat(markType),\n        children\n    });\n};\nconst DefaultUnknownBlockStyle = (_ref12)=>{\n    let { children } = _ref12;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n        children\n    });\n};\nconst DefaultUnknownList = (_ref13)=>{\n    let { children } = _ref13;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ul\", {\n        children\n    });\n};\nconst DefaultUnknownListItem = (_ref14)=>{\n    let { children } = _ref14;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"li\", {\n        children\n    });\n};\nconst DefaultHardBreak = ()=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"br\", {});\nconst defaultBlockStyles = {\n    normal: (_ref15)=>{\n        let { children } = _ref15;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children\n        });\n    },\n    blockquote: (_ref16)=>{\n        let { children } = _ref16;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"blockquote\", {\n            children\n        });\n    },\n    h1: (_ref17)=>{\n        let { children } = _ref17;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h1\", {\n            children\n        });\n    },\n    h2: (_ref18)=>{\n        let { children } = _ref18;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h2\", {\n            children\n        });\n    },\n    h3: (_ref19)=>{\n        let { children } = _ref19;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h3\", {\n            children\n        });\n    },\n    h4: (_ref20)=>{\n        let { children } = _ref20;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h4\", {\n            children\n        });\n    },\n    h5: (_ref21)=>{\n        let { children } = _ref21;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h5\", {\n            children\n        });\n    },\n    h6: (_ref22)=>{\n        let { children } = _ref22;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"h6\", {\n            children\n        });\n    }\n};\nconst defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n};\nfunction PortableText(_ref23) {\n    let { value: input, components: componentOverrides, listNestingMode, onMissingComponent: missingComponentHandler = printWarning } = _ref23;\n    const handleMissingComponent = missingComponentHandler || noop;\n    const blocks = Array.isArray(input) ? input : [\n        input\n    ];\n    const nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.LIST_NEST_MODE_HTML);\n    const components = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>{\n        return componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents;\n    }, [\n        componentOverrides\n    ]);\n    const renderNode = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>getNodeRenderer(components, handleMissingComponent), [\n        components,\n        handleMissingComponent\n    ]);\n    const rendered = nested.map((node, index)=>renderNode({\n            node,\n            index,\n            isInline: false,\n            renderNode\n        }));\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: rendered\n    });\n}\nconst getNodeRenderer = (components, handleMissingComponent)=>{\n    function renderNode(options) {\n        const { node, index, isInline } = options;\n        const key = node._key || \"node-\".concat(index);\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitList)(node)) {\n            return renderList(node, index, key);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListItemBlock)(node)) {\n            return renderListItem(node, index, key);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitSpan)(node)) {\n            return renderSpan(node, index, key);\n        }\n        if (hasCustomComponentForNode(node)) {\n            return renderCustomBlock(node, index, key, isInline);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextBlock)(node)) {\n            return renderBlock(node, index, key, isInline);\n        }\n        if ((0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitTextNode)(node)) {\n            return renderText(node, key);\n        }\n        return renderUnknownType(node, index, key, isInline);\n    }\n    function hasCustomComponentForNode(node) {\n        return node._type in components.types;\n    }\n    function renderListItem(node, index, key) {\n        const tree = serializeBlock({\n            node,\n            index,\n            isInline: false,\n            renderNode\n        });\n        const renderer = components.listItem;\n        const handler = typeof renderer === \"function\" ? renderer : renderer[node.listItem];\n        const Li = handler || components.unknownListItem;\n        if (Li === components.unknownListItem) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListItemStyleWarning(style), {\n                type: style,\n                nodeType: \"listItemStyle\"\n            });\n        }\n        let children = tree.children;\n        if (node.style && node.style !== \"normal\") {\n            const { listItem } = node, blockNode = _objectWithoutProperties(node, _excluded2);\n            children = renderNode({\n                node: blockNode,\n                index,\n                isInline: false,\n                renderNode\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Li, {\n            value: node,\n            index,\n            isInline: false,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderList(node, index, key) {\n        const children = node.children.map((child, childIndex)=>renderNode({\n                node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n                    _key: \"li-\".concat(index, \"-\").concat(childIndex)\n                }),\n                index: childIndex,\n                isInline: false,\n                renderNode\n            }));\n        const component = components.list;\n        const handler = typeof component === \"function\" ? component : component[node.listItem];\n        const List = handler || components.unknownList;\n        if (List === components.unknownList) {\n            const style = node.listItem || \"bullet\";\n            handleMissingComponent(unknownListStyleWarning(style), {\n                nodeType: \"listStyle\",\n                type: style\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(List, {\n            value: node,\n            index,\n            isInline: false,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderSpan(node, _index, key) {\n        const { markDef, markType, markKey } = node;\n        const Span = components.marks[markType] || components.unknownMark;\n        const children = node.children.map((child, childIndex)=>renderNode({\n                node: child,\n                index: childIndex,\n                isInline: true,\n                renderNode\n            }));\n        if (Span === components.unknownMark) {\n            handleMissingComponent(unknownMarkWarning(markType), {\n                nodeType: \"mark\",\n                type: markType\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Span, {\n            text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.spanToPlainText)(node),\n            value: markDef,\n            markType,\n            markKey,\n            renderNode,\n            children\n        }, key);\n    }\n    function renderBlock(node, index, key, isInline) {\n        const _serializeBlock = serializeBlock({\n            node,\n            index,\n            isInline,\n            renderNode\n        }), { _key } = _serializeBlock, props = _objectWithoutProperties(_serializeBlock, _excluded3);\n        const style = props.node.style || \"normal\";\n        const handler = typeof components.block === \"function\" ? components.block : components.block[style];\n        const Block = handler || components.unknownBlockStyle;\n        if (Block === components.unknownBlockStyle) {\n            handleMissingComponent(unknownBlockStyleWarning(style), {\n                nodeType: \"blockStyle\",\n                type: style\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n            value: props.node,\n            renderNode\n        }), key);\n    }\n    function renderText(node, key) {\n        if (node.text === \"\\n\") {\n            const HardBreak = components.hardBreak;\n            return HardBreak ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(HardBreak, {}, key) : \"\\n\";\n        }\n        return node.text;\n    }\n    function renderUnknownType(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        };\n        handleMissingComponent(unknownTypeWarning(node._type), {\n            nodeType: \"block\",\n            type: node._type\n        });\n        const UnknownType = components.unknownType;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n    }\n    function renderCustomBlock(node, index, key, isInline) {\n        const nodeOptions = {\n            value: node,\n            isInline,\n            index,\n            renderNode\n        };\n        const Node = components.types[node._type];\n        return Node ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n    }\n    return renderNode;\n};\nfunction serializeBlock(options) {\n    const { node, index, isInline, renderNode } = options;\n    const tree = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.buildMarksTree)(node);\n    const children = tree.map((child, i)=>renderNode({\n            node: child,\n            isInline: true,\n            index: i,\n            renderNode\n        }));\n    return {\n        _key: node._key || \"block-\".concat(index),\n        children,\n        index,\n        isInline,\n        node\n    };\n}\nfunction noop() {}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction isPortableTextSpan(node) {\n    return node._type === \"span\" && \"text\" in node && typeof node.text === \"string\" && (typeof node.marks === \"undefined\" || Array.isArray(node.marks) && node.marks.every((mark)=>typeof mark === \"string\"));\n}\nfunction isPortableTextBlock(node) {\n    return(// A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def)=>typeof def._key === \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child)=>typeof child === \"object\" && \"_type\" in child));\n}\nfunction isPortableTextListItemBlock(block) {\n    return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem === \"string\" && (typeof block.level === \"undefined\" || typeof block.level === \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n    return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n    return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n    return node._type === \"@text\";\n}\nconst knownDecorators = [\n    \"strong\",\n    \"em\",\n    \"code\",\n    \"underline\",\n    \"strike-through\"\n];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n    if (!isPortableTextSpan(span) || !span.marks) {\n        return [];\n    }\n    if (!span.marks.length) {\n        return [];\n    }\n    const marks = span.marks.slice();\n    const occurences = {};\n    marks.forEach((mark)=>{\n        occurences[mark] = 1;\n        for(let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++){\n            const sibling = blockChildren[siblingIndex];\n            if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) {\n                occurences[mark]++;\n            } else {\n                break;\n            }\n        }\n    });\n    return marks.sort((markA, markB)=>sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n    const aOccurences = occurences[markA];\n    const bOccurences = occurences[markB];\n    if (aOccurences !== bOccurences) {\n        return bOccurences - aOccurences;\n    }\n    const aKnownPos = knownDecorators.indexOf(markA);\n    const bKnownPos = knownDecorators.indexOf(markB);\n    if (aKnownPos !== bKnownPos) {\n        return aKnownPos - bKnownPos;\n    }\n    return markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n    var _a;\n    const { children, markDefs = [] } = block;\n    if (!children || !children.length) {\n        return [];\n    }\n    const sortedMarks = children.map(sortMarksByOccurences);\n    const rootNode = {\n        _type: \"@span\",\n        children: [],\n        markType: \"<unknown>\"\n    };\n    let nodeStack = [\n        rootNode\n    ];\n    for(let i = 0; i < children.length; i++){\n        const span = children[i];\n        if (!span) {\n            continue;\n        }\n        const marksNeeded = sortedMarks[i] || [];\n        let pos = 1;\n        if (nodeStack.length > 1) {\n            for(pos; pos < nodeStack.length; pos++){\n                const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\";\n                const index = marksNeeded.indexOf(mark);\n                if (index === -1) {\n                    break;\n                }\n                marksNeeded.splice(index, 1);\n            }\n        }\n        nodeStack = nodeStack.slice(0, pos);\n        let currentNode = nodeStack[nodeStack.length - 1];\n        if (!currentNode) {\n            continue;\n        }\n        for (const markKey of marksNeeded){\n            const markDef = markDefs.find((def)=>def._key === markKey);\n            const markType = markDef ? markDef._type : markKey;\n            const node = {\n                _type: \"@span\",\n                _key: span._key,\n                children: [],\n                markDef,\n                markType,\n                markKey\n            };\n            currentNode.children.push(node);\n            nodeStack.push(node);\n            currentNode = node;\n        }\n        if (isPortableTextSpan(span)) {\n            const lines = span.text.split(\"\\n\");\n            for(let line = lines.length; line-- > 1;){\n                lines.splice(line, 0, \"\\n\");\n            }\n            currentNode.children = currentNode.children.concat(lines.map((text)=>({\n                    _type: \"@text\",\n                    text\n                })));\n        } else {\n            currentNode.children = currentNode.children.concat(span);\n        }\n    }\n    return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n    const tree = [];\n    let currentList;\n    for(let i = 0; i < blocks.length; i++){\n        const block = blocks[i];\n        if (!block) {\n            continue;\n        }\n        if (!isPortableTextListItemBlock(block)) {\n            tree.push(block);\n            currentList = void 0;\n            continue;\n        }\n        if (!currentList) {\n            currentList = listFromBlock(block, i, mode);\n            tree.push(currentList);\n            continue;\n        }\n        if (blockMatchesList(block, currentList)) {\n            currentList.children.push(block);\n            continue;\n        }\n        if ((block.level || 1) > currentList.level) {\n            const newList = listFromBlock(block, i, mode);\n            if (mode === \"html\") {\n                const lastListItem = currentList.children[currentList.children.length - 1];\n                const newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n                    children: [\n                        ...lastListItem.children,\n                        newList\n                    ]\n                });\n                currentList.children[currentList.children.length - 1] = newLastChild;\n            } else {\n                currentList.children.push(newList);\n            }\n            currentList = newList;\n            continue;\n        }\n        if ((block.level || 1) < currentList.level) {\n            const matchingBranch = tree[tree.length - 1];\n            const match = matchingBranch && findListMatching(matchingBranch, block);\n            if (match) {\n                currentList = match;\n                currentList.children.push(block);\n                continue;\n            }\n            currentList = listFromBlock(block, i, mode);\n            tree.push(currentList);\n            continue;\n        }\n        if (block.listItem !== currentList.listItem) {\n            const matchingBranch = tree[tree.length - 1];\n            const match = matchingBranch && findListMatching(matchingBranch, {\n                level: block.level || 1\n            });\n            if (match && match.listItem === block.listItem) {\n                currentList = match;\n                currentList.children.push(block);\n                continue;\n            } else {\n                currentList = listFromBlock(block, i, mode);\n                tree.push(currentList);\n                continue;\n            }\n        }\n        console.warn(\"Unknown state encountered for block\", block);\n        tree.push(block);\n    }\n    return tree;\n}\nfunction blockMatchesList(block, list) {\n    return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n    return {\n        _type: \"@list\",\n        _key: \"\".concat(block._key || \"\".concat(index), \"-parent\"),\n        mode,\n        level: block.level || 1,\n        listItem: block.listItem,\n        children: [\n            block\n        ]\n    };\n}\nfunction findListMatching(rootNode, matching) {\n    const level = matching.level || 1;\n    const style = matching.listItem || \"normal\";\n    const filterOnType = typeof matching.listItem === \"string\";\n    if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) {\n        return rootNode;\n    }\n    if (!(\"children\" in rootNode)) {\n        return void 0;\n    }\n    const node = rootNode.children[rootNode.children.length - 1];\n    return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nconst leadingSpace = /^\\s/;\nconst trailingSpace = /^\\s/;\nfunction toPlainText(block) {\n    const blocks = Array.isArray(block) ? block : [\n        block\n    ];\n    let text = \"\";\n    blocks.forEach((current, index)=>{\n        if (!isPortableTextBlock(current)) {\n            return;\n        }\n        let pad = false;\n        current.children.forEach((span)=>{\n            if (isPortableTextSpan(span)) {\n                text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\";\n                text += span.text;\n                pad = false;\n            } else {\n                pad = true;\n            }\n        });\n        if (index !== blocks.length - 1) {\n            text += \"\\n\\n\";\n        }\n    });\n    return text;\n}\nfunction spanToPlainText(span) {\n    let text = \"\";\n    span.children.forEach((current)=>{\n        if (isPortableTextToolkitTextNode(current)) {\n            text += current.text;\n        } else if (isPortableTextToolkitSpan(current)) {\n            text += spanToPlainText(current);\n        }\n    });\n    return text;\n}\nconst LIST_NEST_MODE_HTML = \"html\";\nconst LIST_NEST_MODE_DIRECT = \"direct\";\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;