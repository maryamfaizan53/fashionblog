"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/progress-stream";
exports.ids = ["vendor-chunks/progress-stream"];
exports.modules = {

/***/ "(ssr)/./node_modules/progress-stream/index.js":
/*!***********************************************!*\
  !*** ./node_modules/progress-stream/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar through = __webpack_require__(/*! through2 */ \"(ssr)/./node_modules/through2/through2.js\");\nvar speedometer = __webpack_require__(/*! speedometer */ \"(ssr)/./node_modules/speedometer/index.js\");\nmodule.exports = function(options, onprogress) {\n    if (typeof options === \"function\") return module.exports(null, options);\n    options = options || {};\n    var length = options.length || 0;\n    var time = options.time || 0;\n    var drain = options.drain || false;\n    var transferred = options.transferred || 0;\n    var nextUpdate = Date.now() + time;\n    var delta = 0;\n    var speed = speedometer(options.speed || 5000);\n    var startTime = Date.now();\n    var update = {\n        percentage: 0,\n        transferred: transferred,\n        length: length,\n        remaining: length,\n        eta: 0,\n        runtime: 0\n    };\n    var emit = function(ended) {\n        update.delta = delta;\n        update.percentage = ended ? 100 : length ? transferred / length * 100 : 0;\n        update.speed = speed(delta);\n        update.eta = Math.round(update.remaining / update.speed);\n        update.runtime = parseInt((Date.now() - startTime) / 1000);\n        nextUpdate = Date.now() + time;\n        delta = 0;\n        tr.emit(\"progress\", update);\n    };\n    var write = function(chunk, enc, callback) {\n        var len = options.objectMode ? 1 : chunk.length;\n        transferred += len;\n        delta += len;\n        update.transferred = transferred;\n        update.remaining = length >= transferred ? length - transferred : 0;\n        if (Date.now() >= nextUpdate) emit(false);\n        callback(null, chunk);\n    };\n    var end = function(callback) {\n        emit(true);\n        callback();\n    };\n    var tr = through(options.objectMode ? {\n        objectMode: true,\n        highWaterMark: 16\n    } : {}, write, end);\n    var onlength = function(newLength) {\n        length = newLength;\n        update.length = length;\n        update.remaining = length - update.transferred;\n        tr.emit(\"length\", length);\n    };\n    // Expose `onlength()` handler as `setLength()` to support custom use cases where length\n    // is not known until after a few chunks have already been pumped, or is\n    // calculated on the fly.\n    tr.setLength = onlength;\n    tr.on(\"pipe\", function(stream) {\n        if (typeof length === \"number\") return;\n        // Support http module\n        if (stream.readable && !stream.writable && stream.headers) {\n            return onlength(parseInt(stream.headers[\"content-length\"] || 0));\n        }\n        // Support streams with a length property\n        if (typeof stream.length === \"number\") {\n            return onlength(stream.length);\n        }\n        // Support request module\n        stream.on(\"response\", function(res) {\n            if (!res || !res.headers) return;\n            if (res.headers[\"content-encoding\"] === \"gzip\") return;\n            if (res.headers[\"content-length\"]) {\n                return onlength(parseInt(res.headers[\"content-length\"]));\n            }\n        });\n    });\n    if (drain) tr.resume();\n    if (onprogress) tr.on(\"progress\", onprogress);\n    tr.progress = function() {\n        update.speed = speed(0);\n        update.eta = Math.round(update.remaining / update.speed);\n        return update;\n    };\n    return tr;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3Mtc3RyZWFtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN0QixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUUxQkUsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLE9BQU8sRUFBRUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9ELFlBQVksWUFBWSxPQUFPRixPQUFPQyxPQUFPLENBQUMsTUFBTUM7SUFDL0RBLFVBQVVBLFdBQVcsQ0FBQztJQUV0QixJQUFJRSxTQUFTRixRQUFRRSxNQUFNLElBQUk7SUFDL0IsSUFBSUMsT0FBT0gsUUFBUUcsSUFBSSxJQUFJO0lBQzNCLElBQUlDLFFBQVFKLFFBQVFJLEtBQUssSUFBSTtJQUM3QixJQUFJQyxjQUFjTCxRQUFRSyxXQUFXLElBQUk7SUFDekMsSUFBSUMsYUFBYUMsS0FBS0MsR0FBRyxLQUFHTDtJQUM1QixJQUFJTSxRQUFRO0lBQ1osSUFBSUMsUUFBUWIsWUFBWUcsUUFBUVUsS0FBSyxJQUFJO0lBQ3pDLElBQUlDLFlBQVlKLEtBQUtDLEdBQUc7SUFFeEIsSUFBSUksU0FBUztRQUNaQyxZQUFZO1FBQ1pSLGFBQWFBO1FBQ2JILFFBQVFBO1FBQ1JZLFdBQVdaO1FBQ1hhLEtBQUs7UUFDTEMsU0FBUztJQUNWO0lBRUEsSUFBSUMsT0FBTyxTQUFTQyxLQUFLO1FBQ3hCTixPQUFPSCxLQUFLLEdBQUdBO1FBQ2ZHLE9BQU9DLFVBQVUsR0FBR0ssUUFBUSxNQUFPaEIsU0FBU0csY0FBWUgsU0FBTyxNQUFNO1FBQ3JFVSxPQUFPRixLQUFLLEdBQUdBLE1BQU1EO1FBQ3JCRyxPQUFPRyxHQUFHLEdBQUdJLEtBQUtDLEtBQUssQ0FBQ1IsT0FBT0UsU0FBUyxHQUFHRixPQUFPRixLQUFLO1FBQ3ZERSxPQUFPSSxPQUFPLEdBQUdLLFNBQVMsQ0FBQ2QsS0FBS0MsR0FBRyxLQUFLRyxTQUFRLElBQUc7UUFDbkRMLGFBQWFDLEtBQUtDLEdBQUcsS0FBR0w7UUFFeEJNLFFBQVE7UUFFUmEsR0FBR0wsSUFBSSxDQUFDLFlBQVlMO0lBQ3JCO0lBQ0EsSUFBSVcsUUFBUSxTQUFTQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsUUFBUTtRQUN4QyxJQUFJQyxNQUFNM0IsUUFBUTRCLFVBQVUsR0FBRyxJQUFJSixNQUFNdEIsTUFBTTtRQUMvQ0csZUFBZXNCO1FBQ2ZsQixTQUFTa0I7UUFDVGYsT0FBT1AsV0FBVyxHQUFHQTtRQUNyQk8sT0FBT0UsU0FBUyxHQUFHWixVQUFVRyxjQUFjSCxTQUFTRyxjQUFjO1FBRWxFLElBQUlFLEtBQUtDLEdBQUcsTUFBTUYsWUFBWVcsS0FBSztRQUNuQ1MsU0FBUyxNQUFNRjtJQUNoQjtJQUNBLElBQUlLLE1BQU0sU0FBU0gsUUFBUTtRQUMxQlQsS0FBSztRQUNMUztJQUNEO0lBRUEsSUFBSUosS0FBSzNCLFFBQVFLLFFBQVE0QixVQUFVLEdBQUc7UUFBQ0EsWUFBVztRQUFNRSxlQUFjO0lBQUUsSUFBSSxDQUFDLEdBQUdQLE9BQU9NO0lBQ3ZGLElBQUlFLFdBQVcsU0FBU0MsU0FBUztRQUNoQzlCLFNBQVM4QjtRQUNUcEIsT0FBT1YsTUFBTSxHQUFHQTtRQUNoQlUsT0FBT0UsU0FBUyxHQUFHWixTQUFTVSxPQUFPUCxXQUFXO1FBQzlDaUIsR0FBR0wsSUFBSSxDQUFDLFVBQVVmO0lBQ25CO0lBRUEsd0ZBQXdGO0lBQ3hGLHdFQUF3RTtJQUN4RSx5QkFBeUI7SUFDekJvQixHQUFHVyxTQUFTLEdBQUdGO0lBRWZULEdBQUdZLEVBQUUsQ0FBQyxRQUFRLFNBQVNDLE1BQU07UUFDNUIsSUFBSSxPQUFPakMsV0FBVyxVQUFVO1FBQ2hDLHNCQUFzQjtRQUN0QixJQUFJaUMsT0FBT0MsUUFBUSxJQUFJLENBQUNELE9BQU9FLFFBQVEsSUFBSUYsT0FBT0csT0FBTyxFQUFFO1lBQzFELE9BQU9QLFNBQVNWLFNBQVNjLE9BQU9HLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSTtRQUM5RDtRQUVBLHlDQUF5QztRQUN6QyxJQUFJLE9BQU9ILE9BQU9qQyxNQUFNLEtBQUssVUFBVTtZQUN0QyxPQUFPNkIsU0FBU0ksT0FBT2pDLE1BQU07UUFDOUI7UUFFQSx5QkFBeUI7UUFDekJpQyxPQUFPRCxFQUFFLENBQUMsWUFBWSxTQUFTSyxHQUFHO1lBQ2pDLElBQUksQ0FBQ0EsT0FBTyxDQUFDQSxJQUFJRCxPQUFPLEVBQUU7WUFDMUIsSUFBSUMsSUFBSUQsT0FBTyxDQUFDLG1CQUFtQixLQUFLLFFBQVE7WUFDaEQsSUFBSUMsSUFBSUQsT0FBTyxDQUFDLGlCQUFpQixFQUFFO2dCQUNsQyxPQUFPUCxTQUFTVixTQUFTa0IsSUFBSUQsT0FBTyxDQUFDLGlCQUFpQjtZQUN2RDtRQUNEO0lBQ0Q7SUFFQSxJQUFJbEMsT0FBT2tCLEdBQUdrQixNQUFNO0lBQ3BCLElBQUl2QyxZQUFZcUIsR0FBR1ksRUFBRSxDQUFDLFlBQVlqQztJQUVsQ3FCLEdBQUdtQixRQUFRLEdBQUc7UUFDYjdCLE9BQU9GLEtBQUssR0FBR0EsTUFBTTtRQUNyQkUsT0FBT0csR0FBRyxHQUFHSSxLQUFLQyxLQUFLLENBQUNSLE9BQU9FLFNBQVMsR0FBR0YsT0FBT0YsS0FBSztRQUV2RCxPQUFPRTtJQUNSO0lBQ0EsT0FBT1U7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL3NpbXBsZS1ibG9nLXN0eWxlZC10ZW1wbGF0ZS1mb3ItaGVhZGxlc3MtY21zLy4vbm9kZV9tb2R1bGVzL3Byb2dyZXNzLXN0cmVhbS9pbmRleC5qcz8zYzQ2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB0aHJvdWdoID0gcmVxdWlyZSgndGhyb3VnaDInKTtcbnZhciBzcGVlZG9tZXRlciA9IHJlcXVpcmUoJ3NwZWVkb21ldGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucywgb25wcm9ncmVzcykge1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHJldHVybiBtb2R1bGUuZXhwb3J0cyhudWxsLCBvcHRpb25zKTtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0dmFyIGxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoIHx8IDA7XG5cdHZhciB0aW1lID0gb3B0aW9ucy50aW1lIHx8IDA7XG5cdHZhciBkcmFpbiA9IG9wdGlvbnMuZHJhaW4gfHwgZmFsc2U7XG5cdHZhciB0cmFuc2ZlcnJlZCA9IG9wdGlvbnMudHJhbnNmZXJyZWQgfHwgMDtcblx0dmFyIG5leHRVcGRhdGUgPSBEYXRlLm5vdygpK3RpbWU7XG5cdHZhciBkZWx0YSA9IDA7XG5cdHZhciBzcGVlZCA9IHNwZWVkb21ldGVyKG9wdGlvbnMuc3BlZWQgfHwgNTAwMCk7XG5cdHZhciBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG5cdHZhciB1cGRhdGUgPSB7XG5cdFx0cGVyY2VudGFnZTogMCxcblx0XHR0cmFuc2ZlcnJlZDogdHJhbnNmZXJyZWQsXG5cdFx0bGVuZ3RoOiBsZW5ndGgsXG5cdFx0cmVtYWluaW5nOiBsZW5ndGgsXG5cdFx0ZXRhOiAwLFxuXHRcdHJ1bnRpbWU6IDBcblx0fTtcblxuXHR2YXIgZW1pdCA9IGZ1bmN0aW9uKGVuZGVkKSB7XG5cdFx0dXBkYXRlLmRlbHRhID0gZGVsdGE7XG5cdFx0dXBkYXRlLnBlcmNlbnRhZ2UgPSBlbmRlZCA/IDEwMCA6IChsZW5ndGggPyB0cmFuc2ZlcnJlZC9sZW5ndGgqMTAwIDogMCk7XG5cdFx0dXBkYXRlLnNwZWVkID0gc3BlZWQoZGVsdGEpO1xuXHRcdHVwZGF0ZS5ldGEgPSBNYXRoLnJvdW5kKHVwZGF0ZS5yZW1haW5pbmcgLyB1cGRhdGUuc3BlZWQpO1xuXHRcdHVwZGF0ZS5ydW50aW1lID0gcGFyc2VJbnQoKERhdGUubm93KCkgLSBzdGFydFRpbWUpLzEwMDApO1xuXHRcdG5leHRVcGRhdGUgPSBEYXRlLm5vdygpK3RpbWU7XG5cblx0XHRkZWx0YSA9IDA7XG5cblx0XHR0ci5lbWl0KCdwcm9ncmVzcycsIHVwZGF0ZSk7XG5cdH07XG5cdHZhciB3cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmMsIGNhbGxiYWNrKSB7XG5cdFx0dmFyIGxlbiA9IG9wdGlvbnMub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cdFx0dHJhbnNmZXJyZWQgKz0gbGVuO1xuXHRcdGRlbHRhICs9IGxlbjtcblx0XHR1cGRhdGUudHJhbnNmZXJyZWQgPSB0cmFuc2ZlcnJlZDtcblx0XHR1cGRhdGUucmVtYWluaW5nID0gbGVuZ3RoID49IHRyYW5zZmVycmVkID8gbGVuZ3RoIC0gdHJhbnNmZXJyZWQgOiAwO1xuXG5cdFx0aWYgKERhdGUubm93KCkgPj0gbmV4dFVwZGF0ZSkgZW1pdChmYWxzZSk7XG5cdFx0Y2FsbGJhY2sobnVsbCwgY2h1bmspO1xuXHR9O1xuXHR2YXIgZW5kID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRlbWl0KHRydWUpO1xuXHRcdGNhbGxiYWNrKCk7XG5cdH07XG5cblx0dmFyIHRyID0gdGhyb3VnaChvcHRpb25zLm9iamVjdE1vZGUgPyB7b2JqZWN0TW9kZTp0cnVlLCBoaWdoV2F0ZXJNYXJrOjE2fSA6IHt9LCB3cml0ZSwgZW5kKTtcblx0dmFyIG9ubGVuZ3RoID0gZnVuY3Rpb24obmV3TGVuZ3RoKSB7XG5cdFx0bGVuZ3RoID0gbmV3TGVuZ3RoO1xuXHRcdHVwZGF0ZS5sZW5ndGggPSBsZW5ndGg7XG5cdFx0dXBkYXRlLnJlbWFpbmluZyA9IGxlbmd0aCAtIHVwZGF0ZS50cmFuc2ZlcnJlZDtcblx0XHR0ci5lbWl0KCdsZW5ndGgnLCBsZW5ndGgpO1xuXHR9O1xuXHRcblx0Ly8gRXhwb3NlIGBvbmxlbmd0aCgpYCBoYW5kbGVyIGFzIGBzZXRMZW5ndGgoKWAgdG8gc3VwcG9ydCBjdXN0b20gdXNlIGNhc2VzIHdoZXJlIGxlbmd0aFxuXHQvLyBpcyBub3Qga25vd24gdW50aWwgYWZ0ZXIgYSBmZXcgY2h1bmtzIGhhdmUgYWxyZWFkeSBiZWVuIHB1bXBlZCwgb3IgaXNcblx0Ly8gY2FsY3VsYXRlZCBvbiB0aGUgZmx5LlxuXHR0ci5zZXRMZW5ndGggPSBvbmxlbmd0aDtcblx0XG5cdHRyLm9uKCdwaXBlJywgZnVuY3Rpb24oc3RyZWFtKSB7XG5cdFx0aWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSByZXR1cm47XG5cdFx0Ly8gU3VwcG9ydCBodHRwIG1vZHVsZVxuXHRcdGlmIChzdHJlYW0ucmVhZGFibGUgJiYgIXN0cmVhbS53cml0YWJsZSAmJiBzdHJlYW0uaGVhZGVycykge1xuXHRcdFx0cmV0dXJuIG9ubGVuZ3RoKHBhcnNlSW50KHN0cmVhbS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddIHx8IDApKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0IHN0cmVhbXMgd2l0aCBhIGxlbmd0aCBwcm9wZXJ0eVxuXHRcdGlmICh0eXBlb2Ygc3RyZWFtLmxlbmd0aCA9PT0gJ251bWJlcicpIHtcblx0XHRcdHJldHVybiBvbmxlbmd0aChzdHJlYW0ubGVuZ3RoKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0IHJlcXVlc3QgbW9kdWxlXG5cdFx0c3RyZWFtLm9uKCdyZXNwb25zZScsIGZ1bmN0aW9uKHJlcykge1xuXHRcdFx0aWYgKCFyZXMgfHwgIXJlcy5oZWFkZXJzKSByZXR1cm47XG5cdFx0XHRpZiAocmVzLmhlYWRlcnNbJ2NvbnRlbnQtZW5jb2RpbmcnXSA9PT0gJ2d6aXAnKSByZXR1cm47XG5cdFx0XHRpZiAocmVzLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pIHtcblx0XHRcdFx0cmV0dXJuIG9ubGVuZ3RoKHBhcnNlSW50KHJlcy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cdGlmIChkcmFpbikgdHIucmVzdW1lKCk7XG5cdGlmIChvbnByb2dyZXNzKSB0ci5vbigncHJvZ3Jlc3MnLCBvbnByb2dyZXNzKTtcblxuXHR0ci5wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHVwZGF0ZS5zcGVlZCA9IHNwZWVkKDApO1xuXHRcdHVwZGF0ZS5ldGEgPSBNYXRoLnJvdW5kKHVwZGF0ZS5yZW1haW5pbmcgLyB1cGRhdGUuc3BlZWQpO1xuXG5cdFx0cmV0dXJuIHVwZGF0ZTtcblx0fTtcblx0cmV0dXJuIHRyO1xufTtcbiJdLCJuYW1lcyI6WyJ0aHJvdWdoIiwicmVxdWlyZSIsInNwZWVkb21ldGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJvbnByb2dyZXNzIiwibGVuZ3RoIiwidGltZSIsImRyYWluIiwidHJhbnNmZXJyZWQiLCJuZXh0VXBkYXRlIiwiRGF0ZSIsIm5vdyIsImRlbHRhIiwic3BlZWQiLCJzdGFydFRpbWUiLCJ1cGRhdGUiLCJwZXJjZW50YWdlIiwicmVtYWluaW5nIiwiZXRhIiwicnVudGltZSIsImVtaXQiLCJlbmRlZCIsIk1hdGgiLCJyb3VuZCIsInBhcnNlSW50IiwidHIiLCJ3cml0ZSIsImNodW5rIiwiZW5jIiwiY2FsbGJhY2siLCJsZW4iLCJvYmplY3RNb2RlIiwiZW5kIiwiaGlnaFdhdGVyTWFyayIsIm9ubGVuZ3RoIiwibmV3TGVuZ3RoIiwic2V0TGVuZ3RoIiwib24iLCJzdHJlYW0iLCJyZWFkYWJsZSIsIndyaXRhYmxlIiwiaGVhZGVycyIsInJlcyIsInJlc3VtZSIsInByb2dyZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/progress-stream/index.js\n");

/***/ })

};
;